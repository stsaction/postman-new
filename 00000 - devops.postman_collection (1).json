{
	"info": {
		"_postman_id": "435e0953-8569-48b7-a0d9-dbe6524c0fba",
		"name": "00000 - devops",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27036089",
		"_collection_link": "https://grey-desert-332732.postman.co/workspace/Balaji~3a8761bd-4812-494b-995d-985132e731a6/collection/27036089-435e0953-8569-48b7-a0d9-dbe6524c0fba?action=share&creator=27036089&source=collection_link"
	},
	"item": [
		{
			"name": "1099 NEC - 1.7.3",
			"item": [
				{
					"name": "JWT - V2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"  return encodedSource;\r",
									"};\r",
									"//To generate Header and Payload\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-260\r",
									"};\r",
									"console.log(time);\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"//Client secret ID - To generate JWS\r",
									"var secretID = pm.environment.get('secret');\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"console.log(jws);\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ValidateForm",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Air Marshall LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"NECFormData\": {\r\n                \"B1NEC\": 100,\r\n                \"B2IsDirectSales\": false,\r\n                \"B4FedTaxWH\": 40.55,\r\n                \"IsFATCA\": false,\r\n                \"Is2ndTINnot\": true,\r\n                \"AccountNum\": null,\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"TX\",\r\n                        \"StateWH\": 0,\r\n                        \"StateIdNum\": \"0000123456\",\r\n                        \"StateIncome\": 800\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"SC\",\r\n                        \"StateWH\": 9990,\r\n                        \"StateIdNum\": \"999999999\",\r\n                        \"StateIncome\": 80000\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099NEC/validateform",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099NEC",
								"validateform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099n\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"record1099n\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"business1099n\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipient1099n\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Air Marshall LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"NECFormData\": {\r\n                \"B1NEC\": 100,\r\n                \"B2IsDirectSales\": false,\r\n                \"B4FedTaxWH\": 40.55,\r\n                \"IsFATCA\": false,\r\n                \"Is2ndTINnot\": true,\r\n                \"AccountNum\": null,\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"TX\",\r\n                        \"StateWH\": 0,\r\n                        \"StateIdNum\": \"0000123456\",\r\n                        \"StateIncome\": 800\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"SC\",\r\n                        \"StateWH\": 9990,\r\n                        \"StateIdNum\": \"999999999\",\r\n                        \"StateIncome\": 80000\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099NEC/create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099NEC",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.Form1099Records.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"TaxYear\", responseJSON.Form1099Records.SubmissionManifest.TaxYear);\r",
									"pm.environment.set(\"payerref\", responseJSON.Form1099Records.ReturnHeader.Business.PayerRef);\r",
									"pm.environment.set(\"TIN\", responseJSON.Form1099Records.ReturnData[0].Recipient.TIN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099nec/Get?SubmissionId={{submission1099n}}&RecordIds={{record1099n}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099nec",
								"Get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099n}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099n}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": \"{{submission1099n}}\",\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": \"{{business1099n}}\",\r\n            \"BusinessNm\": \"Marshall LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{EINorSSN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": \"{{record1099n}}\",\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": \"{{recipient1099n}}\",\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{TIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"NECFormData\": {\r\n                \"B1NEC\": 1000.60,\r\n                \"B2IsDirectSales\": false,\r\n                \"B4FedTaxWH\": 400.55,\r\n                \"IsFATCA\": false,\r\n                \"Is2ndTINnot\": true,\r\n                \"AccountNum\": null,\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"TX\",\r\n                        \"StateWH\": 650,\r\n                        \"StateIdNum\": \"0000123456\",\r\n                        \"StateIncome\": 8000\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"SC\",\r\n                        \"StateWH\": 999.90,\r\n                        \"StateIdNum\": \"999999999\",\r\n                        \"StateIncome\": 9856.20\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099NEC/update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099NEC",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"\r",
									"        // Check StateReturns -> RecordStatus\r",
									"        successRecord.StateReturns.forEach((data) => {\r",
									"\r",
									"            pm.test(`StateReturns -> RecordStatus is ${data.Status}`, function () {\r",
									"\r",
									"                pm.expect(data.Status).to.be.oneOf([\"Transmitted\", \"SENT_TO_AGENCY\", \"NOTCREATED\", \"State Filing Order Received\", \"UNDER_PROCESS\", \"SENT_TO_AGENCY\", \"Created\", \"ACCEPTED\", \"REJECTED\", \"State Filing Completed\"]\r",
									"                );\r",
									"            })\r",
									"\r",
									"        });\r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099NEC/status?SubmissionId={{submission1099n}}&RecordIds={{record1099n}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099NEC",
								"status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099n}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099n}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(\"No records found\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"No records found\");\r",
									"    });\r",
									" // Additional tests for a not found response\r",
									"}else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099NEC/list?SubmissionId={{submission1099n}}&BusinessId={{business1099n}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099NEC",
								"list"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099n}}"
								},
								{
									"key": "BusinessId",
									"value": "{{business1099n}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET pdf",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Check the status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(`${responseData.Errors[0].Message}`, function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.be.oneOf([\"Invalid Submission Id\", \"Add a active webhook url\"]);\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "UserToken",
								"value": "{{usertokenSWT}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"value": "{{ipaddressSWT}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authentication",
								"value": "{{authentication}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"value": "{{ts}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host-1.7.1}}/Form1099NEC/Getpdf?SubmissionId={{submission1099n}}&RecordIds={{record1099n}}",
							"host": [
								"{{host-1.7.1}}"
							],
							"path": [
								"Form1099NEC",
								"Getpdf"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099n}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099n}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VALIDATE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"    });\r",
									"    pm.test(\"SubmissionId is invalid\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"SubmissionId is invalid\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099NEC/Validate?SubmissionId={{submission1099n}}&RecordIds={{record1099n}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099NEC",
								"Validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099n}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099n}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into a JSON object\r",
									"const responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// Check the StatusCode and perform tests accordingly\r",
									"if (pm.response.code === 200) {\r",
									"    // Check if the response contains the Form1099Records object\r",
									"\r",
									"    // Check the SuccessRecords status\r",
									"    pm.test(\"SuccessRecords -> FederalReturn status is Transmitted\", function () {\r",
									"        const successRecords = responseJson.Form1099Records.SuccessRecords;\r",
									"        pm.expect(successRecords[0].Status).to.be.oneOf([\"Transmitted\"]);\r",
									"    });\r",
									"\r",
									"    // Check the OnlineAccess status\r",
									"    pm.test(\"OnlineAccess status is ORDER_CREATED\", function () {\r",
									"        const onlineAccess = responseJson.Form1099Records.SuccessRecords[0].OnlineAccess;\r",
									"        pm.expect(onlineAccess.Status).to.be.oneOf([\"ORDER_CREATED\"]);\r",
									"    });\r",
									"\r",
									"    const postal = responseJson.Form1099Records.SuccessRecords[0].Postal;\r",
									"    pm.test(\"Postal status is ORDER_CREATED\", function () {\r",
									"\r",
									"        pm.expect(postal.Status).to.be.oneOf([\"sent\", \"SENT\",\"RECEIVED\", \"received\"]);\r",
									"    });\r",
									"\r",
									"    const stateReturns = responseJson.Form1099Records.SuccessRecords[0].StateReturns;\r",
									"    stateReturns.forEach((data, index) => {\r",
									"        // Check the StateReturns status\r",
									"        pm.test(`StateReturns${stateReturns.length > 1 ? `-${index+1}` : ` `}status is Transmitted`, function () {\r",
									"            pm.expect(data.RecordStatus).to.be.oneOf([\"Transmitted\"]);\r",
									"        })\r",
									"    });\r",
									"} else if (pm.response.code === 404) {\r",
									"    // Handle 404 status code - Not Found\r",
									"    pm.test(\"SubmissionId is invalid - 404\", function () {\r",
									"        // Add your specific tests for the 404 scenario\r",
									"        // For example: pm.expect(responseJson.errorMessage).to.equal(\"Resource not found\");\r",
									"    });\r",
									"} else if (pm.response.code === 500) {\r",
									"    // Handle 500 status code - Internal Server Error\r",
									"    pm.test(\"Internal Server Error - 500\", function () {\r",
									"        // Add your specific tests for the 500 scenario\r",
									"        // For example: pm.expect(responseJson.errorDetails).to.exist;\r",
									"    });\r",
									"} else if(pm.response.code === 400){\r",
									"    // Handle other status codes\r",
									"    pm.test(\"Submission Id is already transmitted\", function(){\r",
									"        let data=responseJson.Errors[0]\r",
									"         pm.expect(data.Message).to.be.equal( \"Submission Id is already transmitted\");\r",
									"        })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"SubmissionId\": \"{{submission1099n}}\",\r\n \"RecordIds\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099NEC/Transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099NEC",
								"Transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"\r",
									"        // Check StateReturns -> RecordStatus\r",
									"        successRecord.StateReturns.forEach((data) => {\r",
									"\r",
									"            pm.test(`StateReturns -> RecordStatus is ${data.Status}`, function () {\r",
									"\r",
									"                pm.expect(data.Status).to.be.oneOf([\"Transmitted\", \"SENT_TO_AGENCY\", \"NOTCREATED\", \"State Filing Order Received\", \"UNDER_PROCESS\", \"SENT_TO_AGENCY\", \"Created\", \"ACCEPTED\", \"REJECTED\", \"State Filing Completed\"]\r",
									"                );\r",
									"            })\r",
									"\r",
									"        });\r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099NEC/status?SubmissionId={{submission1099n}}&RecordIds={{record1099n}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099NEC",
								"status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099n}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099n}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099n\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"record1099n\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"business1099n\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipient1099n\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									"pm.environment.set(\"payerref\", responseJSON.PayerRef);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Air Marshall LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"NECFormData\": {\r\n                \"B1NEC\": 100,\r\n                \"B2IsDirectSales\": false,\r\n                \"B4FedTaxWH\": 40.55,\r\n                \"IsFATCA\": false,\r\n                \"Is2ndTINnot\": true,\r\n                \"AccountNum\": null,\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"TX\",\r\n                        \"StateWH\": 0,\r\n                        \"StateIdNum\": \"0000123456\",\r\n                        \"StateIncome\": 800\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"SC\",\r\n                        \"StateWH\": 9990,\r\n                        \"StateIdNum\": \"999999999\",\r\n                        \"StateIncome\": 80000\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099NEC/create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099NEC",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200 & Status -> DELETED \", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 404){\r",
									"    pm.test(\"Status code is 404 & SubmissionId -> invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Enter a valid Submission Id\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"Enter a valid Submission Id\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099NEC/delete?SubmissionId={{submission1099n}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099NEC",
								"delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099n}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099n}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1099 K - 1.7.3",
			"item": [
				{
					"name": "JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"\r",
									"  return encodedSource;\r",
									"};\r",
									"\r",
									"//To generate Header and Payload\r",
									"\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"\r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-50\r",
									"};\r",
									"console.log(time);\r",
									"\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"\r",
									"//Client secret ID - To generate JWS\r",
									"\r",
									"var secretID = pm.environment.get('secret');\r",
									"\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"\r",
									"console.log(jws);\r",
									"\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							},
							{
								"key": "Content-Tye",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "{{Referer}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ValidateForm",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Air Marshall LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n \"ReturnData\": [\r\n   {\r\n     \"RecordId\": null,\r\n     \"SequenceId\": \"01\",\r\n     \"Recipient\": {\r\n       \"RecipientId\": null,\r\n       \"TINType\": \"SSN\",\r\n       \"TIN\": \"{{randomNumer_SSN}}\",\r\n        \"FirstPayeeNm\": \"{{$randomFirstName}}\",\r\n        \"SecondPayeeNm\": \"{{$randomLastName}}\",\r\n       \"isForeign\": false,\r\n       \"USAddress\": {\r\n         \"Address1\": \"{{$randomStreetName}}\",\r\n        \"Address2\": \"{{$randomStreetAddress}}\",\r\n        \"City\": \"{{$randomCity}}\",\r\n         \"State\": \"AL\",\r\n         \"ZipCd\": \"36303\"\r\n       },\r\n       \"ForeignAddress\": {\r\n         \"Address1\": \"{{$randomStreetName}}\",\r\n        \"Address2\": \"{{$randomStreetAddress}}\",\r\n        \"City\": \"{{$randomCity}}\",\r\n        \"ProvinceOrStateNm\": \"{{$randomCity}}\",\r\n        \"Country\": \"{{$randomCountry}}\",\r\n         \"PostalCd\": \"T3V\"\r\n       },\r\n       \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n       \"Fax\": \"4567890471\",\r\n       \"Phone\": \"4516781901\"\r\n     },\r\n     \"KFormData\": {\r\n       \"B1aGrossAmt\": 7500.28,\r\n       \"B1bCardNotPresentTxns\": 8000.26,\r\n       \"B2MerchantCd\": \"0742\",\r\n       \"B3NumPymtTxns\": 20,\r\n       \"B4FedTaxWH\": 723,\r\n       \"B5aJan\": 500,\r\n       \"B5bFeb\": 558,\r\n       \"B5cMar\": 442.12,\r\n       \"B5dApr\": 500,\r\n       \"B5eMay\": 600,\r\n       \"B5fJun\": 400.06,\r\n       \"B5gJul\": 500,\r\n       \"B5hAug\": 554.04,\r\n       \"B5iSep\": 446,\r\n       \"B5jOct\": 500.06,\r\n       \"B5kNov\": 500,\r\n       \"B5lDec\": 500,\r\n       \"AccountNum\": \"5878986828\",\r\n       \"Is2ndTINnot\": true,\r\n       \"FilerIndicator\": \"EPF\",\r\n       \"PSEDetails\": {\r\n         \"PSEName\": \"ABC Corp\",\r\n         \"PSEPhone\": \"2134561565\"\r\n       },\r\n       \"IndicateTxnsReported\": \"PAYMENT_CARD\",\r\n       \"States\": [\r\n         {\r\n           \"StateCd\": \"PA\",\r\n           \"StateIdNum\": \"99999999\",\r\n           \"StateWH\": 25.72\r\n         },\r\n         {\r\n           \"StateCd\": \"WV\",\r\n           \"StateIdNum\": \"99999999\",\r\n           \"StateWH\": 35.95\r\n         }\r\n       ]\r\n     }\r\n   }\r\n ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099K/ValidateForm",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099K",
								"ValidateForm"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099K\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"record1099K\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"business1099K\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipient1099K\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Air Marshall LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"SSN\",\r\n                \"TIN\": \"{{randomNumer_SSN}}\",\r\n                \"FirstPayeeNm\": \"{{$randomFirstName}}\",\r\n                \"SecondPayeeNm\": \"{{$randomLastName}}\",\r\n                \"isForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"{{$randomStreetName}}\",\r\n                    \"Address2\": \"{{$randomStreetAddress}}\",\r\n                    \"City\": \"{{$randomCity}}\",\r\n                    \"State\": \"AL\",\r\n                    \"ZipCd\": \"36303\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"{{$randomStreetName}}\",\r\n                    \"Address2\": \"{{$randomStreetAddress}}\",\r\n                    \"City\": \"{{$randomCity}}\",\r\n                    \"ProvinceOrStateNm\": \"{{$randomCity}}\",\r\n                    \"Country\": \"{{$randomCountry}}\",\r\n                    \"PostalCd\": \"T3V\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"4567890471\",\r\n                \"Phone\": \"4516781901\"\r\n            },\r\n            \"KFormData\": {\r\n                \"B1aGrossAmt\": 7500.28,\r\n                \"B1bCardNotPresentTxns\": 8000.26,\r\n                \"B2MerchantCd\": \"0742\",\r\n                \"B3NumPymtTxns\": 20,\r\n                \"B4FedTaxWH\": 723,\r\n                \"B5aJan\": 500,\r\n                \"B5bFeb\": 558,\r\n                \"B5cMar\": 442.12,\r\n                \"B5dApr\": 500,\r\n                \"B5eMay\": 600,\r\n                \"B5fJun\": 400.06,\r\n                \"B5gJul\": 500,\r\n                \"B5hAug\": 554.04,\r\n                \"B5iSep\": 446,\r\n                \"B5jOct\": 500.06,\r\n                \"B5kNov\": 500,\r\n                \"B5lDec\": 500,\r\n                \"AccountNum\": \"5878986828\",\r\n                \"Is2ndTINnot\": true,\r\n                \"FilerIndicator\": \"EPF\",\r\n                \"PSEDetails\": {\r\n                    \"PSEName\": \"ABC Corp\",\r\n                    \"PSEPhone\": \"2134561565\"\r\n                },\r\n                \"IndicateTxnsReported\": \"PAYMENT_CARD\",\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"PA\",\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateWH\": 25.72\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"WV\",\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateWH\": 35.95\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099K/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099K",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.Form1099Records.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"TaxYear\", responseJSON.Form1099Records.SubmissionManifest.TaxYear);\r",
									"pm.environment.set(\"payerref\", responseJSON.Form1099Records.ReturnHeader.Business.PayerRef);\r",
									"pm.environment.set(\"TIN\", responseJSON.Form1099Records.ReturnData[0].Recipient.TIN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099K/get?SubmissionId={{submission1099K}}&RecordId={{record1099K}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099K",
								"get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099K}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099K}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": \"{{submission1099K}}\",\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": \"{{business1099K}}\",\r\n            \"BusinessNm\": \"Marshall LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{EINorSSN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": \"{{record1099K}}\",\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": \"{{recipient1099K}}\",\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{TIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d+{{i}}@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"KFormData\": {\r\n                \"B1aGrossAmt\": 7500.28,\r\n                \"B1bCardNotPresentTxns\": 8000.26,\r\n                \"B2MerchantCd\": \"0742\",\r\n                \"B3NumPymtTxns\": 20,\r\n                \"B4FedTaxWH\": 723,\r\n                \"B5aJan\": 500,\r\n                \"B5bFeb\": 558,\r\n                \"B5cMar\": 442.12,\r\n                \"B5dApr\": 500,\r\n                \"B5eMay\": 600,\r\n                \"B5fJun\": 400.06,\r\n                \"B5gJul\": 500,\r\n                \"B5hAug\": 554.04,\r\n                \"B5iSep\": 446,\r\n                \"B5jOct\": 500.06,\r\n                \"B5kNov\": 500,\r\n                \"B5lDec\": 500,\r\n                \"AccountNum\": \"5878986828\",\r\n                \"Is2ndTINnot\": true,\r\n                \"FilerIndicator\": \"EPF\",\r\n                \"PSEDetails\": {\r\n                    \"PSEName\": \"ABC Corp\",\r\n                    \"PSEPhone\": \"2134561565\"\r\n                },\r\n                \"IndicateTxnsReported\": \"PAYMENT_CARD\",\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"PA\",\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateWH\": 25.72\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"WV\",\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateWH\": 35.95\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099K/update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099K",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"CREATED\",\"REJECTED\", \"Under Process\", \"Sent To Agency\", \"TRANSMITTED\"])\r",
									"        })\r",
									"\r",
									"        // Check StateReturns -> RecordStatus\r",
									"        successRecord.StateReturns.forEach((data) => {\r",
									"\r",
									"            pm.test(`StateReturns -> RecordStatus -> ${data.Status}`, function () {\r",
									"\r",
									"                pm.expect(data.Status).to.be.oneOf([\"Transmitted\", \"SENT_TO_AGENCY\", \"NOTCREATED\", \"State Filing Order Received\", \"UNDER_PROCESS\", \"SENT_TO_AGENCY\", \"Created\", \"ACCEPTED\", \"REJECTED\", \"State Filing Completed\"]\r",
									"                );\r",
									"            })\r",
									"\r",
									"        });\r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status -> ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status -> ${successRecord.PostalResponse.Status}`, function () {\r",
									"            pm.expect(successRecord.PostalResponse.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099K/status?SubmissionId={{submission1099K}}&RecordId={{record1099K}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099K",
								"status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099K}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099K}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(\"No records found\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"No records found\");\r",
									"    });\r",
									" // Additional tests for a not found response\r",
									"}else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099K/GET?SubmissionId={{submission1099K}}&RecordId={{record1099K}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099K",
								"GET"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099K}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099K}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Check the status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(`${responseData.Errors[0].Message}`, function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.be.oneOf([\"Invalid Submission Id\", \"Add a active webhook url\"]);\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099K/getpdf?SubmissionId={{submission1099K}}&RecordId={{record1099K}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099K",
								"getpdf"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099K}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099K}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"    });\r",
									"    pm.test(\"SubmissionId is invalid\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"SubmissionId is invalid\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099K/validate?SubmissionId={{submission1099K}}&RecordId={{record1099K}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099K",
								"validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099K}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099K}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into a JSON object\r",
									"const responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// Check the StatusCode and perform tests accordingly\r",
									"if (pm.response.code === 200) {\r",
									"    // Check if the response contains the Form1099Records object\r",
									"\r",
									"    // Check the SuccessRecords status\r",
									"    pm.test(\"SuccessRecords status is valid\", function () {\r",
									"        const successRecords = responseJson.Form1099Records.SuccessRecords;\r",
									"        pm.expect(successRecords[0].Status).to.be.oneOf([\"Transmitted\"]);\r",
									"    });\r",
									"\r",
									"    // Check the OnlineAccess status\r",
									"    pm.test(\"OnlineAccess status is valid\", function () {\r",
									"        const onlineAccess = responseJson.Form1099Records.SuccessRecords[0].OnlineAccess;\r",
									"        pm.expect(onlineAccess.Status).to.be.oneOf([\"ORDER_CREATED\"]);\r",
									"    });\r",
									"\r",
									"    const postal = responseJson.Form1099Records.SuccessRecords[0].Postal;\r",
									"    pm.test(\"Postal status is ORDER_CREATED\", function () {\r",
									"\r",
									"        pm.expect(postal.Status).to.be.oneOf([\"sent\", \"SENT\",\"RECEIVED\", \"received\"]);\r",
									"    });\r",
									"\r",
									"    const stateReturns = responseJson.Form1099Records.SuccessRecords[0].StateReturns;\r",
									"    stateReturns.forEach((data, index) => {\r",
									"        // Check the StateReturns status\r",
									"        pm.test(`StateReturns${stateReturns.length > 1 ? `-${index+1}` : ` `}status is Transmitted`, function () {\r",
									"            pm.expect(data.RecordStatus).to.be.oneOf([\"Transmitted\"]);\r",
									"        })\r",
									"    });\r",
									"} else if (pm.response.code === 404) {\r",
									"    // Handle 404 status code - Not Found\r",
									"    pm.test(\"Resource not found - 404\", function () {\r",
									"        // Add your specific tests for the 404 scenario\r",
									"        // For example: pm.expect(responseJson.errorMessage).to.equal(\"Resource not found\");\r",
									"    });\r",
									"} else if (pm.response.code === 500) {\r",
									"    // Handle 500 status code - Internal Server Error\r",
									"    pm.test(\"Internal Server Error - 500\", function () {\r",
									"        // Add your specific tests for the 500 scenario\r",
									"        // For example: pm.expect(responseJson.errorDetails).to.exist;\r",
									"    });\r",
									"} else if(pm.response.code === 400){\r",
									"    // Handle other status codes\r",
									"    pm.test(\"Submission Id is already transmitted\", function(){\r",
									"        let data=responseJson.Errors[0]\r",
									"         pm.expect(data.Message).to.be.equal( \"Submission Id is already transmitted\");\r",
									"        })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"SubmissionId\": \"{{submission1099K}}\",\r\n \"RecordIds\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099K/Transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099K",
								"Transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"CREATED\",\"REJECTED\", \"Under Process\", \"Sent To Agency\", \"TRANSMITTED\"])\r",
									"        })\r",
									"\r",
									"        // Check StateReturns -> RecordStatus\r",
									"        successRecord.StateReturns.forEach((data) => {\r",
									"\r",
									"            pm.test(`StateReturns -> RecordStatus -> ${data.Status}`, function () {\r",
									"\r",
									"                pm.expect(data.Status).to.be.oneOf([\"Transmitted\", \"SENT_TO_AGENCY\", \"NOTCREATED\", \"State Filing Order Received\", \"UNDER_PROCESS\", \"SENT_TO_AGENCY\", \"Created\", \"ACCEPTED\", \"REJECTED\", \"State Filing Completed\"]\r",
									"                );\r",
									"            })\r",
									"\r",
									"        });\r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status -> ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status -> ${successRecord.PostalResponse.Status}`, function () {\r",
									"            pm.expect(successRecord.PostalResponse.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099K/status?SubmissionId={{submission1099K}}&RecordId={{record1099K}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099K",
								"status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099K}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099K}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099K\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"record1099K\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"business1099K\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipient1099K\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Air Marshall LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n \"ReturnData\": [\r\n   {\r\n     \"RecordId\": null,\r\n     \"SequenceId\": \"01\",\r\n     \"Recipient\": {\r\n       \"RecipientId\": null,\r\n       \"TINType\": \"SSN\",\r\n       \"TIN\": \"{{randomNumer_SSN}}\",\r\n        \"FirstPayeeNm\": \"{{$randomFirstName}}\",\r\n        \"SecondPayeeNm\": \"{{$randomLastName}}\",\r\n       \"isForeign\": false,\r\n       \"USAddress\": {\r\n         \"Address1\": \"{{$randomStreetName}}\",\r\n        \"Address2\": \"{{$randomStreetAddress}}\",\r\n        \"City\": \"{{$randomCity}}\",\r\n         \"State\": \"AL\",\r\n         \"ZipCd\": \"36303\"\r\n       },\r\n       \"ForeignAddress\": {\r\n         \"Address1\": \"{{$randomStreetName}}\",\r\n        \"Address2\": \"{{$randomStreetAddress}}\",\r\n        \"City\": \"{{$randomCity}}\",\r\n        \"ProvinceOrStateNm\": \"{{$randomCity}}\",\r\n        \"Country\": \"{{$randomCountry}}\",\r\n         \"PostalCd\": \"T3V\"\r\n       },\r\n       \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n       \"Fax\": \"4567890471\",\r\n       \"Phone\": \"4516781901\"\r\n     },\r\n     \"KFormData\": {\r\n       \"B1aGrossAmt\": 7500.28,\r\n       \"B1bCardNotPresentTxns\": 8000.26,\r\n       \"B2MerchantCd\": \"0742\",\r\n       \"B3NumPymtTxns\": 20,\r\n       \"B4FedTaxWH\": 723,\r\n       \"B5aJan\": 500,\r\n       \"B5bFeb\": 558,\r\n       \"B5cMar\": 442.12,\r\n       \"B5dApr\": 500,\r\n       \"B5eMay\": 600,\r\n       \"B5fJun\": 400.06,\r\n       \"B5gJul\": 500,\r\n       \"B5hAug\": 554.04,\r\n       \"B5iSep\": 446,\r\n       \"B5jOct\": 500.06,\r\n       \"B5kNov\": 500,\r\n       \"B5lDec\": 500,\r\n       \"AccountNum\": \"5878986828\",\r\n       \"Is2ndTINnot\": true,\r\n       \"FilerIndicator\": \"EPF\",\r\n       \"PSEDetails\": {\r\n         \"PSEName\": \"ABC Corp\",\r\n         \"PSEPhone\": \"2134561565\"\r\n       },\r\n       \"IndicateTxnsReported\": \"PAYMENT_CARD\",\r\n       \"States\": [\r\n         {\r\n           \"StateCd\": \"PA\",\r\n           \"StateIdNum\": \"99999999\",\r\n           \"StateWH\": 25.72\r\n         },\r\n         {\r\n           \"StateCd\": \"WV\",\r\n           \"StateIdNum\": \"99999999\",\r\n           \"StateWH\": 35.95\r\n         }\r\n       ]\r\n     }\r\n   }\r\n ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099K/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099K",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200 & Status -> DELETED \", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 404){\r",
									"    pm.test(\"Status code is 404 & SubmissionId -> invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Enter a valid Submission Id\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"Enter a valid Submission Id\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099K/delete?SubmissionId={{submission1099K}}&RecordId={{record1099K}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099K",
								"delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099K}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099K}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1099 R - 1.7.3",
			"item": [
				{
					"name": "JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"\r",
									"  return encodedSource;\r",
									"};\r",
									"\r",
									"//To generate Header and Payload\r",
									"\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"\r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-50\r",
									"};\r",
									"console.log(time);\r",
									"\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"\r",
									"//Client secret ID - To generate JWS\r",
									"\r",
									"var secretID = pm.environment.get('secret');\r",
									"\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"\r",
									"console.log(jws);\r",
									"\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							},
							{
								"key": "Content-Tye",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "{{Referer}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validateform",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": true,\r\n        \"ScheduleFiling\": {\r\n            \"EfileDate\": \"12/31/2023\"\r\n        }\r\n    },\r\n    \"ReturnHeader\": \r\n    {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"PayerRef\": null,\r\n            \"BusinessNm\": \"Edilo LLC\",\r\n            \"TradeNm\": \"Edilo Corporate Services\",\r\n            \"IsEIN\": false,\r\n            \"EINorSSN\": \"241964128\",\r\n            \"Email\": \"brianscott@gmail.com\",\r\n            \"ContactNm\": \"Brian O Relly\",\r\n            \"Phone\": \"1234567890\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": null,\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": null,\r\n                \"Phone\": null,\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FEDERALGOVT\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"15 Park Avenue\",\r\n                \"Address2\": \"Louis St\",\r\n                \"City\": \"Seattle\",\r\n                \"State\": \"CA\",\r\n                \"ZipCd\": \"90255\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"15 Park Avenue\",\r\n                \"Address2\": \"Louis St\",\r\n                \"City\": \"Seattle\",\r\n                \"ProvinceOrStateNm\": null,\r\n                \"Country\": null,\r\n                \"PostalCd\": null\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"SequenceId\": \"001\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"ssn\",\r\n                \"TIN\": \"391114511\",\r\n                \"FirstPayeeNm\": \"Mark\",\r\n                \"SecondPayeeNm\": \"Davis\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"1751 Kinsey Rd\",\r\n                    \"Address2\": \"Main St\",\r\n                    \"City\": \"Dothan\",\r\n                    \"State\": \"ME\",\r\n                    \"ZipCd\": \"04401\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"15 Park Avenue\",\r\n                    \"Address2\": \"Louis St\",\r\n                    \"City\": \"Seattle\",\r\n                    \"ProvinceOrStateNm\": null,\r\n                    \"Country\": null,\r\n                    \"PostalCd\": null\r\n                },\r\n                \"Email\": \"pradeep.g+681e@spantechnologyservices.com\",\r\n                \"Fax\": \"1234567890\",\r\n                \"Phone\": \"1234567890\"\r\n            },\r\n            \"RFormData\": {\r\n                \"B1GrossDistribution\": 7000,\r\n                \"B2aTaxableAmt\": 0,\r\n                \"B2bIsTaxableAmtNotDetermined\": true,\r\n                \"B2bIsTotalDistribution\": false,\r\n                \"B3CapitalGain\": 880,\r\n                \"B4FedTaxWH\": 990,\r\n                \"B5EmpContribution\": 0,\r\n                \"B6NUA\": 0,\r\n                \"B7DistCodes\": \"1\",\r\n                \"B7IsSIRASEPSIMPLE\": false,\r\n                \"B8Other\": 80,\r\n                \"B8OtherPercentage\": 99,\r\n                \"B9aTotDistPercentage\": 99,\r\n                \"B9bTotEmpContribution\": 0,\r\n                \"B10AmtToIRR5Years\": 0,\r\n                \"B11DesigRoth1stYear\": 1901,\r\n                \"B12IsFATCAFiling\": false,\r\n                \"B13DateOfPayment\": \"12/3/2020\",\r\n                \"AccountNum\": \"7895\",\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"CA\",\r\n                        \"StateWH\": 15.56,\r\n                        \"StateDistribution\": 100,\r\n                        \"StateIdNum\": \"999-9999-9\",\r\n                        \"LocalDistribution\": 300.23,\r\n                        \"LocalTax\": 100.45,\r\n                        \"LocalityNm\": \"Pristine\"\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"ME\",\r\n                        \"StateWH\": 17.45,\r\n                        \"StateDistribution\": 100,\r\n                        \"StateIdNum\": \"99-9999999AA\",\r\n                        \"LocalDistribution\": 300.23,\r\n                        \"LocalTax\": 100.45,\r\n                        \"LocalityNm\": \"Pristine\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099R/Validateform",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099R",
								"Validateform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"Submission1099R\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"Business1099R\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"Record1099R\",responseJSON.Form1099Records.SuccessRecords[0].RecordId)\r",
									"pm.environment.set(\"Recipient1099R\",responseJSON.Form1099Records.SuccessRecords[0].RecipientId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"GREGOTRON LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"RFormData\": {\r\n                \"B1GrossDistribution\": 7000,\r\n                \"B2aTaxableAmt\": 0,\r\n                \"B2bIsTaxableAmtNotDetermined\": true,\r\n                \"B2bIsTotalDistribution\": false,\r\n                \"B3CapitalGain\": 880,\r\n                \"B4FedTaxWH\": 990,\r\n                \"B5EmpContribution\": 0,\r\n                \"B6NUA\": 0,\r\n                \"B7DistCodes\": \"1\",\r\n                \"B7IsSIRASEPSIMPLE\": false,\r\n                \"B8Other\": 80,\r\n                \"B8OtherPercentage\": 99,\r\n                \"B9aTotDistPercentage\": 99,\r\n                \"B9bTotEmpContribution\": 0,\r\n                \"B10AmtToIRR5Years\": 0,\r\n                \"B11DesigRoth1stYear\": 1901,\r\n                \"B12IsFATCAFiling\": false,\r\n                \"B13DateOfPayment\": \"12/3/2020\",\r\n                \"AccountNum\": \"7895\",\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"PA\",\r\n                        \"StateWH\": 15.56,\r\n                        \"StateDistribution\": 100,\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"LocalDistribution\": 300.23,\r\n                        \"LocalTax\": 100.45,\r\n                        \"LocalityNm\": \"Pristine\"\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"AZ\",\r\n                        \"StateWH\": 17.45,\r\n                        \"StateDistribution\": 100,\r\n                        \"StateIdNum\": \"99-9999999\",\r\n                        \"LocalDistribution\": 300.23,\r\n                        \"LocalTax\": 100.45,\r\n                        \"LocalityNm\": \"Pristine\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099R/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099R",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.Form1099Records.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"TaxYear\", responseJSON.Form1099Records.SubmissionManifest.TaxYear);\r",
									"pm.environment.set(\"payerref\", responseJSON.Form1099Records.ReturnHeader.Business.PayerRef);\r",
									"pm.environment.set(\"TIN\", responseJSON.Form1099Records.ReturnData[0].Recipient.TIN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099R/get?SubmissionId={{Submission1099R}}&RecordIds={{Record1099R}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099R",
								"get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{Submission1099R}}"
								},
								{
									"key": "RecordIds",
									"value": "{{Record1099R}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"SubmissionId_1099R\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"BusinessId_1099R\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"RecordId_1099R\",responseJSON.Form1099Records.SuccessRecords[0].RecordId)\r",
									"pm.environment.set(\"RecipientId_1099R\",responseJSON.Form1099Records.SuccessRecords[0].RecipientId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": \"{{Submission1099R}}\",\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": \"{{Business1099R}}\",\r\n            \"BusinessNm\": \"Marshall LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{EINorSSN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": \"{{Record1099R}}\",\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": \"{{Recipient1099R}}\",\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{TIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"RFormData\": {\r\n                \"B1GrossDistribution\": 0,\r\n                \"B2aTaxableAmt\": 0,\r\n                \"B2bIsTaxableAmtNotDetermined\": true,\r\n                \"B2bIsTotalDistribution\": false,\r\n                \"B3CapitalGain\": 0,\r\n                \"B4FedTaxWH\": 9900.12,\r\n                \"B5EmpContribution\": 0,\r\n                \"B6NUA\": 180000.64,\r\n                \"B7DistCodes\": \"3D\",\r\n                \"B7IsSIRASEPSIMPLE\": true,\r\n                \"B8Other\": 80000000.23,\r\n                \"B8OtherPercentage\": 99,\r\n                \"B9aTotDistPercentage\": 99,\r\n                \"B9bTotEmpContribution\": 1200000000.10,\r\n                \"B10AmtToIRR5Years\": 1100000000.24,\r\n                \"B11DesigRoth1stYear\": 1901,\r\n                \"B12IsFATCAFiling\": false,\r\n                \"B13DateOfPayment\": \"12/3/2020\",\r\n                \"AccountNum\": \"7895\",\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"PA\",\r\n                        \"StateWH\": 1520046128.56,\r\n                        \"StateDistribution\": 1800014261.34,\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"LocalDistribution\": 3000000001.23,\r\n                        \"LocalTax\": 100412752.45,\r\n                        \"LocalityNm\": \"Pristine\"\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"AZ\",\r\n                        \"StateWH\": 171864100.45,\r\n                        \"StateDistribution\": 2428126412.36,\r\n                        \"StateIdNum\": \"99-9999999\",\r\n                        \"LocalDistribution\": 3000000001.23,\r\n                        \"LocalTax\": 100412752.45,\r\n                        \"LocalityNm\": \"Pristine\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099R/Update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099R",
								"Update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"    });\r",
									"    pm.test(\"SubmissionId is invalid\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"SubmissionId is invalid\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099R/Validate?SubmissionId={{SubmissionId_1099R}}&RecordIds={{RecordId_1099R}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099R",
								"Validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SubmissionId_1099R}}"
								},
								{
									"key": "RecordIds",
									"value": "{{RecordId_1099R}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(\"No records found\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"No records found\");\r",
									"    });\r",
									" // Additional tests for a not found response\r",
									"}else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099R/list?SubmissionId={{Submission1099R}}&BusinessId={{Business1099R}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099R",
								"list"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{Submission1099R}}"
								},
								{
									"key": "BusinessId",
									"value": "{{Business1099R}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"\r",
									"        // Check StateReturns -> RecordStatus\r",
									"        successRecord.StateReturns.forEach((data) => {\r",
									"\r",
									"            pm.test(`StateReturns -> RecordStatus is ${data.Status}`, function () {\r",
									"\r",
									"                pm.expect(data.Status).to.be.oneOf([\"Transmitted\", \"SENT_TO_AGENCY\", \"NOTCREATED\", \"State Filing Order Received\", \"UNDER_PROCESS\", \"SENT_TO_AGENCY\", \"Created\", \"ACCEPTED\", \"REJECTED\", \"CREATED\", \"State Filing Completed\"]\r",
									"                );\r",
									"            })\r",
									"\r",
									"        });\r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099R/Status?SubmissionId={{Submission1099R}}&RecordIds={{Record1099R}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099R",
								"Status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{Submission1099R}}"
								},
								{
									"key": "RecordIds",
									"value": "{{Record1099R}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Check the status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(`${responseData.Errors[0].Message}`, function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.be.oneOf([\"Invalid Submission Id\", \"Add a active webhook url\"]);\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099R/getPdf?SubmissionId={{Submission1099R}}&RecordIds={{Record1099R}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099R",
								"getPdf"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{Submission1099R}}"
								},
								{
									"key": "RecordIds",
									"value": "{{Record1099R}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into a JSON object\r",
									"const responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// Check the StatusCode and perform tests accordingly\r",
									"if (pm.response.code === 200) {\r",
									"    // Check if the response contains the Form1099Records object\r",
									"\r",
									"    // Check the SuccessRecords status\r",
									"    pm.test(\"SuccessRecords -> FederalReturn status is Transmitted\", function () {\r",
									"        const successRecords = responseJson.Form1099Records.SuccessRecords;\r",
									"        pm.expect(successRecords[0].Status).to.be.oneOf([\"Transmitted\"]);\r",
									"    });\r",
									"\r",
									"    // Check the OnlineAccess status\r",
									"    pm.test(\"OnlineAccess status is ORDER_CREATED\", function () {\r",
									"        const onlineAccess = responseJson.Form1099Records.SuccessRecords[0].OnlineAccess;\r",
									"        pm.expect(onlineAccess.Status).to.be.oneOf([\"ORDER_CREATED\"]);\r",
									"    });\r",
									"\r",
									"    const postal = responseJson.Form1099Records.SuccessRecords[0].Postal;\r",
									"    pm.test(\"Postal status is ORDER_CREATED\", function () {\r",
									"\r",
									"        pm.expect(postal.Status).to.be.oneOf([\"sent\", \"SENT\",\"RECEIVED\", \"received\"]);\r",
									"    });\r",
									"\r",
									"    const stateReturns = responseJson.Form1099Records.SuccessRecords[0].StateReturns;\r",
									"    stateReturns.forEach((data, index) => {\r",
									"        // Check the StateReturns status\r",
									"        pm.test(`StateReturns${stateReturns.length > 1 ? `-${index+1}` : ` `}status is Transmitted`, function () {\r",
									"            pm.expect(data.RecordStatus).to.be.oneOf([\"Transmitted\"]);\r",
									"        })\r",
									"    });\r",
									"} else if (pm.response.code === 404) {\r",
									"    // Handle 404 status code - Not Found\r",
									"    pm.test(\"Resource not found - 404\", function () {\r",
									"        // Add your specific tests for the 404 scenario\r",
									"        // For example: pm.expect(responseJson.errorMessage).to.equal(\"Resource not found\");\r",
									"    });\r",
									"} else if (pm.response.code === 500) {\r",
									"    // Handle 500 status code - Internal Server Error\r",
									"    pm.test(\"Internal Server Error - 500\", function () {\r",
									"        // Add your specific tests for the 500 scenario\r",
									"        // For example: pm.expect(responseJson.errorDetails).to.exist;\r",
									"    });\r",
									"} else if(pm.response.code === 400){\r",
									"    // Handle other status codes\r",
									"    pm.test(\"Submission Id is already transmitted\", function(){\r",
									"        let data=responseJson.Errors[0]\r",
									"         pm.expect(data.Message).to.be.equal( \"Submission Id is already transmitted\");\r",
									"        })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"SubmissionId\": \"{{Submission1099R}}\",\r\n  \"RecordIds\": [\r\n    \"{{Record1099R}}\"\r\n  ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{host-1.7.3}}/form1099R/Transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099R",
								"Transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"\r",
									"        // Check StateReturns -> RecordStatus\r",
									"        successRecord.StateReturns.forEach((data) => {\r",
									"\r",
									"            pm.test(`StateReturns -> RecordStatus is ${data.Status}`, function () {\r",
									"\r",
									"                pm.expect(data.Status).to.be.oneOf([\"Transmitted\", \"SENT_TO_AGENCY\", \"NOTCREATED\", \"State Filing Order Received\", \"UNDER_PROCESS\", \"SENT_TO_AGENCY\", \"Created\", \"ACCEPTED\", \"REJECTED\", \"CREATED\", \"State Filing Completed\"]\r",
									"                );\r",
									"            })\r",
									"\r",
									"        });\r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099R/Status?SubmissionId={{Submission1099R}}&RecordIds={{Record1099R}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099R",
								"Status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{Submission1099R}}"
								},
								{
									"key": "RecordIds",
									"value": "{{Record1099R}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"Submission1099R\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"Business1099R\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"Record1099R\",responseJSON.Form1099Records.SuccessRecords[0].RecordId)\r",
									"pm.environment.set(\"Recipient1099R\",responseJSON.Form1099Records.SuccessRecords[0].RecipientId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"FEYRIO LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"RFormData\": {\r\n                \"B1GrossDistribution\": 7000,\r\n                \"B2aTaxableAmt\": 0,\r\n                \"B2bIsTaxableAmtNotDetermined\": true,\r\n                \"B2bIsTotalDistribution\": false,\r\n                \"B3CapitalGain\": 880,\r\n                \"B4FedTaxWH\": 990,\r\n                \"B5EmpContribution\": 0,\r\n                \"B6NUA\": 0,\r\n                \"B7DistCodes\": \"1\",\r\n                \"B7IsSIRASEPSIMPLE\": false,\r\n                \"B8Other\": 80,\r\n                \"B8OtherPercentage\": 99,\r\n                \"B9aTotDistPercentage\": 99,\r\n                \"B9bTotEmpContribution\": 0,\r\n                \"B10AmtToIRR5Years\": 0,\r\n                \"B11DesigRoth1stYear\": 1901,\r\n                \"B12IsFATCAFiling\": false,\r\n                \"B13DateOfPayment\": \"12/3/2020\",\r\n                \"AccountNum\": \"7895\",\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"PA\",\r\n                        \"StateWH\": 15.56,\r\n                        \"StateDistribution\": 100,\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"LocalDistribution\": 300.23,\r\n                        \"LocalTax\": 100.45,\r\n                        \"LocalityNm\": \"Pristine\"\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"AZ\",\r\n                        \"StateWH\": 17.45,\r\n                        \"StateDistribution\": 100,\r\n                        \"StateIdNum\": \"99-9999999\",\r\n                        \"LocalDistribution\": 300.23,\r\n                        \"LocalTax\": 100.45,\r\n                        \"LocalityNm\": \"Pristine\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099R/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099R",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200 & Status -> DELETED \", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 404){\r",
									"    pm.test(\"Status code is 404 & SubmissionId -> invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Enter a valid Submission Id\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"Enter a valid Submission Id\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099R/delete?RecordIds={{Record1099R}}&SubmissionId={{Submission1099R}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099R",
								"delete"
							],
							"query": [
								{
									"key": "RecordIds",
									"value": "{{Record1099R}}"
								},
								{
									"key": "SubmissionId",
									"value": "{{Submission1099R}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1099 MISC - 1.7.3",
			"item": [
				{
					"name": "JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"\r",
									"  return encodedSource;\r",
									"};\r",
									"\r",
									"//To generate Header and Payload\r",
									"\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"\r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-50\r",
									"};\r",
									"console.log(time);\r",
									"\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"\r",
									"//Client secret ID - To generate JWS\r",
									"\r",
									"var secretID = pm.environment.get('secret');\r",
									"\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"\r",
									"console.log(jws);\r",
									"\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							},
							{
								"key": "Content-Tye",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "{{Referer}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"MELFOR SOLUTIONS - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"MISCFormData\": {\r\n                \"B1Rents\": 1200.54,\r\n                \"B2Royalties\": 7000.27,\r\n                \"B3OtherIncome\": 1000.86,\r\n                \"B4FedIncomeTaxWH\": 30.23,\r\n                \"B5FishingBoatProceeds\": 0,\r\n                \"B6MedHealthcarePymts\": 0,\r\n                \"B7IsDirectSale\": false,\r\n                \"B8SubstitutePymts\": 0,\r\n                \"B9CropInsurance\": 0,\r\n                \"B10GrossProceeds\": 0,\r\n                \"B11FishPurForResale\": 0,\r\n                \"B12Sec409ADeferrals\": 0,\r\n                \"B13IsFATCA\": true,\r\n                \"B14EPP\": 52.63,\r\n                \"B15NonQualDefComp\": 12.78,\r\n                \"AccountNum\": \"587879879879\",\r\n                \"Is2ndTINnot\": true,\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"PA\",\r\n                        \"StateWH\": 15.56,\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateIncome\": 16.36\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"AZ\",\r\n                        \"StateWH\": 17.45,\r\n                        \"StateIdNum\": \"99-9999999\",\r\n                        \"StateIncome\": 18.78\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099MISC/validateform",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099MISC",
								"validateform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"var responseJSON;\r",
									"responseJSON = JSON.parse(responseBody);\r",
									"pm.environment.set(\"Business1099m\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"Submission1099m\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"Record1099m\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"Recipient1099m\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"MELFOR SOLUTIONS - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"MISCFormData\": {\r\n                \"B1Rents\": 1200.54,\r\n                \"B2Royalties\": 7000.27,\r\n                \"B3OtherIncome\": 1000.86,\r\n                \"B4FedIncomeTaxWH\": 30.23,\r\n                \"B5FishingBoatProceeds\": 0,\r\n                \"B6MedHealthcarePymts\": 0,\r\n                \"B7IsDirectSale\": false,\r\n                \"B8SubstitutePymts\": 0,\r\n                \"B9CropInsurance\": 0,\r\n                \"B10GrossProceeds\": 0,\r\n                \"B11FishPurForResale\": 0,\r\n                \"B12Sec409ADeferrals\": 0,\r\n                \"B13IsFATCA\": true,\r\n                \"B14EPP\": 52.63,\r\n                \"B15NonQualDefComp\": 12.78,\r\n                \"AccountNum\": \"587879879879\",\r\n                \"Is2ndTINnot\": true,\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"PA\",\r\n                        \"StateWH\": 15.56,\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateIncome\": 16.36\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"AZ\",\r\n                        \"StateWH\": 17.45,\r\n                        \"StateIdNum\": \"99-9999999\",\r\n                        \"StateIncome\": 18.78\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099MISC/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099MISC",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.Form1099Records.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"TaxYear\", responseJSON.Form1099Records.SubmissionManifest.TaxYear);\r",
									"pm.environment.set(\"payerref\", responseJSON.Form1099Records.ReturnHeader.Business.PayerRef);\r",
									"pm.environment.set(\"TIN\", responseJSON.Form1099Records.ReturnData[0].Recipient.TIN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Misc/Get?SubmissionId={{Submission1099m}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Misc",
								"Get"
							],
							"query": [
								{
									"key": "RecordIds",
									"value": "{{RecordId_MISC}}",
									"disabled": true
								},
								{
									"key": "SubmissionId",
									"value": "{{Submission1099m}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"var responseJSON;\r",
									"responseJSON = JSON.parse(responseBody);\r",
									"pm.environment.set(\"Business1099m\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"Submission1099m\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"Record1099m\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"Recipient1099m\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": \"{{Submission1099m}}\",\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": \"{{Business1099m}}\",\r\n            \"BusinessNm\": \"DREAMSON KEV LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{EINorSSN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": \"{{Record1099m}}\",\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": \"{{Recipient1099m}}\",\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{TIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"MISCFormData\": {\r\n                \"B1Rents\": 14000.54,\r\n                \"B2Royalties\": 8000.27,\r\n                \"B3OtherIncome\": 2000.86,\r\n                \"B4FedIncomeTaxWH\": 40.23,\r\n                \"B5FishingBoatProceeds\": 10,\r\n                \"B6MedHealthcarePymts\": 10,\r\n                \"B7IsDirectSale\": true,\r\n                \"B8SubstitutePymts\": 10,\r\n                \"B9CropInsurance\": 10,\r\n                \"B10GrossProceeds\": 10,\r\n                \"B11FishPurForResale\": 0,\r\n                \"B12Sec409ADeferrals\": 10,\r\n                \"B13IsFATCA\": true,\r\n                \"B14EPP\": 52.63,\r\n                \"B15NonQualDefComp\": 12.78,\r\n                \"AccountNum\": \"587879879879\",\r\n                \"Is2ndTINnot\": true,\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"PA\",\r\n                        \"StateWH\": 1500.56,\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateIncome\": 1600.36\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"AZ\",\r\n                        \"StateWH\": 1700.45,\r\n                        \"StateIdNum\": \"99-9999999\",\r\n                        \"StateIncome\": 1800.78\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099misc/Update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099misc",
								"Update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"    });\r",
									"    pm.test(\"SubmissionId is invalid\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"SubmissionId is invalid\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Misc/validate?SubmissionId={{Submission1099m}}&RecordIds={{Record1099m}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Misc",
								"validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{Submission1099m}}"
								},
								{
									"key": "RecordIds",
									"value": "{{Record1099m}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Check the status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(`${responseData.Errors[0].Message}`, function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.be.oneOf([\"Invalid Submission Id\", \"Add a active webhook url\"]);\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Misc/Getpdf?SubmissionId={{Submission1099m}}&RecordIds={{Record1099m}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Misc",
								"Getpdf"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{Submission1099m}}"
								},
								{
									"key": "RecordIds",
									"value": "{{Record1099m}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(\"No records found\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"No records found\");\r",
									"    });\r",
									" // Additional tests for a not found response\r",
									"}else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099misc/list?SubmissionId={{Submission1099m}}&BusinessId={{Business1099m}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099misc",
								"list"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{Submission1099m}}"
								},
								{
									"key": "BusinessId",
									"value": "{{Business1099m}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"\r",
									"        // Check StateReturns -> RecordStatus\r",
									"        successRecord.StateReturns.forEach((data) => {\r",
									"\r",
									"            pm.test(`StateReturns -> RecordStatus is ${data.Status}`, function () {\r",
									"\r",
									"                pm.expect(data.Status).to.be.oneOf([\"Transmitted\", \"SENT_TO_AGENCY\", \"NOTCREATED\", \"State Filing Order Received\", \"UNDER_PROCESS\", \"SENT_TO_AGENCY\", \"Created\", \"ACCEPTED\", \"REJECTED\", \"CREATED\", \"State Filing Completed\"]\r",
									"                );\r",
									"            })\r",
									"\r",
									"        });\r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Misc/Status?SubmissionId={{Submission1099m}}&RecordIds={{Record1099m}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Misc",
								"Status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{Submission1099m}}"
								},
								{
									"key": "RecordIds",
									"value": "{{Record1099m}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into a JSON object\r",
									"const responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// Check the StatusCode and perform tests accordingly\r",
									"if (pm.response.code === 200) {\r",
									"    // Check if the response contains the Form1099Records object\r",
									"\r",
									"    // Check the SuccessRecords status\r",
									"    pm.test(\"SuccessRecords -> FederalReturn status is Transmitted\", function () {\r",
									"        const successRecords = responseJson.Form1099Records.SuccessRecords;\r",
									"        pm.expect(successRecords[0].Status).to.be.oneOf([\"Transmitted\"]);\r",
									"    });\r",
									"\r",
									"    // Check the OnlineAccess status\r",
									"    pm.test(\"OnlineAccess status is ORDER_CREATED\", function () {\r",
									"        const onlineAccess = responseJson.Form1099Records.SuccessRecords[0].OnlineAccess;\r",
									"        pm.expect(onlineAccess.Status).to.be.oneOf([\"ORDER_CREATED\"]);\r",
									"    });\r",
									"\r",
									"    const postal = responseJson.Form1099Records.SuccessRecords[0].Postal;\r",
									"    pm.test(\"Postal status is ORDER_CREATED\", function () {\r",
									"\r",
									"        pm.expect(postal.Status).to.be.oneOf([\"sent\", \"SENT\",\"RECEIVED\", \"received\"]);\r",
									"    });\r",
									"\r",
									"    const stateReturns = responseJson.Form1099Records.SuccessRecords[0].StateReturns;\r",
									"    stateReturns.forEach((data, index) => {\r",
									"        // Check the StateReturns status\r",
									"        pm.test(`StateReturns${stateReturns.length > 1 ? `-${index+1}` : ` `}status is Transmitted`, function () {\r",
									"            pm.expect(data.RecordStatus).to.be.oneOf([\"Transmitted\"]);\r",
									"        })\r",
									"    });\r",
									"} else if (pm.response.code === 404) {\r",
									"    // Handle 404 status code - Not Found\r",
									"    pm.test(\"Resource not found - 404\", function () {\r",
									"        // Add your specific tests for the 404 scenario\r",
									"        // For example: pm.expect(responseJson.errorMessage).to.equal(\"Resource not found\");\r",
									"    });\r",
									"} else if (pm.response.code === 500) {\r",
									"    // Handle 500 status code - Internal Server Error\r",
									"    pm.test(\"Internal Server Error - 500\", function () {\r",
									"        // Add your specific tests for the 500 scenario\r",
									"        // For example: pm.expect(responseJson.errorDetails).to.exist;\r",
									"    });\r",
									"} else if(pm.response.code === 400){\r",
									"    // Handle other status codes\r",
									"    pm.test(\"Submission Id is already transmitted\", function(){\r",
									"        let data=responseJson.Errors[0]\r",
									"         pm.expect(data.Message).to.be.equal( \"Submission Id is already transmitted\");\r",
									"        })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionId\": \"{{Submission1099m}}\",\r\n    \"RecordIds\": [\r\n        \"{{Record1099m}}\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099MISC/Transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099MISC",
								"Transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"\r",
									"        // Check StateReturns -> RecordStatus\r",
									"        successRecord.StateReturns.forEach((data) => {\r",
									"\r",
									"            pm.test(`StateReturns -> RecordStatus is ${data.Status}`, function () {\r",
									"\r",
									"                pm.expect(data.Status).to.be.oneOf([\"Transmitted\", \"SENT_TO_AGENCY\", \"NOTCREATED\", \"State Filing Order Received\", \"UNDER_PROCESS\", \"SENT_TO_AGENCY\", \"Created\", \"ACCEPTED\", \"REJECTED\", \"CREATED\", \"State Filing Completed\"]\r",
									"                );\r",
									"            })\r",
									"\r",
									"        });\r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Misc/Status?SubmissionId={{Submission1099m}}&RecordIds={{Record1099m}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Misc",
								"Status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{Submission1099m}}"
								},
								{
									"key": "RecordIds",
									"value": "{{Record1099m}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"var responseJSON;\r",
									"responseJSON = JSON.parse(responseBody);\r",
									"pm.environment.set(\"Business1099m\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"Submission1099m\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"Record1099m\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"Recipient1099m\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"REVIERA SOLUTIONS - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n     \"MISCFormData\": {\r\n       \"B1Rents\": 1200.54,\r\n       \"B2Royalties\": 7000.27,\r\n       \"B3OtherIncome\": 1000.86,\r\n       \"B4FedIncomeTaxWH\": 30.23,\r\n       \"B5FishingBoatProceeds\": 0,\r\n       \"B6MedHealthcarePymts\": 0,\r\n       \"B7IsDirectSale\": false,\r\n       \"B8SubstitutePymts\": 0,\r\n       \"B9CropInsurance\": 0,\r\n       \"B10GrossProceeds\": 0,\r\n       \"B11FishPurForResale\": 0,\r\n       \"B12Sec409ADeferrals\": 0, \r\n       \"B13IsFATCA\": true,\r\n       \"B14EPP\": 52.63,\r\n       \"B15NonQualDefComp\": 12.78,\r\n       \"AccountNum\": \"587879879879\",\r\n       \"Is2ndTINnot\": true,\r\n       \"States\": [\r\n         {\r\n           \"StateCd\": \"PA\",\r\n           \"StateWH\": 15.56,\r\n           \"StateIdNum\": \"99999999\",\r\n           \"StateIncome\": 16.36\r\n         },\r\n         {\r\n           \"StateCd\": \"AZ\",\r\n           \"StateWH\": 17.45,\r\n           \"StateIdNum\": \"99-9999999\",\r\n           \"StateIncome\": 18.78\r\n         }\r\n       ]\r\n     }\r\n   }\r\n ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099MISC/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099MISC",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200 & Status -> DELETED \", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 404){\r",
									"    pm.test(\"Status code is 404 & SubmissionId -> invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Enter a valid Submission Id\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"Enter a valid Submission Id\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Misc/Delete?SubmissionId={{Submission1099m}}&RecordIds={{Record1099m}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Misc",
								"Delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{Submission1099m}}"
								},
								{
									"key": "RecordIds",
									"value": "{{Record1099m}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1099 S - 1.7.3",
			"item": [
				{
					"name": "JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"\r",
									"  return encodedSource;\r",
									"};\r",
									"\r",
									"//To generate Header and Payload\r",
									"\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"\r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-45\r",
									"  \r",
									"};\r",
									"console.log(time);\r",
									"\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"\r",
									"//Client secret ID - To generate JWS\r",
									"\r",
									"var secretID = pm.environment.get('secret');\r",
									"\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"\r",
									"console.log(jws);\r",
									"\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ValidateFoem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"GLIMPISE LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"SFormData\": {\r\n                \"B1DateOfClosing\": \"12/12/2022\",\r\n                \"B2GrossProceeds\": 59440,\r\n                \"B3AddressOrLegalDescr\": \"18parkAvenue,KinseyRd,Texas,USA,59102\",\r\n                \"B4IsPropertyOrServiceRcvd\": false,\r\n                \"B5IsTransferorForeign\": true,\r\n                \"B6BuyersTax\": 1000,\r\n                \"AccountNum\": \"125555\"\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099S/validateform",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099S",
								"validateform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099s\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"business1099s\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"record1099s\",responseJSON.Form1099Records.SuccessRecords[0].RecordId)\r",
									"pm.environment.set(\"recipient1099s\",responseJSON.Form1099Records.SuccessRecords[0].RecipientId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Limousine Solutions - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"SFormData\": {\r\n                \"B1DateOfClosing\": \"12/12/2022\",\r\n                \"B2GrossProceeds\": 59440,\r\n                \"B3AddressOrLegalDescr\": \"18parkAvenue,KinseyRd,Texas,USA,59102\",\r\n                \"B4IsPropertyOrServiceRcvd\": false,\r\n                \"B5IsTransferorForeign\": true,\r\n                \"B6BuyersTax\": 1000,\r\n                \"AccountNum\": \"125555\"\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099S/create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099S",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.Form1099Records.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"TaxYear\", responseJSON.Form1099Records.SubmissionManifest.TaxYear);\r",
									"pm.environment.set(\"payerref\", responseJSON.Form1099Records.ReturnHeader.Business.PayerRef);\r",
									"pm.environment.set(\"TIN\", responseJSON.Form1099Records.ReturnData[0].Recipient.TIN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099S/get?SubmissionId={{submission1099s}}&RecordId={{record1099s}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099S",
								"get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099s}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099s}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099s\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"business1099s\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"record1099s\",responseJSON.Form1099Records.SuccessRecords[0].RecordId)\r",
									"pm.environment.set(\"recipient1099s\",responseJSON.Form1099Records.SuccessRecords[0].RecipientId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": \"{{submission1099s}}\",\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": \"{{business1099s}}\",\r\n            \"BusinessNm\": \"Techtraft SOLUTIONS- {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{EINorSSN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": \"{{record1099s}}\",\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": \"{{recipient1099s}}\",\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{TIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"SFormData\": {\r\n                \"B1DateOfClosing\": \"12/12/2022\",\r\n                \"B2GrossProceeds\": 59440,\r\n                \"B3AddressOrLegalDescr\": \"18parkAvenue,KinseyRd,Texas,USA,59102\",\r\n                \"B4IsPropertyOrServiceRcvd\": false,\r\n                \"B5IsTransferorForeign\": true,\r\n                \"B6BuyersTax\": 1000,\r\n                \"AccountNum\": \"125555\"\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099S/Update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099S",
								"Update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"    });\r",
									"    pm.test(\"SubmissionId is invalid\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"SubmissionId is invalid\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099S/validate?SubmissionId={{submission1099s}}&RecordId={{record1099s}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099S",
								"validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099s}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099s}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Check the status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(`${responseData.Errors[0].Message}`, function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.be.oneOf([\"Invalid Submission Id\", \"Add a active webhook url\"]);\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099S/getpdf?SubmissionId={{submission1099s}}&RecordId={{record1099s}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099S",
								"getpdf"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099s}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099s}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(\"No records found\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"No records found\");\r",
									"    });\r",
									" // Additional tests for a not found response\r",
									"}else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099S/list?SubmissionId={{submission1099s}}&RecordId={{record1099s}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099S",
								"list"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099s}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099s}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"        \r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099S/status?SubmissionId={{submission1099s}}&RecordId={{record1099s}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099S",
								"status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099s}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099s}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into a JSON object\r",
									"const responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// Check the StatusCode and perform tests accordingly\r",
									"if (pm.response.code === 200) {\r",
									"    // Check if the response contains the Form1099Records object\r",
									"\r",
									"    // Check the SuccessRecords status\r",
									"    pm.test(\"SuccessRecords -> FederalReturn status is Transmitted\", function () {\r",
									"        const successRecords = responseJson.Form1099Records.SuccessRecords;\r",
									"        pm.expect(successRecords[0].Status).to.be.oneOf([\"Transmitted\"]);\r",
									"    });\r",
									"\r",
									"    const postal = responseJson.Form1099Records.SuccessRecords[0].Postal;\r",
									"    pm.test(\"Postal status is ORDER_CREATED\", function () {\r",
									"\r",
									"        pm.expect(postal.Status).to.be.oneOf([\"sent\", \"SENT\",\"RECEIVED\", \"received\"]);\r",
									"    });\r",
									"\r",
									"    // Check the OnlineAccess status\r",
									"    pm.test(\"OnlineAccess status is ORDER_CREATED\", function () {\r",
									"        const onlineAccess = responseJson.Form1099Records.SuccessRecords[0].OnlineAccess;\r",
									"        pm.expect(onlineAccess.Status).to.be.oneOf([\"ORDER_CREATED\"]);\r",
									"    });\r",
									"\r",
									"} else if (pm.response.code === 404) {\r",
									"    // Handle 404 status code - Not Found\r",
									"    pm.test(\"Resource not found - 404\", function () {\r",
									"        // Add your specific tests for the 404 scenario\r",
									"        // For example: pm.expect(responseJson.errorMessage).to.equal(\"Resource not found\");\r",
									"    });\r",
									"} else if (pm.response.code === 500) {\r",
									"    // Handle 500 status code - Internal Server Error\r",
									"    pm.test(\"Internal Server Error - 500\", function () {\r",
									"        // Add your specific tests for the 500 scenario\r",
									"        // For example: pm.expect(responseJson.errorDetails).to.exist;\r",
									"    });\r",
									"} else if(pm.response.code === 400){\r",
									"    // Handle other status codes\r",
									"    pm.test(\"Submission Id is already transmitted\", function(){\r",
									"        let data=responseJson.Errors[0]\r",
									"         pm.expect(data.Message).to.be.equal( \"Submission Id is already transmitted\");\r",
									"        })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"SubmissionId\": \"{{submission1099s}}\",\r\n\"RecordIds\": null\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099S/transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099S",
								"transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"        \r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099S/status?SubmissionId={{submission1099s}}&RecordId={{record1099s}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099S",
								"status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099s}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099s}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099s\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"business1099s\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"record1099s\",responseJSON.Form1099Records.SuccessRecords[0].RecordId)\r",
									"pm.environment.set(\"recipient1099s\",responseJSON.Form1099Records.SuccessRecords[0].RecipientId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Henfor LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"SFormData\": {\r\n                \"B1DateOfClosing\": \"12/12/2022\",\r\n                \"B2GrossProceeds\": 59440,\r\n                \"B3AddressOrLegalDescr\": \"18parkAvenue,KinseyRd,Texas,USA,59102\",\r\n                \"B4IsPropertyOrServiceRcvd\": false,\r\n                \"B5IsTransferorForeign\": true,\r\n                \"B6BuyersTax\": 1000,\r\n                \"AccountNum\": \"125555\"\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099S/create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099S",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200 & Status -> DELETED \", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 404){\r",
									"    pm.test(\"Status code is 404 & SubmissionId -> invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Enter a valid Submission Id\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"Enter a valid Submission Id\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099S/delete?SubmissionId={{submission1099s}}&RecordId={{record1099s}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099S",
								"delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099s}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099s}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1099 B - 1.7.3",
			"item": [
				{
					"name": "JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"\r",
									"  return encodedSource;\r",
									"};\r",
									"\r",
									"//To generate Header and Payload\r",
									"\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"\r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-45\r",
									"  \r",
									"};\r",
									"console.log(time);\r",
									"\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"\r",
									"//Client secret ID - To generate JWS\r",
									"\r",
									"var secretID = pm.environment.get('secret');\r",
									"\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"\r",
									"console.log(jws);\r",
									"\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"ZiMIXON LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"BFormData\": {\r\n                \"B1aDescrOfProp\": \"RFC\",\r\n                \"B1bDateAcquired\": \"07/01/2022\",\r\n                \"B1cDateSoldOrDisposed\": \"09/04/2021\",\r\n                \"B1dProceeds\": -40.55,\r\n                \"B1eCostOrOtherBasis\": 30.89,\r\n                \"B1fAccruedMktDisc\": 20.11,\r\n                \"B1gWashsaleLossDisallowed\": 4.25,\r\n                \"B2TypeOfGainLoss\": \"ordinary short term\",\r\n                \"B3IsProceedsFromCollectibles\": true,\r\n                \"B3IsProceedsFromQOF\": false,\r\n                \"B4FedTaxWH\": 0,\r\n                \"B5IsNonCoveredSecurityNotReported\": false,\r\n                \"B5IsNonCoveredSecurityReported\": false,\r\n                \"B6IsGrossProceeds\": true,\r\n                \"B6IsNetProceeds\": false,\r\n                \"B7IsLossNotAllowedbasedOn1d\": false,\r\n                \"B8PLRealizedOnClosedContract\": 0,\r\n                \"B9PLUnrealizedOnOpenContractPrevTy\": 0,\r\n                \"B10UnrealizedPLOnOpenContractCurTy\": 0,\r\n                \"B11AggPLOnContract\": 0,\r\n                \"B12IsBasisReportedToIRS\": false,\r\n                \"B13Bartering\": 43,\r\n                \"AccountNum\": \"20123130000009000001\",\r\n                \"CUSIPNum\": \"8988932143534\",\r\n                \"IsFATCA\": true,\r\n                \"Form8949Code\": \"X\",\r\n                \"Is2ndTINnot\": true,\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"WV\",\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateWH\": 257.94\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"ID\",\r\n                        \"StateIdNum\": \"999999999\",\r\n                        \"StateWH\": 15\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099B/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099B",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099B\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"business1099B\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"record1099B\",responseJSON.Form1099BRecords.SuccessRecords[0].RecordId)\r",
									"pm.environment.set(\"recipient1099B\",responseJSON.Form1099BRecords.SuccessRecords[0].RecipientId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"ZiMIXON LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"BFormData\": {\r\n                \"B1aDescrOfProp\": \"RFC\",\r\n                \"B1bDateAcquired\": \"07/01/2022\",\r\n                \"B1cDateSoldOrDisposed\": \"09/04/2021\",\r\n                \"B1dProceeds\": -40.55,\r\n                \"B1eCostOrOtherBasis\": 30.89,\r\n                \"B1fAccruedMktDisc\": 20.11,\r\n                \"B1gWashsaleLossDisallowed\": 4.25,\r\n                \"B2TypeOfGainLoss\": \"ordinary short term\",\r\n                \"B3IsProceedsFromCollectibles\": true,\r\n                \"B3IsProceedsFromQOF\": false,\r\n                \"B4FedTaxWH\": 0,\r\n                \"B5IsNonCoveredSecurityNotReported\": false,\r\n                \"B5IsNonCoveredSecurityReported\": false,\r\n                \"B6IsGrossProceeds\": true,\r\n                \"B6IsNetProceeds\": false,\r\n                \"B7IsLossNotAllowedbasedOn1d\": false,\r\n                \"B8PLRealizedOnClosedContract\": 0,\r\n                \"B9PLUnrealizedOnOpenContractPrevTy\": 0,\r\n                \"B10UnrealizedPLOnOpenContractCurTy\": 0,\r\n                \"B11AggPLOnContract\": 0,\r\n                \"B12IsBasisReportedToIRS\": false,\r\n                \"B13Bartering\": 43,\r\n                \"AccountNum\": \"20123130000009000001\",\r\n                \"CUSIPNum\": \"8988932143534\",\r\n                \"IsFATCA\": true,\r\n                \"Form8949Code\": \"X\",\r\n                \"Is2ndTINnot\": true,\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"WV\",\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateWH\": 257.94\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"ID\",\r\n                        \"StateIdNum\": \"999999999\",\r\n                        \"StateWH\": 15\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099B/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099B",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.Form1099BRecord.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"TaxYear\", responseJSON.Form1099BRecord.SubmissionManifest.TaxYear);\r",
									"pm.environment.set(\"payerref\", responseJSON.Form1099BRecord.ReturnHeader.Business.PayerRef);\r",
									"pm.environment.set(\"TIN\", responseJSON.Form1099BRecord.ReturnData[0].Recipient.TIN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099B/get?SubmissionId={{submission1099B}}&RecordIds={{record1099B}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099B",
								"get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099B}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099B}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099B\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"business1099B\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"record1099B\",responseJSON.Form1099BRecords.SuccessRecords[0].RecordId)\r",
									"pm.environment.set(\"recipient1099B\",responseJSON.Form1099BRecords.SuccessRecords[0].RecipientId)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": \"{{submission1099B}}\",\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": \"{{business1099B}}\",\r\n            \"BusinessNm\": \"EVENTOFOR LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{EINorSSN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": \"{{record1099B}}\",\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": \"{{recipient1099B}}\",\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{TIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"BFormData\": {\r\n                \"B1aDescrOfProp\": \"Land sales\",\r\n                \"B1bDateAcquired\": null,\r\n                \"B1cDateSoldOrDisposed\": null,\r\n                \"B1dProceeds\": null,\r\n                \"B1eCostOrOtherBasis\": 0,\r\n                \"B1fAccruedMktDisc\": 0,\r\n                \"B1gWashsaleLossDisallowed\": 0,\r\n                \"B2TypeOfGainLoss\": null,\r\n                \"B3IsProceedsFromCollectibles\": false,\r\n                \"B3IsProceedsFromQOF\": false,\r\n                \"B4FedTaxWH\": 0,\r\n                \"B5IsNonCoveredSecurity\": false,\r\n                \"B6IsGrossProceeds\": false,\r\n                \"B6IsNetProceeds\": false,\r\n                \"B7IsLossNotAllowedbasedOn1d\": false,\r\n                \"B8PLRealizedOnClosedContract\": -100,\r\n                \"B9PLUnrealizedOnOpenContractPrevTy\": -100,\r\n                \"B10UnrealizedPLOnOpenContractCurTy\": -1000,\r\n                \"B11AggPLOnContract\": -1000,\r\n                \"B12IsBasisReportedToIRS\": false,\r\n                \"B13Bartering\": 0,\r\n                \"AccountNum\": null,\r\n                \"CUSIPNum\": \"8988932143534\",\r\n                \"IsFATCA\": false,\r\n                \"Form8949Code\": \"A\",\r\n                \"Is2ndTINnot\": true,\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"WV\",\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateWH\": 257.94\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"ID\",\r\n                        \"StateIdNum\": \"999999999\",\r\n                        \"StateWH\": 15\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099B/Update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099B",
								"Update"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099B/getpdf?SubmissionId={{submission1099B}}&RecordIds={{record1099B}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099B",
								"getpdf"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099B}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099B}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"        \r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099B/Status?SubmissionId={{submission1099B}}&RecordIds={{record1099B}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099B",
								"Status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099B}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099B}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(\"No records found\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"No records found\");\r",
									"    });\r",
									" // Additional tests for a not found response\r",
									"}else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099B/List?BusinessId={{business1099B}}&TaxYear=2022",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099B",
								"List"
							],
							"query": [
								{
									"key": "BusinessId",
									"value": "{{business1099B}}"
								},
								{
									"key": "TaxYear",
									"value": "2022"
								},
								{
									"key": "TINType",
									"value": "EIN",
									"disabled": true
								},
								{
									"key": "TIN",
									"value": "{{TIN}}",
									"disabled": true
								},
								{
									"key": "Page",
									"value": "",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "",
									"disabled": true
								},
								{
									"key": "FromDate",
									"value": "",
									"disabled": true
								},
								{
									"key": "ToDate",
									"value": "",
									"disabled": true
								},
								{
									"key": "EfileStatus",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"    });\r",
									"    pm.test(\"SubmissionId is invalid\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"SubmissionId is invalid\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099B/Validate?SubmissionId={{submission1099B}}&RecordIds={{record1099B}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099B",
								"Validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099B}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099B}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into a JSON object\r",
									"const responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// Check the StatusCode and perform tests accordingly\r",
									"if (pm.response.code === 200) {\r",
									"    // Check if the response contains the Form1099BRecords object\r",
									"\r",
									"    // Check the SuccessRecords status\r",
									"    pm.test(\"SuccessRecords -> FederalReturn status is Transmitted\", function () {\r",
									"        const successRecords = responseJson.Form1099BRecords.SuccessRecords;\r",
									"        pm.expect(successRecords[0].Status).to.be.oneOf([\"Transmitted\"]);\r",
									"    });\r",
									"\r",
									"    // Check the OnlineAccess status\r",
									"    pm.test(\"OnlineAccess status is ORDER_CREATED\", function () {\r",
									"        const onlineAccess = responseJson.Form1099BRecords.SuccessRecords[0].OnlineAccess;\r",
									"        pm.expect(onlineAccess.Status).to.be.oneOf([\"ORDER_CREATED\"]);\r",
									"    });\r",
									"\r",
									"    const postal = responseJson.Form1099BRecords.SuccessRecords[0].Postal;\r",
									"    pm.test(\"Postal status is ORDER_CREATED\", function () {\r",
									"\r",
									"        pm.expect(postal.Status).to.be.oneOf([\"sent\", \"SENT\",\"RECEIVED\", \"received\"]);\r",
									"    });\r",
									"\r",
									"    const stateReturns = responseJson.Form1099BRecords.SuccessRecords[0].StateReturns;\r",
									"    stateReturns.forEach((data, index) => {\r",
									"        // Check the StateReturns status\r",
									"        pm.test(`StateReturns${stateReturns.length > 1 ? `-${index+1}` : ` `}status is Transmitted`, function () {\r",
									"            pm.expect(data.RecordStatus).to.be.oneOf([\"Transmitted\"]);\r",
									"        })\r",
									"    });\r",
									"} else if (pm.response.code === 404) {\r",
									"    // Handle 404 status code - Not Found\r",
									"    pm.test(\"Resource not found - 404\", function () {\r",
									"        // Add your specific tests for the 404 scenario\r",
									"        // For example: pm.expect(responseJson.errorMessage).to.equal(\"Resource not found\");\r",
									"    });\r",
									"} else if (pm.response.code === 500) {\r",
									"    // Handle 500 status code - Internal Server Error\r",
									"    pm.test(\"Internal Server Error - 500\", function () {\r",
									"        // Add your specific tests for the 500 scenario\r",
									"        // For example: pm.expect(responseJson.errorDetails).to.exist;\r",
									"    });\r",
									"} else if(pm.response.code === 400){\r",
									"    // Handle other status codes\r",
									"    pm.test(\"Submission Id is already transmitted\", function(){\r",
									"        let data=responseJson.Errors[0]\r",
									"         pm.expect(data.Message).to.be.equal( \"Submission Id is already transmitted\");\r",
									"        })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"SubmissionId\": \"{{submission1099B}}\",\r\n  \"RecordIds\": [\r\n    \"{{record1099B}}\"\r\n  ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{host-1.7.3}}/form1099B/Transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099B",
								"Transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200 & Status -> DELETED \", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 404){\r",
									"    pm.test(\"Status code is 404 & SubmissionId -> invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Enter a valid Submission Id\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"Enter a valid Submission Id\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099B/delete?SubmissionId={{submission1099div}}&RecordIds={{record1099div}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099B",
								"delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099div}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099div}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1099 DIV - 1.7.3",
			"item": [
				{
					"name": "JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"\r",
									"  return encodedSource;\r",
									"};\r",
									"\r",
									"//To generate Header and Payload\r",
									"\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"\r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-45\r",
									"  \r",
									"};\r",
									"console.log(time);\r",
									"\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"\r",
									"//Client secret ID - To generate JWS\r",
									"\r",
									"var secretID = pm.environment.get('secret');\r",
									"\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"\r",
									"console.log(jws);\r",
									"\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validateform",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"TANFORT SOLUTIONS - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"DIVFormData\": {\r\n                \"B1aTotOrdiDiv\": 978745121.12,\r\n                \"B1bQualiDiv\": 57854178.14,\r\n                \"B2aTotCapGain\": 9221740361.32,\r\n                \"B2bUnRecapSecGain\": 1274814756.55,\r\n                \"B2cSec1202Gain\": 157821214.55,\r\n                \"B2dCollGain\": 1914864121.55,\r\n                \"B2eSec897OrdiDiv\": 64760397.55,\r\n                \"B2fSec897CapGain\": 417346218.55,\r\n                \"B3NonDivDist\": 5894314711.55,\r\n                \"B4FedIncTaxWH\": 4254436712.55,\r\n                \"B5Sec199ADiv\": 57145658.55,\r\n                \"B6InvestExp\": 45744181.55,\r\n                \"B7ForeignTaxPaid\": 1165432811.55,\r\n                \"B8ForeignCountryOrUsPoss\": \"Australia\",\r\n                \"B9CashLiquiDist\": 935701476.55,\r\n                \"B10NonCashLiquiDist\": 9155475182.55,\r\n                \"B11IsFATCA\": true,\r\n                \"B12ExemptIntDiv\": 5074860412.55,\r\n                \"B13SpeciPrivActiBondIntDiv\": 337401874.15,\r\n                \"Is2ndTINnot\": true,\r\n                \"AccountNum\": null,\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"PA\",\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateWH\": 20.14\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"AZ\",\r\n                        \"StateIdNum\": \"99-9999999\",\r\n                        \"StateWH\": 30.12\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099div/validateform",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099div",
								"validateform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"business1099div\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"submission1099div\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"record1099div\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"recipient1099div\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"TAMADRID & CO - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"DIVFormData\": {\r\n                \"B1aTotOrdiDiv\": 978745121.12,\r\n                \"B1bQualiDiv\": 57854178.14,\r\n                \"B2aTotCapGain\": 9221740361.32,\r\n                \"B2bUnRecapSecGain\": 1274814756.55,\r\n                \"B2cSec1202Gain\": 157821214.55,\r\n                \"B2dCollGain\": 1914864121.55,\r\n                \"B2eSec897OrdiDiv\": 64760397.55,\r\n                \"B2fSec897CapGain\": 417346218.55,\r\n                \"B3NonDivDist\": 5894314711.55,\r\n                \"B4FedIncTaxWH\": 4254436712.55,\r\n                \"B5Sec199ADiv\": 57145658.55,\r\n                \"B6InvestExp\": 45744181.55,\r\n                \"B7ForeignTaxPaid\": 1165432811.55,\r\n                \"B8ForeignCountryOrUsPoss\": \"Australia\",\r\n                \"B9CashLiquiDist\": 935701476.55,\r\n                \"B10NonCashLiquiDist\": 9155475182.55,\r\n                \"B11IsFATCA\": true,\r\n                \"B12ExemptIntDiv\": 5074860412.55,\r\n                \"B13SpeciPrivActiBondIntDiv\": 337401874.15,\r\n                \"Is2ndTINnot\": true,\r\n                \"AccountNum\": null,\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"AK\",\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateWH\": 20.14\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"AR\",\r\n                        \"StateIdNum\": \"999999999\",\r\n                        \"StateWH\": 30.12\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099div/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099div",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.Form1099Records.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"TaxYear\", responseJSON.Form1099Records.SubmissionManifest.TaxYear);\r",
									"pm.environment.set(\"payerref\", responseJSON.Form1099Records.ReturnHeader.Business.PayerRef);\r",
									"pm.environment.set(\"TIN\", responseJSON.Form1099Records.ReturnData[0].Recipient.TIN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099DIV/get?SubmissionId={{submission1099div}}&RecordIds={{record1099div}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099DIV",
								"get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099div}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099div}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"business1099div\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"submission1099div\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"record1099div\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"recipient1099div\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": \"{{submission1099div}}\",\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": \"{{business1099div}}\",\r\n            \"BusinessNm\": \"EVENTOFOR LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{EINorSSN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": \"{{record1099div}}\",\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": \"{{recipient1099div}}\",\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{TIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"DIVFormData\": {\r\n                \"B1aTotOrdiDiv\": 978745121.12,\r\n                \"B1bQualiDiv\": 57854178.14,\r\n                \"B2aTotCapGain\": 9221740361.32,\r\n                \"B2bUnRecapSecGain\": 1274814756.55,\r\n                \"B2cSec1202Gain\": 157821214.55,\r\n                \"B2dCollGain\": 1914864121.55,\r\n                \"B2eSec897OrdiDiv\": 64760397.55,\r\n                \"B2fSec897CapGain\": 417346218.55,\r\n                \"B3NonDivDist\": 5894314711.55,\r\n                \"B4FedIncTaxWH\": 4254436712.55,\r\n                \"B5Sec199ADiv\": 57145658.55,\r\n                \"B6InvestExp\": 45744181.55,\r\n                \"B7ForeignTaxPaid\": 1165432811.55,\r\n                \"B8ForeignCountryOrUsPoss\": \"Australia\",\r\n                \"B9CashLiquiDist\": 935701476.55,\r\n                \"B10NonCashLiquiDist\": 9155475182.55,\r\n                \"B11IsFATCA\": true,\r\n                \"B12ExemptIntDiv\": 5074860412.55,\r\n                \"B13SpeciPrivActiBondIntDiv\": 337401874.15,\r\n                \"Is2ndTINnot\": true,\r\n                \"AccountNum\": null,\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"PA\",\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateWH\": 90.14\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"AZ\",\r\n                        \"StateIdNum\": \"99-9999999\",\r\n                        \"StateWH\": 80.12\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"RecordId\": null,\r\n            \"SequenceId\": \"2\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"SSN\",\r\n                \"TIN\": \"871469728\",\r\n                \"FirstPayeeNm\": \"Brinwes\",\r\n                \"SecondPayeeNm\": \"Coiler\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"1751 Kinsey Rd\",\r\n                    \"Address2\": \"Main St\",\r\n                    \"City\": \"Dothan\",\r\n                    \"State\": \"AL\",\r\n                    \"ZipCd\": \"36303\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": null,\r\n                    \"Address2\": null,\r\n                    \"City\": null,\r\n                    \"ProvinceOrStateNm\": null,\r\n                    \"Country\": null,\r\n                    \"PostalCd\": null\r\n                },\r\n                \"Email\": \"pradeep.g+BB3NJjh@spantechnologyservices.com\",\r\n                \"Fax\": \"1234567890\",\r\n                \"Phone\": \"1234567890\"\r\n            },\r\n            \"DIVFormData\": {\r\n                \"B1aTotOrdiDiv\": 978745121.12,\r\n                \"B1bQualiDiv\": 57854178.14,\r\n                \"B2aTotCapGain\": 9221740361.32,\r\n                \"B2bUnRecapSecGain\": 1274814756.55,\r\n                \"B2cSec1202Gain\": 157821214.55,\r\n                \"B2dCollGain\": 1914864121.55,\r\n                \"B2eSec897OrdiDiv\": 64760397.55,\r\n                \"B2fSec897CapGain\": 417346218.55,\r\n                \"B3NonDivDist\": 5894314711.55,\r\n                \"B4FedIncTaxWH\": 4254436712.55,\r\n                \"B5Sec199ADiv\": 57145658.55,\r\n                \"B6InvestExp\": 45744181.55,\r\n                \"B7ForeignTaxPaid\": 1165432811.55,\r\n                \"B8ForeignCountryOrUsPoss\": \"Australia\",\r\n                \"B9CashLiquiDist\": 935701476.55,\r\n                \"B10NonCashLiquiDist\": 9155475182.55,\r\n                \"B11IsFATCA\": true,\r\n                \"B12ExemptIntDiv\": 5074860412.55,\r\n                \"B13SpeciPrivActiBondIntDiv\": 337401874.15,\r\n                \"Is2ndTINnot\": true,\r\n                \"AccountNum\": null,\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"PA\",\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateWH\": 20.14\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"AZ\",\r\n                        \"StateIdNum\": \"99-9999999\",\r\n                        \"StateWH\": 30.12\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099DIV/Update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099DIV",
								"Update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"    });\r",
									"    pm.test(\"SubmissionId is invalid\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"SubmissionId is invalid\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099DIV/validate?SubmissionId={{submission1099div}}&RecordIds={{record1099div}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099DIV",
								"validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099div}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099div}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Check the status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(`${responseData.Errors[0].Message}`, function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.be.oneOf([\"Invalid Submission Id\", \"Add a active webhook url\"]);\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099DIV/getPdf?SubmissionId={{submission1099div}}&RecordIds={{record1099div}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099DIV",
								"getPdf"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099div}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099div}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"        \r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099DIV/status?SubmissionId={{submission1099div}}&RecordIds={{record1099div}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099DIV",
								"status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099div}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099div}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(\"No records found\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"No records found\");\r",
									"    });\r",
									" // Additional tests for a not found response\r",
									"}else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099div/list?SubmissionId={{submission1099div}}&BusinessId={{business1099div}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099div",
								"list"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099div}}"
								},
								{
									"key": "BusinessId",
									"value": "{{business1099div}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into a JSON object\r",
									"const responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// Check the StatusCode and perform tests accordingly\r",
									"if (pm.response.code === 200) {\r",
									"    // Check if the response contains the Form1099Records object\r",
									"\r",
									"    // Check the SuccessRecords status\r",
									"    pm.test(\"SuccessRecords -> FederalReturn status is Transmitted\", function () {\r",
									"        const successRecords = responseJson.Form1099Records.SuccessRecords;\r",
									"        pm.expect(successRecords[0].Status).to.be.oneOf([\"Transmitted\"]);\r",
									"    });\r",
									"\r",
									"    // Check the OnlineAccess status\r",
									"    pm.test(\"OnlineAccess status is ORDER_CREATED\", function () {\r",
									"        const onlineAccess = responseJson.Form1099Records.SuccessRecords[0].OnlineAccess;\r",
									"        pm.expect(onlineAccess.Status).to.be.oneOf([\"ORDER_CREATED\"]);\r",
									"    });\r",
									"\r",
									"    const postal = responseJson.Form1099Records.SuccessRecords[0].Postal;\r",
									"    pm.test(\"Postal status is ORDER_CREATED\", function () {\r",
									"\r",
									"        pm.expect(postal.Status).to.be.oneOf([\"sent\", \"SENT\",\"RECEIVED\", \"received\"]);\r",
									"    });\r",
									"\r",
									"    const stateReturns = responseJson.Form1099Records.SuccessRecords[0].StateReturns;\r",
									"    stateReturns.forEach((data, index) => {\r",
									"        // Check the StateReturns status\r",
									"        pm.test(`StateReturns${stateReturns.length > 1 ? `-${index+1}` : ` `}status is Transmitted`, function () {\r",
									"            pm.expect(data.RecordStatus).to.be.oneOf([\"Transmitted\"]);\r",
									"        })\r",
									"    });\r",
									"} else if (pm.response.code === 404) {\r",
									"    // Handle 404 status code - Not Found\r",
									"    pm.test(\"Resource not found - 404\", function () {\r",
									"        // Add your specific tests for the 404 scenario\r",
									"        // For example: pm.expect(responseJson.errorMessage).to.equal(\"Resource not found\");\r",
									"    });\r",
									"} else if (pm.response.code === 500) {\r",
									"    // Handle 500 status code - Internal Server Error\r",
									"    pm.test(\"Internal Server Error - 500\", function () {\r",
									"        // Add your specific tests for the 500 scenario\r",
									"        // For example: pm.expect(responseJson.errorDetails).to.exist;\r",
									"    });\r",
									"} else if(pm.response.code === 400){\r",
									"    // Handle other status codes\r",
									"    pm.test(\"Submission Id is already transmitted\", function(){\r",
									"        let data=responseJson.Errors[0]\r",
									"         pm.expect(data.Message).to.be.equal( \"Submission Id is already transmitted\");\r",
									"        })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"SubmissionId\": \"{{submission1099div}}\",\r\n  \"RecordIds\": [\r\n    \"{{record1099div}}\"\r\n  ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{host-1.7.3}}/form1099DIV/Transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099DIV",
								"Transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"business1099div\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"submission1099div\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"record1099div\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"recipient1099div\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"TAMADRID & CO - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"DIVFormData\": {\r\n                \"B1aTotOrdiDiv\": 978745121.12,\r\n                \"B1bQualiDiv\": 57854178.14,\r\n                \"B2aTotCapGain\": 9221740361.32,\r\n                \"B2bUnRecapSecGain\": 1274814756.55,\r\n                \"B2cSec1202Gain\": 157821214.55,\r\n                \"B2dCollGain\": 1914864121.55,\r\n                \"B2eSec897OrdiDiv\": 64760397.55,\r\n                \"B2fSec897CapGain\": 417346218.55,\r\n                \"B3NonDivDist\": 5894314711.55,\r\n                \"B4FedIncTaxWH\": 4254436712.55,\r\n                \"B5Sec199ADiv\": 57145658.55,\r\n                \"B6InvestExp\": 45744181.55,\r\n                \"B7ForeignTaxPaid\": 1165432811.55,\r\n                \"B8ForeignCountryOrUsPoss\": \"Australia\",\r\n                \"B9CashLiquiDist\": 935701476.55,\r\n                \"B10NonCashLiquiDist\": 9155475182.55,\r\n                \"B11IsFATCA\": true,\r\n                \"B12ExemptIntDiv\": 5074860412.55,\r\n                \"B13SpeciPrivActiBondIntDiv\": 337401874.15,\r\n                \"Is2ndTINnot\": true,\r\n                \"AccountNum\": null,\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"PA\",\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateWH\": 20.14\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"AZ\",\r\n                        \"StateIdNum\": \"99-9999999\",\r\n                        \"StateWH\": 30.12\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099div/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099div",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200 & Status -> DELETED \", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 404){\r",
									"    pm.test(\"Status code is 404 & SubmissionId -> invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Enter a valid Submission Id\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"Enter a valid Submission Id\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099DIV/delete?SubmissionId={{submission1099div}}&RecordIds={{record1099div}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099DIV",
								"delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099div}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099div}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "W2 - 1.7.3",
			"item": [
				{
					"name": "JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"\r",
									"  return encodedSource;\r",
									"};\r",
									"\r",
									"//To generate Header and Payload\r",
									"\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"\r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-50\r",
									"};\r",
									"console.log(time);\r",
									"\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"\r",
									"//Client secret ID - To generate JWS\r",
									"\r",
									"var secretID = pm.environment.get('secret');\r",
									"\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"\r",
									"console.log(jws);\r",
									"\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							},
							{
								"key": "Content-Tye",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "{{Referer}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ValidateForm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"ZiMIXON LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"W2FormData\": {\r\n                \"B1Wages\": 10000.65,\r\n                \"B2FedTaxWH\": 153.32,\r\n                \"B3SocSecWages\": 0,\r\n                \"B4SocSecTaxWH\": 0,\r\n                \"B5MediWages\": 1620000,\r\n                \"B6MediTaxWH\": 78.21,\r\n                \"B7SocSecTips\": 0,\r\n                \"B8AllocatedTips\": 45,\r\n                \"B10DependtCareBenefits\": 78,\r\n                \"B11Sec457Plan\": 101.52,\r\n                \"B11NonSec457Plan\": 0,\r\n                \"B12aCd\": \"EE\",\r\n                \"B12aAmt\": 32,\r\n                \"B12bCd\": \"B\",\r\n                \"B12bAmt\": 21,\r\n                \"B12cCd\": \"E\",\r\n                \"B12cAmt\": 213,\r\n                \"B12dCd\": \"H\",\r\n                \"B12dAmt\": 210,\r\n                \"B13IsStatEmp\": true,\r\n                \"B13IsRetPlan\": true,\r\n                \"B13Is3rdPartySickPay\": true,\r\n                \"B14Other\": \"Real Estate 4500\",\r\n                \"ControlNum\": \"35231\",\r\n                \"States\": [\r\n                    {\r\n                        \"B15StateCd\": \"DE\",\r\n                        \"B15StateIdNum\": \"9-999999999-123\",\r\n                        \"B16StateWages\": 1000.65,\r\n                        \"B17StateTax\": 100.32,\r\n                        \"LocalityData\": [\r\n                            {\r\n                                \"LocalWages\": 300.23,\r\n                                \"LocalTax\": 100.45,\r\n                                \"LocalityNm\": \"Pristine\"\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        \"B15StateCd\": \"SC\",\r\n                        \"B15StateIdNum\": \"123456789\",\r\n                        \"B16StateWages\": 100.65,\r\n                        \"B17StateTax\": 50.32,\r\n                        \"LocalityData\": null\r\n                    }\r\n                ]\r\n            }\r\n        }, {\r\n            \"RecordId\": null,\r\n            \"SequenceId\": \"0251\",\r\n            \"Employee\": {\r\n                \"EmployeeId\": null,\r\n                \"SSN\": \"626265224\",\r\n                \"FirstNm\": \"John\",\r\n                \"MiddleNm\": \"Ave\",\r\n                \"LastNm\": \"Linda\",\r\n                \"Suffix\": \"Jr\",\r\n                \"Email\": \"nandhini.r+q1@spantechnologyservices.com\",\r\n                \"Fax\": \"4567891234\",\r\n                \"Phone\": \"4259631478\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"1751 Kinsey Rd\",\r\n                    \"Address2\": \"Main St\",\r\n                    \"City\": \"Dothan\",\r\n                    \"State\": \"AL\",\r\n                    \"ZipCd\": \"36303\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"500 Penn Avenue\",\r\n                    \"Address2\": \"Park Street\",\r\n                    \"City\": \"Toronto\",\r\n                    \"ProvinceOrStateNm\": \"Ontario\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"02452\"\r\n                }\r\n            },\r\n            \"W2FormData\": {\r\n                \"B1Wages\": 15000.65,\r\n                \"B2FedTaxWH\": 153.32,\r\n                \"B3SocSecWages\": 0,\r\n                \"B4SocSecTaxWH\": 0,\r\n                \"B5MediWages\": 1620000,\r\n                \"B6MediTaxWH\": 78.21,\r\n                \"B7SocSecTips\": 0,\r\n                \"B8AllocatedTips\": 45,\r\n                \"B10DependtCareBenefits\": 78,\r\n                \"B11Sec457Plan\": 96,\r\n                \"B11NonSec457Plan\": 0,\r\n                \"B12aCd\": \"EE\",\r\n                \"B12aAmt\": 32,\r\n                \"B12bCd\": \"B\",\r\n                \"B12bAmt\": 21,\r\n                \"B12cCd\": \"E\",\r\n                \"B12cAmt\": 213,\r\n                \"B12dCd\": \"H\",\r\n                \"B12dAmt\": 210,\r\n                \"B13IsStatEmp\": true,\r\n                \"B13IsRetPlan\": true,\r\n                \"B13Is3rdPartySickPay\": true,\r\n                \"B14Other\": \"Real Estate 4500\",\r\n                \"ControlNum\": \"35231\",\r\n                \"States\": [\r\n                    {\r\n                        \"B15StateCd\": \"DE\",\r\n                        \"B15StateIdNum\": \"9-999999999-123\",\r\n                        \"B16StateWages\": 1000.65,\r\n                        \"B17StateTax\": 100.32,\r\n                        \"LocalityData\": [\r\n                            {\r\n                                \"LocalWages\": 300.23,\r\n                                \"LocalTax\": 100.45,\r\n                                \"LocalityNm\": \"Pristine\"\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        \"B15StateCd\": \"SC\",\r\n                        \"B15StateIdNum\": \"123456789\",\r\n                        \"B16StateWages\": 100.65,\r\n                        \"B17StateTax\": 50.32,\r\n                        \"LocalityData\": null\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2/ValidateForm",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2",
								"ValidateForm"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"var responseJSON;\r",
									"responseJSON = JSON.parse(responseBody);\r",
									"pm.environment.set(\"businessw2\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"submissionw2\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"recordw2\", responseJSON.FormW2Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"employeew2\", responseJSON.FormW2Records.SuccessRecords[0].EmployeeId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"ZiMIXON LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Employee\": {\r\n                \"EmployeeId\": null,\r\n                \"SSN\": \"{{randomNumer_SSN}}\",\r\n                \"FirstNm\": \"JASON MAMOA\",\r\n                \"LastNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"W2FormData\": {\r\n                \"B1Wages\": 10000.65,\r\n                \"B2FedTaxWH\": 153.32,\r\n                \"B3SocSecWages\": 0,\r\n                \"B4SocSecTaxWH\": 0,\r\n                \"B5MediWages\": 1620000,\r\n                \"B6MediTaxWH\": 78.21,\r\n                \"B7SocSecTips\": 0,\r\n                \"B8AllocatedTips\": 45,\r\n                \"B10DependtCareBenefits\": 78,\r\n                \"B11Sec457Plan\": 101.52,\r\n                \"B11NonSec457Plan\": 0,\r\n                \"B12aCd\": \"EE\",\r\n                \"B12aAmt\": 32,\r\n                \"B12bCd\": \"B\",\r\n                \"B12bAmt\": 21,\r\n                \"B12cCd\": \"E\",\r\n                \"B12cAmt\": 213,\r\n                \"B12dCd\": \"H\",\r\n                \"B12dAmt\": 210,\r\n                \"B13IsStatEmp\": true,\r\n                \"B13IsRetPlan\": true,\r\n                \"B13Is3rdPartySickPay\": true,\r\n                \"B14Other\": \"Real Estate 4500\",\r\n                \"ControlNum\": \"35231\",\r\n                \"States\": [\r\n                    {\r\n                        \"B15StateCd\": \"DE\",\r\n                        \"B15StateIdNum\": \"9-999999999-123\",\r\n                        \"B16StateWages\": 1000.65,\r\n                        \"B17StateTax\": 100.32,\r\n                        \"LocalityData\": [\r\n                            {\r\n                                \"LocalWages\": 300.23,\r\n                                \"LocalTax\": 100.45,\r\n                                \"LocalityNm\": \"Pristine\"\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        \"B15StateCd\": \"AK\",\r\n                        \"B15StateIdNum\": \"123456789\",\r\n                        \"B16StateWages\": 100.65,\r\n                        \"B17StateTax\": 50.32,\r\n                        \"LocalityData\": null\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.FormW2Records.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"TaxYear\", responseJSON.FormW2Records.SubmissionManifest.TaxYear);\r",
									"pm.environment.set(\"payerref\", responseJSON.FormW2Records.ReturnHeader.Business.PayerRef);\r",
									"pm.environment.set(\"SSN\", responseJSON.FormW2Records.ReturnData[0].Employee.SSN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2/Get?SubmissionId={{submissionw2}}&RecordIds={{recordw2}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2",
								"Get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionw2}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordw2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"var responseJSON;\r",
									"responseJSON = JSON.parse(responseBody);\r",
									"pm.environment.set(\"businessw2\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"submissionw2\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"recordIdw2\", responseJSON.FormW2Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"recipientw2\", responseJSON.FormW2Records.SuccessRecords[0].EmployeeId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": \"{{submissionw2}}\",\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": \"{{businessw2}}\",\r\n            \"BusinessNm\": \"LAVERSE LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{EINorSSN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": \"{{recordw2}}\",\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Employee\": {\r\n                \"EmployeeId\": \"{{employeew2}}\",\r\n                \"SSN\": \"{{SSN}}\",\r\n                \"FirstNm\": \"JASON MAMOA\",\r\n                \"LastNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"W2FormData\": {\r\n                \"B1Wages\": 10000.65,\r\n                \"B2FedTaxWH\": 153.32,\r\n                \"B3SocSecWages\": 0,\r\n                \"B4SocSecTaxWH\": 0,\r\n                \"B5MediWages\": 1620000,\r\n                \"B6MediTaxWH\": 78.21,\r\n                \"B7SocSecTips\": 0,\r\n                \"B8AllocatedTips\": 45,\r\n                \"B10DependtCareBenefits\": 78,\r\n                \"B11Sec457Plan\": 101.52,\r\n                \"B11NonSec457Plan\": 0,\r\n                \"B12aCd\": \"EE\",\r\n                \"B12aAmt\": 32,\r\n                \"B12bCd\": \"B\",\r\n                \"B12bAmt\": 21,\r\n                \"B12cCd\": \"E\",\r\n                \"B12cAmt\": 213,\r\n                \"B12dCd\": \"H\",\r\n                \"B12dAmt\": 210,\r\n                \"B13IsStatEmp\": true,\r\n                \"B13IsRetPlan\": true,\r\n                \"B13Is3rdPartySickPay\": true,\r\n                \"B14Other\": \"Real Estate 4500\",\r\n                \"ControlNum\": \"35231\",\r\n                \"States\": [\r\n                    {\r\n                        \"B15StateCd\": \"DE\",\r\n                        \"B15StateIdNum\": \"9-999999999-123\",\r\n                        \"B16StateWages\": 1000.65,\r\n                        \"B17StateTax\": 100.32,\r\n                        \"LocalityData\": [\r\n                            {\r\n                                \"LocalWages\": 300.23,\r\n                                \"LocalTax\": 100.45,\r\n                                \"LocalityNm\": \"Pristine\"\r\n                            }\r\n                        ]\r\n                    },\r\n                    {\r\n                        \"B15StateCd\": \"AK\",\r\n                        \"B15StateIdNum\": \"123456789\",\r\n                        \"B16StateWages\": 100.65,\r\n                        \"B17StateTax\": 50.32,\r\n                        \"LocalityData\": null\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2/update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into a JSON object\r",
									"const responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// Check the StatusCode and perform tests accordingly\r",
									"if (pm.response.code === 200) {\r",
									"    // Check if the response contains the FormW2Records object\r",
									"\r",
									"    // Check the SuccessRecords status\r",
									"    pm.test(\"SuccessRecords -> FederalReturn status is Transmitted\", function () {\r",
									"        const successRecords = responseJson.FormW2Records.SuccessRecords;\r",
									"        pm.expect(successRecords[0].Status).to.be.oneOf([\"Transmitted\"]);\r",
									"    });\r",
									"\r",
									"    // Check the OnlineAccess status\r",
									"    pm.test(\"OnlineAccess status is ORDER_CREATED\", function () {\r",
									"        const onlineAccess = responseJson.FormW2Records.SuccessRecords[0].OnlineAccess;\r",
									"        pm.expect(onlineAccess.Status).to.be.oneOf([\"ORDER_CREATED\"]);\r",
									"    });\r",
									"\r",
									"    const postal = responseJson.FormW2Records.SuccessRecords[0].Postal;\r",
									"    pm.test(\"Postal status is ORDER_CREATED\", function () {\r",
									"\r",
									"        pm.expect(postal.Status).to.be.oneOf([\"sent\", \"SENT\",\"RECEIVED\", \"received\"]);\r",
									"    });\r",
									"\r",
									"    const stateReturns = responseJson.FormW2Records.SuccessRecords[0].StateReturns;\r",
									"    stateReturns.forEach((data, index) => {\r",
									"        // Check the StateReturns status\r",
									"        pm.test(`StateReturns${stateReturns.length > 1 ? `-${index+1}` : ` `}status is Transmitted`, function () {\r",
									"            pm.expect(data.RecordStatus).to.be.oneOf([\"Transmitted\"]);\r",
									"        })\r",
									"    });\r",
									"} else if (pm.response.code === 404) {\r",
									"    // Handle 404 status code - Not Found\r",
									"    pm.test(\"Resource not found - 404\", function () {\r",
									"        // Add your specific tests for the 404 scenario\r",
									"        // For example: pm.expect(responseJson.errorMessage).to.equal(\"Resource not found\");\r",
									"    });\r",
									"} else if (pm.response.code === 500) {\r",
									"    // Handle 500 status code - Internal Server Error\r",
									"    pm.test(\"Internal Server Error - 500\", function () {\r",
									"        // Add your specific tests for the 500 scenario\r",
									"        // For example: pm.expect(responseJson.errorDetails).to.exist;\r",
									"    });\r",
									"} else if(pm.response.code === 400){\r",
									"    // Handle other status codes\r",
									"    pm.test(\"Submission Id is already transmitted\", function(){\r",
									"        let data=responseJson.Errors[0]\r",
									"         pm.expect(data.Message).to.be.equal( \"Submission Id is already transmitted\");\r",
									"        })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionId\": \"{{submissionw2}}\",\r\n    \"RecordIds\": [\r\n        \"{{recordw2}}\"\r\n    \r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2/Transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2",
								"Transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPDF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2/Getpdf?SubmissionId={{submissionw2}}&RecordIds={{recordw2}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2",
								"Getpdf"
							],
							"query": [
								{
									"key": "TINMaskType",
									"value": "UNMASKED",
									"disabled": true
								},
								{
									"key": "SubmissionId",
									"value": "{{submissionw2}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordw2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2/list?SubmissionId={{submissionw2}}&RecordIds={{recordw2}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2",
								"list"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionw2}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordw2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.FormW2Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.FormW2Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"\r",
									"        // Check StateReturns -> RecordStatus\r",
									"        successRecord.StateReturns.forEach((data) => {\r",
									"\r",
									"            pm.test(`StateReturns -> RecordStatus is ${data.Status}`, function () {\r",
									"\r",
									"                pm.expect(data.Status).to.be.oneOf([\"Transmitted\", \"SENT_TO_AGENCY\", \"NOTCREATED\", \"State Filing Order Received\", \"UNDER_PROCESS\", \"SENT_TO_AGENCY\", \"Created\", \"ACCEPTED\", \"REJECTED\", \"CREATED\", \"State Filing Completed\"]\r",
									"                );\r",
									"            })\r",
									"\r",
									"        });\r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2/status?SubmissionId={{submissionw2}}&RecordIds={{recordw2}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2",
								"status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionw2}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordw2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/FormW2/validate?SubmissionId={{submissionw2}}&RecordIds={{recordw2}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2",
								"validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionw2}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordw2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2/Delete?SubmissionId={{submissionw2}}&RecordIds={{recordw2}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2",
								"Delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionw2}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordw2}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1099 C - 1.7.3",
			"item": [
				{
					"name": "JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"\r",
									"  return encodedSource;\r",
									"};\r",
									"\r",
									"//To generate Header and Payload\r",
									"\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"\r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-50\r",
									"};\r",
									"console.log(time);\r",
									"\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"\r",
									"//Client secret ID - To generate JWS\r",
									"\r",
									"var secretID = pm.environment.get('secret');\r",
									"\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"\r",
									"console.log(jws);\r",
									"\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							},
							{
								"key": "Content-Tye",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "{{Referer}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Form",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Darwin LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n\t\t\t\"CFormData\": {\r\n\t\t\t\t\"B1DateOfIdentifiableEvent\": \"08/12/2018\",\r\n\t\t\t\t\"B2DebtDischargedAmt\": 9000,\r\n\t\t\t\t\"B3IntIncludedInB2\": 40.55,\r\n\t\t\t\t\"B4DebtDesc\": \"Student Loan\",\r\n\t\t\t\t\"B5IsDebtorLiableForDebtRepymt\": true,\r\n\t\t\t\t\"B6IdentifiableEventCode\": \"A\",\r\n\t\t\t\t\"B7FairMktAmt\": 10000,\r\n\t\t\t\t\"AccountNum\": \"41111110000000000001\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/form1099C/ValidateForm",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099C",
								"ValidateForm"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099c\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"record1099c\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"business1099c\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipient1099c\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Wonders LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n\t\t\t\"CFormData\": {\r\n\t\t\t\t\"B1DateOfIdentifiableEvent\": \"01/01/2022\",\r\n\t\t\t\t\"B2DebtDischargedAmt\": 9000,\r\n\t\t\t\t\"B3IntIncludedInB2\": 40.55,\r\n\t\t\t\t\"B4DebtDesc\":\"Student Loan\",\r\n\t\t\t\t\"B5IsDebtorLiableForDebtRepymt\": true,\r\n\t\t\t\t\"B6IdentifiableEventCode\":\"A\",\r\n\t\t\t\t\"B7FairMktAmt\": 10000,\r\n\t\t\t\t\"AccountNum\": \"41111110000000000001\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/form1099C/create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099C",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var endpointURL = pm.request.url.toString().toLowerCase().replace(\"{{host}}\", '');\r",
									"endpointURL = endpointURL.replace('{{submission1099}}', pm.environment.get('submission1099'));\r",
									"const method = pm.request.method; \r",
									"console.log(endpointURL);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.Form1099Records.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"TaxYear\", responseJSON.Form1099Records.Submissionmanifest.TaxYear);\r",
									"pm.environment.set(\"payerref\", responseJSON.Form1099Records.ReturnHeader.Business.PayerRef);\r",
									"pm.environment.set(\"TIN\", responseJSON.Form1099Records.Returndata[0].Recipient.TIN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form1099C/Get?SubmissionId={{submission1099c}}&RecordIds={{record1099c}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099C",
								"Get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099c}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099c}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": \"{{submission1099c}}\",\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": \"{{business1099c}}\",\r\n            \"BusinessNm\": \"Marshall LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{EINorSSN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": \"{{record1099c}}\",\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": \"{{recipient1099c}}\",\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{TIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n      \"CFormData\": {\r\n        \"B1DateOfIdentifiableEvent\": \"8/9/2021\",\r\n        \"B2DebtDischargedAmt\": 957182,\r\n        \"B3IntIncludedInB2\": 7194.91,\r\n        \"B4DebtDesc\": \"Business Loan Repayment\",\r\n        \"B5IsDebtorLiableForDebtRepymt\": false,\r\n        \"B6IdentifiableEventCode\": \"H\",\r\n        \"B7FairMktAmt\": 5192852,\r\n        \"AccountNum\": \"785000000000000001\"\r\n      }\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/form1099C/update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099C",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"\r",
									"\r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form1099C/Status?SubmissionId={{submission1099c}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099C",
								"Status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099c}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099c}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(\"No records found\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"No records found\");\r",
									"    });\r",
									" // Additional tests for a not found response\r",
									"}else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form1099C/List?SubmissionId={{submission1099c}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099C",
								"List"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099c}}"
								},
								{
									"key": "BusinessId",
									"value": "{{business1099c}}",
									"disabled": true
								},
								{
									"key": "TINType",
									"value": "EIN",
									"disabled": true
								},
								{
									"key": "TIN",
									"value": "422071003",
									"disabled": true
								},
								{
									"key": "TaxYear",
									"value": "2022",
									"disabled": true
								},
								{
									"key": "Page",
									"value": "",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "",
									"disabled": true
								},
								{
									"key": "EfileStatus",
									"value": "TRANSMITTED",
									"disabled": true
								},
								{
									"key": "FromDate",
									"value": "",
									"disabled": true
								},
								{
									"key": "ToDate",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get PDF",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Check the status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(`${responseData.Errors[0].Message}`, function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.be.oneOf([\"Invalid Submission Id\", \"Add a active webhook url\"]);\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form1099C/GetPdf?SubmissionId={{submission1099c}}&RecordIds={{record1099c}}&TINMaskType=BOTH",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099C",
								"GetPdf"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099c}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099c}}"
								},
								{
									"key": "TINMaskType",
									"value": "BOTH"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"    });\r",
									"    pm.test(\"SubmissionId is invalid\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"SubmissionId is invalid\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099C/Validate?SubmissionId={{submission1099c}}&RecordIds={{record1099c}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099C",
								"Validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099c}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099c}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into a JSON object\r",
									"const responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// Check the StatusCode and perform tests accordingly\r",
									"if (pm.response.code === 200) {\r",
									"    // Check if the response contains the Form1099Records object\r",
									"\r",
									"    // Check the SuccessRecords status\r",
									"    pm.test(\"SuccessRecords -> FederalReturn status is Transmitted\", function () {\r",
									"        const successRecords = responseJson.Form1099Records.SuccessRecords;\r",
									"        pm.expect(successRecords[0].Status).to.be.oneOf([\"Transmitted\"]);\r",
									"    });\r",
									"\r",
									"    // Check the OnlineAccess status\r",
									"    pm.test(\"OnlineAccess status is ORDER_CREATED\", function () {\r",
									"        const onlineAccess = responseJson.Form1099Records.SuccessRecords[0].OnlineAccess;\r",
									"        pm.expect(onlineAccess.Status).to.be.oneOf([\"ORDER_CREATED\"]);\r",
									"    });\r",
									"\r",
									"    const postal = responseJson.Form1099Records.SuccessRecords[0].Postal;\r",
									"    pm.test(\"Postal status is ORDER_CREATED\", function () {\r",
									"\r",
									"        pm.expect(postal.Status).to.be.oneOf([\"sent\", \"SENT\",\"RECEIVED\", \"received\"]);\r",
									"    });\r",
									"} else if (pm.response.code === 404) {\r",
									"    // Handle 404 status code - Not Found\r",
									"    pm.test(\"SubmissionId is invalid - 404\", function () {\r",
									"        // Add your specific tests for the 404 scenario\r",
									"        // For example: pm.expect(responseJson.errorMessage).to.equal(\"Resource not found\");\r",
									"    });\r",
									"} else if (pm.response.code === 500) {\r",
									"    // Handle 500 status code - Internal Server Error\r",
									"    pm.test(\"Internal Server Error - 500\", function () {\r",
									"        // Add your specific tests for the 500 scenario\r",
									"        // For example: pm.expect(responseJson.errorDetails).to.exist;\r",
									"    });\r",
									"} else if(pm.response.code === 400){\r",
									"    // Handle other status codes\r",
									"    pm.test(\"Submission Id is already transmitted\", function(){\r",
									"        let data=responseJson.Errors[0]\r",
									"         pm.expect(data.Message).to.be.equal( \"Submission Id is already transmitted\");\r",
									"        })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionId\": \"{{submission1099c}}\",\r\n    \"RecordIds\": [\r\n        \"{{record1099c}}\"\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099C/Transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099C",
								"Transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099c\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"record1099c\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"business1099c\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipient1099c\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Info Web Solutions LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n\t\t\t\"CFormData\": {\r\n\t\t\t\t\"B1DateOfIdentifiableEvent\": \"01/01/2022\",\r\n\t\t\t\t\"B2DebtDischargedAmt\": 9000,\r\n\t\t\t\t\"B3IntIncludedInB2\": 40.55,\r\n\t\t\t\t\"B4DebtDesc\":\"Student Loan\",\r\n\t\t\t\t\"B5IsDebtorLiableForDebtRepymt\": true,\r\n\t\t\t\t\"B6IdentifiableEventCode\":\"A\",\r\n\t\t\t\t\"B7FairMktAmt\": 10000,\r\n\t\t\t\t\"AccountNum\": \"41111110000000000001\"\r\n\t\t\t}\r\n\t\t}\r\n\t]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/form1099C/create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099C",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var endpointURL = pm.request.url.toString().toLowerCase().replace(\"{{host}}\", '');\r",
									"endpointURL = endpointURL.replace('{{submission1099}}', pm.environment.get('submission1099'));\r",
									"endpointURL = endpointURL.replace('{{record1099}}', pm.environment.get('record1099'));\r",
									"const method = pm.request.method; \r",
									"console.log(endpointURL);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200 & Status -> DELETED \", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 404){\r",
									"    pm.test(\"Status code is 404 & SubmissionId -> invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Enter a valid Submission Id\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"Enter a valid Submission Id\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099C/Delete?SubmissionId={{submission1099c}}&RecordIds={{record1099c}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099C",
								"Delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099c}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099c}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1099 G 1.7.3",
			"item": [
				{
					"name": "JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"\r",
									"  return encodedSource;\r",
									"};\r",
									"\r",
									"//To generate Header and Payload\r",
									"\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"\r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-50\r",
									"};\r",
									"console.log(time);\r",
									"\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"\r",
									"//Client secret ID - To generate JWS\r",
									"\r",
									"var secretID = pm.environment.get('secret');\r",
									"\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"\r",
									"console.log(jws);\r",
									"\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							},
							{
								"key": "Content-Tye",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "{{Referer}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Air Marshall LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n    \"GFormData\": {\r\n       \"B1UnempComp\": 7000.27,\r\n       \"B2TaxRefunds\": 90,\r\n       \"B3TaxYearOfB2Amt\": 2014,\r\n       \"B4FedTaxWH\": 70.23,\r\n       \"B5RTAAPayments\": 780,\r\n       \"B6TaxableGrants\": 0,\r\n       \"B7AgriPayments\": 0,\r\n       \"B8IsTradeOrBizIncome\": false,\r\n       \"B9MarketGain\": 0,\r\n       \"Is2ndTINnot\": false,\r\n       \"AccountNum\": \"587879879879\",\r\n       \"States\": [\r\n         {\r\n           \"StateCd\": \"PA\",\r\n           \"StateWH\": 15.56,\r\n           \"StateIdNum\": \"99999999\"\r\n         },\r\n         {\r\n           \"StateCd\": \"AZ\",\r\n           \"StateWH\": 17.45,\r\n           \"StateIdNum\": \"99-9999999\"\r\n         }\r\n       ]\r\n      }\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099G/validateform",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099G",
								"validateform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099G\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"record1099G\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"business1099G\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipient1099G\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Thunder Storm LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n    \"GFormData\": {\r\n       \"B1UnempComp\": 7010.27,\r\n       \"B2TaxRefunds\": 97,\r\n       \"B3TaxYearOfB2Amt\": 2021,\r\n       \"B4FedTaxWH\": 70.23,\r\n       \"B5RTAAPayments\": 390,\r\n       \"B6TaxableGrants\": 0,\r\n       \"B7AgriPayments\": 0,\r\n       \"B8IsTradeOrBizIncome\": false,\r\n       \"B9MarketGain\": 0,\r\n       \"Is2ndTINnot\": false,\r\n       \"AccountNum\": \"587879879879\",\r\n       \"States\": [\r\n         {\r\n           \"StateCd\": \"PA\",\r\n           \"StateWH\": 15.56,\r\n           \"StateIdNum\": \"99999999\"\r\n         },\r\n         {\r\n           \"StateCd\": \"AZ\",\r\n           \"StateWH\": 17.45,\r\n           \"StateIdNum\": \"99-9999999\"\r\n         }\r\n       ]\r\n      }\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099G/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099G",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.Form1099Records.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"TaxYear\", responseJSON.Form1099Records.SubmissionManifest.TaxYear);\r",
									"pm.environment.set(\"payerref\", responseJSON.Form1099Records.ReturnHeader.Business.PayerRef);\r",
									"pm.environment.set(\"TIN\", responseJSON.Form1099Records.ReturnData[0].Recipient.TIN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099G/get?SubmissionId={{submission1099G}}&RecordIds={{record1099G}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099G",
								"get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099G}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099G}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": \"{{submission1099G}}\",\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": \"{{business1099G}}\",\r\n            \"BusinessNm\": \"THUNDERSTORM LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{EINorSSN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": \"{{record1099G}}\",\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": \"{{recipient1099G}}\",\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{TIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"GFormData\": {\r\n                \"B1UnempComp\": 702,\r\n                \"B2TaxRefunds\": 91.22,\r\n                \"B3TaxYearOfB2Amt\": 2020,\r\n                \"B4FedTaxWH\": 70.88,\r\n                \"B5RTAAPayments\": 0,\r\n                \"B6TaxableGrants\": 377,\r\n                \"B7AgriPayments\": 0,\r\n                \"B8IsTradeOrBizIncome\": false,\r\n                \"B9MarketGain\": 0,\r\n                \"Is2ndTINnot\": false,\r\n                \"AccountNum\": \"7999990000000009\",\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"AR\",\r\n                        \"StateWH\": 150.56,\r\n                        \"StateIdNum\": \"999999999\"\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"HI\",\r\n                        \"StateWH\": 150.56,\r\n                        \"StateIdNum\": \"GE-999-999-99999-99\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099G/update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099G",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"\r",
									"        // Check StateReturns -> RecordStatus\r",
									"        successRecord.StateReturns.forEach((data) => {\r",
									"\r",
									"            pm.test(`StateReturns -> RecordStatus is ${data.Status}`, function () {\r",
									"\r",
									"                pm.expect(data.Status).to.be.oneOf([\"Transmitted\", \"SENT_TO_AGENCY\", \"NOTCREATED\", \"State Filing Order Received\", \"UNDER_PROCESS\", \"SENT_TO_AGENCY\", \"Created\", \"ACCEPTED\", \"REJECTED\", \"State Filing Completed\"]\r",
									"                );\r",
									"            })\r",
									"\r",
									"        });\r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099G/Status?SubmissionId={{submission1099G}}&RecordIds={{record1099G}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099G",
								"Status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099G}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099G}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(\"No records found\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"No records found\");\r",
									"    });\r",
									" // Additional tests for a not found response\r",
									"}else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099G/List?SubmissionId={{submission1099G}}&BusinessId={{business1099G}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099G",
								"List"
							],
							"query": [
								{
									"key": "TINType",
									"value": "EIN",
									"disabled": true
								},
								{
									"key": "TIN",
									"value": "415600385",
									"disabled": true
								},
								{
									"key": "TaxYear",
									"value": "2022",
									"disabled": true
								},
								{
									"key": "Page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "10",
									"disabled": true
								},
								{
									"key": "EfileStatus",
									"value": "SENTTOAGENCY",
									"disabled": true
								},
								{
									"key": "FromDate",
									"value": "01/01/2023",
									"disabled": true
								},
								{
									"key": "ToDate",
									"value": "12/31/2023",
									"disabled": true
								},
								{
									"key": "SubmissionId",
									"value": "{{submission1099G}}"
								},
								{
									"key": "BusinessId",
									"value": "{{business1099G}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get PDF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Check the status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(`${responseData.Errors[0].Message}`, function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.be.oneOf([\"Invalid Submission Id\", \"Add a active webhook url\"]);\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099G/Getpdf?SubmissionId={{submission1099G}}&RecordId={{record1099G}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099G",
								"Getpdf"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099G}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099G}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"    });\r",
									"    pm.test(\"SubmissionId is invalid\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"SubmissionId is invalid\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099G/Validate?SubmissionId={{submission1099G}}&RecordId={{record1099G}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099G",
								"Validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099G}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099G}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into a JSON object\r",
									"const responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// Check the StatusCode and perform tests accordingly\r",
									"if (pm.response.code === 200) {\r",
									"    // Check if the response contains the Form1099Records object\r",
									"\r",
									"    // Check the SuccessRecords status\r",
									"    pm.test(\"SuccessRecords -> FederalReturn status is Transmitted\", function () {\r",
									"        const successRecords = responseJson.Form1099Records.SuccessRecords;\r",
									"        pm.expect(successRecords[0].Status).to.be.oneOf([\"Transmitted\"]);\r",
									"    });\r",
									"\r",
									"    // Check the OnlineAccess status\r",
									"    pm.test(\"OnlineAccess status is ORDER_CREATED\", function () {\r",
									"        const onlineAccess = responseJson.Form1099Records.SuccessRecords[0].OnlineAccess;\r",
									"        pm.expect(onlineAccess.Status).to.be.oneOf([\"ORDER_CREATED\"]);\r",
									"    });\r",
									"\r",
									"    const postal = responseJson.Form1099Records.SuccessRecords[0].Postal;\r",
									"    pm.test(\"Postal status is ORDER_CREATED\", function () {\r",
									"\r",
									"        pm.expect(postal.Status).to.be.oneOf([\"sent\", \"SENT\",\"RECEIVED\", \"received\"]);\r",
									"    });\r",
									"\r",
									"    const stateReturns = responseJson.Form1099Records.SuccessRecords[0].StateReturns;\r",
									"    stateReturns.forEach((data, index) => {\r",
									"        // Check the StateReturns status\r",
									"        pm.test(`StateReturns${stateReturns.length > 1 ? `-${index+1}` : ` `}status is Transmitted`, function () {\r",
									"            pm.expect(data.RecordStatus).to.be.oneOf([\"Transmitted\"]);\r",
									"        })\r",
									"    });\r",
									"} else if (pm.response.code === 404) {\r",
									"    // Handle 404 status code - Not Found\r",
									"    pm.test(\"SubmissionId is invalid - 404\", function () {\r",
									"        // Add your specific tests for the 404 scenario\r",
									"        // For example: pm.expect(responseJson.errorMessage).to.equal(\"Resource not found\");\r",
									"    });\r",
									"} else if (pm.response.code === 500) {\r",
									"    // Handle 500 status code - Internal Server Error\r",
									"    pm.test(\"Internal Server Error - 500\", function () {\r",
									"        // Add your specific tests for the 500 scenario\r",
									"        // For example: pm.expect(responseJson.errorDetails).to.exist;\r",
									"    });\r",
									"} else if(pm.response.code === 400){\r",
									"    // Handle other status codes\r",
									"    pm.test(\"Submission Id is already transmitted\", function(){\r",
									"        let data=responseJson.Errors[0]\r",
									"         pm.expect(data.Message).to.be.equal( \"Submission Id is already transmitted\");\r",
									"        })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"SubmissionId\": \"{{submission1099G}}\",\r\n  \"RecordIds\": [\r\n    \"{{record1099G}}\"\r\n  ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{host}}/V1.7.1/Form1099G/Transmit",
							"host": [
								"{{host}}"
							],
							"path": [
								"V1.7.1",
								"Form1099G",
								"Transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099G\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"record1099G\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"business1099G\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipient1099G\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"New Thunder Storm LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n    \"GFormData\": {\r\n       \"B1UnempComp\": 7010.27,\r\n       \"B2TaxRefunds\": 97,\r\n       \"B3TaxYearOfB2Amt\": 2021,\r\n       \"B4FedTaxWH\": 70.23,\r\n       \"B5RTAAPayments\": 390,\r\n       \"B6TaxableGrants\": 0,\r\n       \"B7AgriPayments\": 0,\r\n       \"B8IsTradeOrBizIncome\": false,\r\n       \"B9MarketGain\": 0,\r\n       \"Is2ndTINnot\": false,\r\n       \"AccountNum\": \"587879879879\",\r\n       \"States\": [\r\n         {\r\n           \"StateCd\": \"PA\",\r\n           \"StateWH\": 15.56,\r\n           \"StateIdNum\": \"99999999\"\r\n         },\r\n         {\r\n           \"StateCd\": \"AZ\",\r\n           \"StateWH\": 17.45,\r\n           \"StateIdNum\": \"99-9999999\"\r\n         }\r\n       ]\r\n      }\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099G/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099G",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099G/Delete?SubmissionId={{submission1099G}}&RecordId={{record1099G}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099G",
								"Delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099G}}"
								},
								{
									"key": "RecordId",
									"value": "{{record1099G}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1099 PATR - 1.7.3",
			"item": [
				{
					"name": "JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"\r",
									"  return encodedSource;\r",
									"};\r",
									"\r",
									"//To generate Header and Payload\r",
									"\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"\r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-50\r",
									"};\r",
									"console.log(time);\r",
									"\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"\r",
									"//Client secret ID - To generate JWS\r",
									"\r",
									"var secretID = pm.environment.get('secret');\r",
									"\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"\r",
									"console.log(jws);\r",
									"\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							},
							{
								"key": "Content-Tye",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "{{Referer}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ValidateForm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Twice LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n      \"PATRFormData\": {\r\n        \"B1PatronageDiv\": 654.89,\r\n        \"B2NonPatronageDist\":523.41,\r\n        \"B3PerUnitAllocations\": 800.52,\r\n        \"B4FedTaxWH\": 40.55,\r\n        \"B5RedmNonQualNotices\": 55.45,\r\n        \"B6Sec199AgDeduction\": 49.95,\r\n        \"B7QualPymtsSec199Ab7\":  555.00,\r\n        \"B8Sec199AaQualItems\": 85.96,\r\n        \"B9Sec199AaSSTBItems\": 33.54,\r\n        \"B10InvestmentCredit\": 67.42,\r\n        \"B11WorkOpporCredit\": 12.45,\r\n        \"B12OtherCreditsAndDeductions\": 22.45,\r\n        \"B13IsSpecifiedCoop\": true,\r\n        \"Is2ndTINnot\": true,\r\n        \"AccountNum\": \"20123130000009000001\"\r\n      }\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099PATR/Validateform",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099PATR",
								"Validateform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"SubmissionId_PATR\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"RecordId_PATR\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"businessId_PATR\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipientId_PATR\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Twice LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"PATRFormData\": {\r\n                \"B1PatronageDiv\": 654.89,\r\n                \"B2NonPatronageDist\": 523.41,\r\n                \"B3PerUnitAllocations\": 800.52,\r\n                \"B4FedTaxWH\": 40.55,\r\n                \"B5RedmNonQualNotices\": 55.45,\r\n                \"B6Sec199AgDeduction\": 49.95,\r\n                \"B7QualPymtsSec199Ab7\": 5555.00,\r\n                \"B8Sec199AaQualItems\": 85.96,\r\n                \"B9Sec199AaSSTBItems\": 33.54,\r\n                \"B10InvestmentCredit\": 67.42,\r\n                \"B11WorkOpporCredit\": 12.45,\r\n                \"B12OtherCreditsAndDeductions\": 22.45,\r\n                \"B13IsSpecifiedCoop\": true,\r\n                \"Is2ndTINnot\": true,\r\n                \"AccountNum\": \"20123130000009000001\"\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099PATR/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099PATR",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.Form1099Records.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"TaxYear\", responseJSON.Form1099Records.SubmissionManifest.TaxYear);\r",
									"pm.environment.set(\"payerref\", responseJSON.Form1099Records.ReturnHeader.Business.PayerRef);\r",
									"pm.environment.set(\"TIN\", responseJSON.Form1099Records.ReturnData[0].Recipient.TIN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099PATR/get?SubmissionId={{SubmissionId_PATR}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099PATR",
								"get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SubmissionId_PATR}}"
								},
								{
									"key": "RecordIds",
									"value": "{{RecordId_PATR}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": \"{{SubmissionId_PATR}}\",\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": \"{{businessId_PATR}}\",\r\n            \"BusinessNm\": \"WanderLust LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{EINorSSN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": \"{{RecordId_PATR}}\",\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": \"{{recipientId_PATR}}\",\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{TIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n      \"PATRFormData\": {\r\n        \"B1PatronageDiv\": 200,\r\n        \"B2NonPatronageDist\":200,\r\n        \"B3PerUnitAllocations\": 200,\r\n        \"B4FedTaxWH\": 40.55,\r\n        \"B5RedmNonQualNotices\": 200,\r\n        \"B6Sec199AgDeduction\": 0,\r\n        \"B7QualPymtsSec199Ab7\": 90,\r\n        \"B8Sec199AaQualItems\": 60,\r\n        \"B9Sec199AaSSTBItems\": 60,\r\n        \"B10InvestmentCredit\": 60,\r\n        \"B11WorkOpporCredit\": 60,\r\n        \"B12OtherCreditsAndDeductions\": 50,\r\n        \"B13IsSpecifiedCoop\": true,\r\n        \"Is2ndTINnot\": true,\r\n        \"AccountNum\": \"20123130000009000001\"\r\n      }\r\n    },{\r\n      \"RecordId\": null,\r\n      \"SequenceId\": \"2\",\r\n      \"Recipient\": {\r\n        \"RecipientId\": null,\r\n        \"TINType\": \"EIN\",\r\n        \"TIN\": \"683842172\",\r\n        \"FirstPayeeNm\": \"phin\",\r\n        \"SecondPayeeNm\": \"maskin\",\r\n        \"IsForeign\": false,\r\n        \"USAddress\": {\r\n          \"Address1\": \"1751 Kinsey Rd\",\r\n          \"Address2\": \"Main St\",\r\n          \"City\": \"Dothan\",\r\n          \"State\": \"AL\",\r\n          \"ZipCd\": \"36303\"\r\n        },\r\n        \"ForeignAddress\": {\r\n          \"Address1\": null,\r\n          \"Address2\": null,\r\n          \"City\": null,\r\n          \"ProvinceOrStateNm\": null,\r\n          \"Country\": null,\r\n          \"PostalCd\": null\r\n        },\r\n        \"Email\": \"johnnie@gmail.com\",\r\n        \"Fax\": \"1234567890\",\r\n        \"Phone\": \"1234567890\"\r\n      },\r\n      \"PATRFormData\": {\r\n        \"B1PatronageDiv\": 100,\r\n        \"B2NonPatronageDist\":100,\r\n        \"B3PerUnitAllocations\": 100,\r\n        \"B4FedTaxWH\": 40.55,\r\n        \"B5RedmNonQualNotices\": 100,\r\n        \"B6Sec199AgDeduction\": 0,\r\n        \"B7QualPymtsSec199Ab7\": 90,\r\n        \"B8Sec199AaQualItems\": 60,\r\n        \"B9Sec199AaSSTBItems\": 60,\r\n        \"B10InvestmentCredit\": 60,\r\n        \"B11WorkOpporCredit\": 60,\r\n        \"B12OtherCreditsAndDeductions\": 50,\r\n        \"B13IsSpecifiedCoop\": false,\r\n        \"Is2ndTINnot\": false,\r\n        \"AccountNum\": \"20123130000009000001\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099PATR/Update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099PATR",
								"Update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"\r",
									"        \r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099PATR/Status?SubmissionId={{SubmissionId_PATR}}&RecordIds={{RecordId_PATR}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099PATR",
								"Status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SubmissionId_PATR}}"
								},
								{
									"key": "RecordIds",
									"value": "{{RecordId_PATR}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(\"No records found\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"No records found\");\r",
									"    });\r",
									" // Additional tests for a not found response\r",
									"}else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099PATR/list?SubmissionId={{SubmissionId_PATR}}&RecordIds={{RecordId_PATR}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099PATR",
								"list"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SubmissionId_PATR}}"
								},
								{
									"key": "RecordIds",
									"value": "{{RecordId_PATR}}"
								},
								{
									"key": "TINType",
									"value": "EIN",
									"disabled": true
								},
								{
									"key": "TIN",
									"value": "62-7369245",
									"disabled": true
								},
								{
									"key": "TaxYear",
									"value": "2020",
									"disabled": true
								},
								{
									"key": "Page ",
									"value": "10",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "100",
									"disabled": true
								},
								{
									"key": "EfileStatus",
									"value": "Rejected",
									"disabled": true
								},
								{
									"key": "From Date ",
									"value": "04/26/2022",
									"disabled": true
								},
								{
									"key": "To Date ",
									"value": "04/28/2022",
									"disabled": true
								},
								{
									"key": "BusinessId",
									"value": "{{BusinessId}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pdf",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Check the status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(`${responseData.Errors[0].Message}`, function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.be.oneOf([\"Invalid Submission Id\", \"Add a active webhook url\"]);\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099PATR/GetPdf?SubmissionId={{SubmissionId_PATR}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099PATR",
								"GetPdf"
							],
							"query": [
								{
									"key": "TINMaskType",
									"value": "MASKED",
									"disabled": true
								},
								{
									"key": "SubmissionId",
									"value": "{{SubmissionId_PATR}}"
								},
								{
									"key": "RecordIds",
									"value": "{{RecordId_PATR}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"    });\r",
									"    pm.test(\"SubmissionId is invalid\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"SubmissionId is invalid\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099PATR/Validate?SubmissionId={{SubmissionId_PATR}}&RecordIds={{RecordId_PATR}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099PATR",
								"Validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SubmissionId_PATR}}"
								},
								{
									"key": "RecordIds",
									"value": "{{RecordId_PATR}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into a JSON object\r",
									"const responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// Check the StatusCode and perform tests accordingly\r",
									"if (pm.response.code === 200) {\r",
									"    // Check if the response contains the Form1099Records object\r",
									"\r",
									"    // Check the SuccessRecords status\r",
									"    pm.test(\"SuccessRecords -> FederalReturn status is Transmitted\", function () {\r",
									"        const successRecords = responseJson.Form1099Records.SuccessRecords;\r",
									"        pm.expect(successRecords[0].Status).to.be.oneOf([\"Transmitted\"]);\r",
									"    });\r",
									"\r",
									"    // Check the OnlineAccess status\r",
									"    pm.test(\"OnlineAccess status is ORDER_CREATED\", function () {\r",
									"        const onlineAccess = responseJson.Form1099Records.SuccessRecords[0].OnlineAccess;\r",
									"        pm.expect(onlineAccess.Status).to.be.oneOf([\"ORDER_CREATED\"]);\r",
									"    });\r",
									"\r",
									"    const postal = responseJson.Form1099Records.SuccessRecords[0].Postal;\r",
									"    pm.test(\"Postal status is ORDER_CREATED\", function () {\r",
									"\r",
									"        pm.expect(postal.Status).to.be.oneOf([\"sent\", \"SENT\",\"RECEIVED\", \"received\"]);\r",
									"    });\r",
									"\r",
									"} else if (pm.response.code === 404) {\r",
									"    // Handle 404 status code - Not Found\r",
									"    pm.test(\"SubmissionId is invalid - 404\", function () {\r",
									"        // Add your specific tests for the 404 scenario\r",
									"        // For example: pm.expect(responseJson.errorMessage).to.equal(\"Resource not found\");\r",
									"    });\r",
									"} else if (pm.response.code === 500) {\r",
									"    // Handle 500 status code - Internal Server Error\r",
									"    pm.test(\"Internal Server Error - 500\", function () {\r",
									"        // Add your specific tests for the 500 scenario\r",
									"        // For example: pm.expect(responseJson.errorDetails).to.exist;\r",
									"    });\r",
									"} else if(pm.response.code === 400){\r",
									"    // Handle other status codes\r",
									"    pm.test(\"Submission Id is already transmitted\", function(){\r",
									"        let data=responseJson.Errors[0]\r",
									"         pm.expect(data.Message).to.be.equal( \"Submission Id is already transmitted\");\r",
									"        })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"SubmissionId\": \"{{SubmissionId_PATR}}\",\r\n   \"RecordIds\": [\r\n    \"{{RecordId_PATR}}\"\r\n  ]\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099PATR/Transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099PATR",
								"Transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099PATR/Status?SubmissionId={{SubmissionId_PATR}}&RecordIds={{RecordId_PATR}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099PATR",
								"Status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SubmissionId_PATR}}"
								},
								{
									"key": "RecordIds",
									"value": "{{RecordId_PATR}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"SubmissionId_PATR\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"RecordId_PATR\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"businessId_PATR\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipientId_PATR\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Wonders LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"PATRFormData\": {\r\n                \"B1PatronageDiv\": 654.89,\r\n                \"B2NonPatronageDist\": 523.41,\r\n                \"B3PerUnitAllocations\": 800.52,\r\n                \"B4FedTaxWH\": 40.55,\r\n                \"B5RedmNonQualNotices\": 55.45,\r\n                \"B6Sec199AgDeduction\": 49.95,\r\n                \"B7QualPymtsSec199Ab7\": 5555.00,\r\n                \"B8Sec199AaQualItems\": 85.96,\r\n                \"B9Sec199AaSSTBItems\": 33.54,\r\n                \"B10InvestmentCredit\": 67.42,\r\n                \"B11WorkOpporCredit\": 12.45,\r\n                \"B12OtherCreditsAndDeductions\": 22.45,\r\n                \"B13IsSpecifiedCoop\": true,\r\n                \"Is2ndTINnot\": true,\r\n                \"AccountNum\": \"20123130000009000001\"\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099PATR/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099PATR",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200 & Status -> DELETED \", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 404){\r",
									"    pm.test(\"Status code is 404 & SubmissionId -> invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Enter a valid Submission Id\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"Enter a valid Submission Id\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099PATR/Delete?SubmissionId={{SubmissionId_PATR}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099PATR",
								"Delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SubmissionId_PATR}}"
								},
								{
									"key": "RecordIds",
									"value": "{{RecordId_PATR}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1099 Q - 1.7.3",
			"item": [
				{
					"name": "JWT - V2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"  return encodedSource;\r",
									"};\r",
									"//To generate Header and Payload\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-50\r",
									"};\r",
									"console.log(time);\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"//Client secret ID - To generate JWS\r",
									"var secretID = pm.environment.get('secret');\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"console.log(jws);\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "validateform",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Evergreen LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n      \"QFormData\": {\r\n        \"B1GrossDist\": \"5600\",\r\n        \"B2Earnings\": \"5000\",\r\n        \"B3Basis\": \"600\",\r\n        \"B4IsTTE2TTETransfer\": true,\r\n        \"B5DistFrom\": \"PRIVATE\",\r\n        \"B6IsDesignatedBenificiary\": true,\r\n        \"AccountNum\": 12345\r\n      }\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Q/create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Q",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099Q\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"record1099Q\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"business1099Q\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipient1099Q\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Marshmallow LLC- {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"QFormData\": {\r\n                \"B1GrossDist\": \"5600\",\r\n                \"B2Earnings\": \"5000\",\r\n                \"B3Basis\": \"600\",\r\n                \"B4IsTTE2TTETransfer\": true,\r\n                \"B5DistFrom\": \"PRIVATE\",\r\n                \"B6IsDesignatedBenificiary\": true,\r\n                \"AccountNum\": 12345\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Q/create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Q",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.Form1099Records.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"TaxYear\", responseJSON.Form1099Records.SubmissionManiFest.TaxYear);\r",
									"pm.environment.set(\"payerref\", responseJSON.Form1099Records.ReturnHeader.Business.PayerRef);\r",
									"pm.environment.set(\"TIN\", responseJSON.Form1099Records.ReturnData[0].Recipient.TIN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Q/Get?RecordIds={{record1099Q}}&SubmissionId={{submission1099Q}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Q",
								"Get"
							],
							"query": [
								{
									"key": "RecordIds",
									"value": "{{record1099Q}}"
								},
								{
									"key": "SubmissionId",
									"value": "{{submission1099Q}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": \"{{submission1099Q}}\",\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": \"{{business1099Q}}\",\r\n            \"BusinessNm\": \"WanderLust LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{EINorSSN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": \"{{record1099Q}}\",\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": \"{{recipient1099Q}}\",\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{TIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"QFormData\": {\r\n                \"B1GrossDist\": \"5600\",\r\n                \"B2Earnings\": \"5000\",\r\n                \"B3Basis\": \"600\",\r\n                \"B4IsTTE2TTETransfer\": true,\r\n                \"B5DistFrom\": \"PRIVATE\",\r\n                \"B6IsDesignatedBenificiary\": true,\r\n                \"AccountNum\": 12345\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Q/update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Q",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\", \"TRANSMITTED\"])\r",
									"        })\r",
									"\r",
									"        // Check StateReturns -> RecordStatus\r",
									"        \r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Q/status?RecordIds={{record1099Q}}&SubmissionId={{submission1099Q}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Q",
								"status"
							],
							"query": [
								{
									"key": "RecordIds",
									"value": "{{record1099Q}}"
								},
								{
									"key": "SubmissionId",
									"value": "{{submission1099Q}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(\"No records found\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"No records found\");\r",
									"    });\r",
									" // Additional tests for a not found response\r",
									"}else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Q/List?SubmissionId={{submission1099Q}}&BusinessId={{business1099Q}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Q",
								"List"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099Q}}"
								},
								{
									"key": "BusinessId",
									"value": "{{business1099Q}}"
								},
								{
									"key": "TINType",
									"value": "SSN",
									"disabled": true
								},
								{
									"key": "TIN",
									"value": "{{TIN}}",
									"disabled": true
								},
								{
									"key": "TaxYear",
									"value": "2022",
									"disabled": true
								},
								{
									"key": "Page",
									"value": "1",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "10",
									"disabled": true
								},
								{
									"key": "EfileStatus",
									"value": "ALL",
									"disabled": true
								},
								{
									"key": "FromDate",
									"value": "05-05-2023",
									"disabled": true
								},
								{
									"key": "ToDate",
									"value": "05-20-2023",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Check the status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(`${responseData.Errors[0].Message}`, function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.be.oneOf([\"Invalid Submission Id\", \"Add a active webhook url\"]);\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Q/Getpdf?RecordIds={{record1099Q}}&SubmissionId={{submission1099Q}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Q",
								"Getpdf"
							],
							"query": [
								{
									"key": "RecordIds",
									"value": "{{record1099Q}}"
								},
								{
									"key": "SubmissionId",
									"value": "{{submission1099Q}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"    });\r",
									"    pm.test(\"SubmissionId is invalid\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"SubmissionId is invalid\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Q/validate?RecordIds={{record1099Q}}&SubmissionId={{submission1099Q}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Q",
								"validate"
							],
							"query": [
								{
									"key": "RecordIds",
									"value": "{{record1099Q}}"
								},
								{
									"key": "SubmissionId",
									"value": "{{submission1099Q}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "transmit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into a JSON object\r",
									"const responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// Check the StatusCode and perform tests accordingly\r",
									"if (pm.response.code === 200) {\r",
									"    // Check if the response contains the Form1099Records object\r",
									"\r",
									"    // Check the SuccessRecords status\r",
									"    pm.test(\"SuccessRecords -> FederalReturn status is Transmitted\", function () {\r",
									"        const successRecords = responseJson.Form1099Records.SuccessRecords;\r",
									"        pm.expect(successRecords[0].Status).to.be.oneOf([\"Transmitted\", \"TRANSMITTED\"]);\r",
									"    });\r",
									"\r",
									"    // Check the OnlineAccess status\r",
									"    pm.test(\"OnlineAccess status is ORDER_CREATED\", function () {\r",
									"        const onlineAccess = responseJson.Form1099Records.SuccessRecords[0].OnlineAccess;\r",
									"        pm.expect(onlineAccess.Status).to.be.oneOf([\"ORDER_CREATED\"]);\r",
									"    });\r",
									"\r",
									"        const postal = responseJson.Form1099Records.SuccessRecords[0].Postal;\r",
									"    pm.test(\"Postal status is ORDER_CREATED\", function () {\r",
									"\r",
									"        pm.expect(postal.Status).to.be.oneOf([\"sent\", \"SENT\",\"RECEIVED\", \"received\"]);\r",
									"    });\r",
									"\r",
									"    \r",
									"} else if (pm.response.code === 404) {\r",
									"    // Handle 404 status code - Not Found\r",
									"    pm.test(\"Resource not found - 404\", function () {\r",
									"        // Add your specific tests for the 404 scenario\r",
									"        // For example: pm.expect(responseJson.errorMessage).to.equal(\"Resource not found\");\r",
									"    });\r",
									"} else if (pm.response.code === 500) {\r",
									"    // Handle 500 status code - Internal Server Error\r",
									"    pm.test(\"Internal Server Error - 500\", function () {\r",
									"        // Add your specific tests for the 500 scenario\r",
									"        // For example: pm.expect(responseJson.errorDetails).to.exist;\r",
									"    });\r",
									"} else if(pm.response.code === 400){\r",
									"    // Handle other status codes\r",
									"    pm.test(\"Submission Id is already transmitted\", function(){\r",
									"        let data=responseJson.Errors[0]\r",
									"         pm.expect(data.Message).to.be.equal( \"Submission Id is already transmitted\");\r",
									"        })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"SubmissionId\": \"{{submission1099Q}}\",\r\n  \"RecordId\": [\r\n    \"{{record1099Q}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Q/transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Q",
								"transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\", \"TRANSMITTED\"])\r",
									"        })\r",
									"\r",
									"        // Check StateReturns -> RecordStatus\r",
									"        \r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Q/status?RecordIds={{record1099Q}}&SubmissionId={{submission1099Q}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Q",
								"status"
							],
							"query": [
								{
									"key": "RecordIds",
									"value": "{{record1099Q}}"
								},
								{
									"key": "SubmissionId",
									"value": "{{submission1099Q}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099Q\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"record1099Q\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"business1099Q\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipient1099Q\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Axor LLC- {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"QFormData\": {\r\n                \"B1GrossDist\": \"5600\",\r\n                \"B2Earnings\": \"5000\",\r\n                \"B3Basis\": \"600\",\r\n                \"B4IsTTE2TTETransfer\": true,\r\n                \"B5DistFrom\": \"PRIVATE\",\r\n                \"B6IsDesignatedBenificiary\": true,\r\n                \"AccountNum\": 12345\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Q/create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Q",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200 & Status -> DELETED \", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 404){\r",
									"    pm.test(\"Status code is 404 & SubmissionId -> invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Enter a valid Submission Id\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"Enter a valid Submission Id\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099Q/Delete?RecordIds={{record1099Q}}&SubmissionId={{submission1099Q}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099Q",
								"Delete"
							],
							"query": [
								{
									"key": "RecordIds",
									"value": "{{record1099Q}}"
								},
								{
									"key": "SubmissionId",
									"value": "{{submission1099Q}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1099 OID - 1.7.3",
			"item": [
				{
					"name": "JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"\r",
									"  return encodedSource;\r",
									"};\r",
									"\r",
									"//To generate Header and Payload\r",
									"\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"\r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-50\r",
									"};\r",
									"console.log(time);\r",
									"\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"\r",
									"//Client secret ID - To generate JWS\r",
									"\r",
									"var secretID = pm.environment.get('secret');\r",
									"\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"\r",
									"console.log(jws);\r",
									"\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							},
							{
								"key": "Content-Tye",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "{{Referer}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Form",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Warrenhood LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"OIDFormData\": {\r\n                \"B1OID\": 9000,\r\n                \"B2OtherPeriodicInt\": 10000,\r\n                \"B3EarlyWithdrawalPenalty\": 50,\r\n                \"B4FedTaxWH\": 4000,\r\n                \"B5MarketDisc\": 2000,\r\n                \"B6AcqPremium\": 1200,\r\n                \"B7Description\": \"To be checked\",\r\n                \"B8OIDOnUSTObligation\": 4000,\r\n                \"B9InvestExp\": 1000,\r\n                \"B10BondPremium\": 1000,\r\n                \"B11TaxExemptOID\": 2000,\r\n                \"IsFATCA\": false,\r\n                \"Is2ndTINnot\": false,\r\n                \"AccountNum\": \"20123130000009000001\",\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"WV\",\r\n                        \"StateWH\": 257.94,\r\n                        \"StateIdNum\": \"99999999\"\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"ID\",\r\n                        \"StateWH\": 15,\r\n                        \"StateIdNum\": \"999999999\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099oid/create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099oid",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099oid\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"record1099oid\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"business1099oid\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipient1099oid\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									"pm.environment.set(\"payerref\", responseJSON.PayerRef);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Twilight LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"OIDFormData\": {\r\n                \"B1OID\": 9000,\r\n                \"B2OtherPeriodicInt\": 10000,\r\n                \"B3EarlyWithdrawalPenalty\": 50,\r\n                \"B4FedTaxWH\": 4000,\r\n                \"B5MarketDisc\": 2000,\r\n                \"B6AcqPremium\": 1200,\r\n                \"B7Description\": \"To be checked\",\r\n                \"B8OIDOnUSTObligation\": 4000,\r\n                \"B9InvestExp\": 1000,\r\n                \"B10BondPremium\": 1000,\r\n                \"B11TaxExemptOID\": 2000,\r\n                \"IsFATCA\": false,\r\n                \"Is2ndTINnot\": false,\r\n                \"AccountNum\": \"20123130000009000001\",\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"WV\",\r\n                        \"StateWH\": 257.94,\r\n                        \"StateIdNum\": \"99999999\"\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"ID\",\r\n                        \"StateWH\": 15,\r\n                        \"StateIdNum\": \"999999999\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099oid/create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099oid",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"console.log(\"responseJSON\", responseJSON.Form1099Records.SubmissionManiFest)\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.Form1099Records.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"TaxYear\", responseJSON.Form1099Records.SubmissionManiFest.TaxYear);\r",
									"pm.environment.set(\"payerref\", responseJSON.Form1099Records.ReturnHeader.Business.PayerRef);\r",
									"pm.environment.set(\"TIN\", responseJSON.Form1099Records.ReturnData[0].Recipient.TIN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099oid/get?SubmissionId={{submission1099oid}}&RecordIds={{record1099oid}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099oid",
								"get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099oid}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099oid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": \"{{submission1099oid}}\",\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": \"{{business1099oid}}\",\r\n            \"BusinessNm\": \"WanderLust LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{EINorSSN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": \"{{record1099oid}}\",\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": \"{{recipient1099oid}}\",\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{TIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"OIDFormData\": {\r\n                \"B1OID\": 100,\r\n                \"B2OtherPeriodicInt\": 100,\r\n                \"B3EarlyWithdrawalPenalty\": 50,\r\n                \"B4FedTaxWH\": 10,\r\n                \"B5MarketDisc\": 20,\r\n                \"B6AcqPremium\": 10,\r\n                \"B7Description\": \"To be checked\",\r\n                \"B8OIDOnUSTObligation\": 200,\r\n                \"B9InvestExp\": 10,\r\n                \"B10BondPremium\": 100,\r\n                \"B11TaxExemptOID\": 200,\r\n                \"IsFATCA\": false,\r\n                \"Is2ndTINnot\": false,\r\n                \"AccountNum\": \"20123130000009000001\",\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"WV\",\r\n                        \"StateWH\": 257.94,\r\n                        \"StateIdNum\": \"99999999\"\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"ID\",\r\n                        \"StateWH\": 15,\r\n                        \"StateIdNum\": \"999999999\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099oid/update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099oid",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"\r",
									"        // Check StateReturns -> RecordStatus\r",
									"        successRecord.StateReturns.forEach((data) => {\r",
									"\r",
									"            pm.test(`StateReturns -> RecordStatus is ${data.Status}`, function () {\r",
									"\r",
									"                pm.expect(data.Status).to.be.oneOf([\"Transmitted\", \"SENT_TO_AGENCY\", \"NOTCREATED\", \"State Filing Order Received\", \"UNDER_PROCESS\", \"SENT_TO_AGENCY\", \"Created\", \"ACCEPTED\", \"REJECTED\", \"State Filing Completed\"]\r",
									"                );\r",
									"            })\r",
									"\r",
									"        });\r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099oid/status?SubmissionId={{submission1099oid}}&RecordIds={{record1099oid}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099oid",
								"status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099oid}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099oid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(\"No records found\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"No records found\");\r",
									"    });\r",
									" // Additional tests for a not found response\r",
									"}else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099oid/list?BusinessId={{business1099oid}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099oid",
								"list"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099oid}}",
									"disabled": true
								},
								{
									"key": "BusinessId",
									"value": "{{business1099oid}}"
								},
								{
									"key": "TIN",
									"value": "{{TIN}}",
									"disabled": true
								},
								{
									"key": "TINType",
									"value": "SSN",
									"disabled": true
								},
								{
									"key": "TaxYear",
									"value": "2022",
									"disabled": true
								},
								{
									"key": "Page",
									"value": "10",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "1",
									"disabled": true
								},
								{
									"key": "EfileStatus",
									"value": "CREATED",
									"disabled": true
								},
								{
									"key": "FromDate",
									"value": "04-21-2023",
									"disabled": true
								},
								{
									"key": "ToDate",
									"value": "05-27-2023",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET pdf",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Check the status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(`${responseData.Errors[0].Message}`, function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.be.oneOf([\"Invalid Submission Id\", \"Add a active webhook url\"]);\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099oid/getpdf?SubmissionId={{submission1099oid}}&RecordIds={{record1099oid}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099oid",
								"getpdf"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099oid}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099oid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"    });\r",
									"    pm.test(\"SubmissionId is invalid\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"SubmissionId is invalid\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099oid/Validate?SubmissionId={{submission1099oid}}&RecordIds={{record1099oid}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099oid",
								"Validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099oid}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099oid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into a JSON object\r",
									"const responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// Check the StatusCode and perform tests accordingly\r",
									"if (pm.response.code === 200) {\r",
									"    // Check if the response contains the Form1099Records object\r",
									"\r",
									"    // Check the SuccessRecords status\r",
									"    pm.test(\"SuccessRecords -> FederalReturn status is Transmitted\", function () {\r",
									"        const successRecords = responseJson.Form1099Records.SuccessRecords;\r",
									"        pm.expect(successRecords[0].Status).to.be.oneOf([\"Transmitted\"]);\r",
									"    });\r",
									"\r",
									"    // Check the OnlineAccess status\r",
									"    pm.test(\"OnlineAccess status is ORDER_CREATED\", function () {\r",
									"        const onlineAccess = responseJson.Form1099Records.SuccessRecords[0].OnlineAccess;\r",
									"        pm.expect(onlineAccess.Status).to.be.oneOf([\"ORDER_CREATED\"]);\r",
									"    });\r",
									"\r",
									"    const stateReturns = responseJson.Form1099Records.SuccessRecords[0].StateReturns;\r",
									"    stateReturns.forEach((data, index) => {\r",
									"        // Check the StateReturns status\r",
									"        pm.test(`StateReturns${stateReturns.length > 1 ? `-${index+1}` : ` `}status is Transmitted`, function () {\r",
									"            pm.expect(data.RecordStatus).to.be.oneOf([\"Transmitted\"]);\r",
									"        })\r",
									"    });\r",
									"} else if (pm.response.code === 404) {\r",
									"    // Handle 404 status code - Not Found\r",
									"    pm.test(\"Resource not found - 404\", function () {\r",
									"        // Add your specific tests for the 404 scenario\r",
									"        // For example: pm.expect(responseJson.errorMessage).to.equal(\"Resource not found\");\r",
									"    });\r",
									"} else if (pm.response.code === 500) {\r",
									"    // Handle 500 status code - Internal Server Error\r",
									"    pm.test(\"Internal Server Error - 500\", function () {\r",
									"        // Add your specific tests for the 500 scenario\r",
									"        // For example: pm.expect(responseJson.errorDetails).to.exist;\r",
									"    });\r",
									"} else if(pm.response.code === 400){\r",
									"    // Handle other status codes\r",
									"    pm.test(\"Submission Id is already transmitted\", function(){\r",
									"        let data=responseJson.Errors[0]\r",
									"         pm.expect(data.Message).to.be.equal( \"Submission Id is already transmitted\");\r",
									"        })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"SubmissionId\": \"{{submission1099oid}}\",\r\n  \"RecordId\": \"{{record1099oid}}\"\r\n  \r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099oid/Transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099oid",
								"Transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submission1099oid\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"record1099oid\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"business1099oid\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipient1099oid\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									"pm.environment.set(\"payerref\", responseJSON.PayerRef);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Black Pink LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"OIDFormData\": {\r\n                \"B1OID\": 9000,\r\n                \"B2OtherPeriodicInt\": 10000,\r\n                \"B3EarlyWithdrawalPenalty\": 50,\r\n                \"B4FedTaxWH\": 4000,\r\n                \"B5MarketDisc\": 2000,\r\n                \"B6AcqPremium\": 1200,\r\n                \"B7Description\": \"To be checked\",\r\n                \"B8OIDOnUSTObligation\": 4000,\r\n                \"B9InvestExp\": 1000,\r\n                \"B10BondPremium\": 1000,\r\n                \"B11TaxExemptOID\": 2000,\r\n                \"IsFATCA\": false,\r\n                \"Is2ndTINnot\": false,\r\n                \"AccountNum\": \"20123130000009000001\",\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"WV\",\r\n                        \"StateWH\": 257.94,\r\n                        \"StateIdNum\": \"99999999\"\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"ID\",\r\n                        \"StateWH\": 15,\r\n                        \"StateIdNum\": \"999999999\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099oid/create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099oid",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200 & Status -> DELETED \", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 404){\r",
									"    pm.test(\"Status code is 404 & SubmissionId -> invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Enter a valid Submission Id\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"Enter a valid Submission Id\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/Form1099oid/delete?SubmissionId={{submission1099oid}}&RecordIds={{record1099oid}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099oid",
								"delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submission1099oid}}"
								},
								{
									"key": "RecordIds",
									"value": "{{record1099oid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1099 INT - 1.7.3",
			"item": [
				{
					"name": "JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"\r",
									"  return encodedSource;\r",
									"};\r",
									"\r",
									"//To generate Header and Payload\r",
									"\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"\r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-50\r",
									"};\r",
									"console.log(time);\r",
									"\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"\r",
									"//Client secret ID - To generate JWS\r",
									"\r",
									"var secretID = pm.environment.get('secret');\r",
									"\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"\r",
									"console.log(jws);\r",
									"\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							},
							{
								"key": "Content-Tye",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "{{Referer}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Air Marshall LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"INTFormData\": {\r\n                \"PayerRTN\": 886987867,\r\n                \"B1IntIncome\": 90.00,\r\n                \"B2EarlyWithdrawPenalty\": 78.00,\r\n                \"B3InterestOnUS\": 98.00,\r\n                \"B4FedIncomeTaxWH\": 56.00,\r\n                \"B5InvestExp\": 89.00,\r\n                \"B6ForeignTaxPaid\": 77.00,\r\n                \"B7ForeignCountry\": \"jgfghdtdyttd\",\r\n                \"B8TaxExemptInterest\": 99.00,\r\n                \"B9BondInterest\": 22.00,\r\n                \"B10MarketDiscount\": 999.00,\r\n                \"B11BondPre\": 9999.00,\r\n                \"B12BondPreOnTreasOblig\": 877.00,\r\n                \"B13BondPreOnTaxExempt\": 9999.00,\r\n                \"B14CUSIPno\": \"87JJ767\",\r\n                \"IsFATCA\": true,\r\n                \"Is2ndTINnot\": true,\r\n                \"AccountNum\": \"20123130000009000001\",\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"PA\",\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateWH\": 15,\r\n                        \"StateIncome\": 160.36\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"AZ\",\r\n                        \"StateIdNum\": \"99-9999999\",\r\n                        \"StateWH\": 17,\r\n                        \"StateIncome\": 160.36\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099INT/ValidateForm",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099INT",
								"ValidateForm"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submissionint\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"recordint\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"businessint\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipientint\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Floral World LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"INTFormData\": {\r\n                \"PayerRTN\": 758876654,\r\n                \"B1IntIncome\": 7910.00,\r\n                \"B2EarlyWithdrawPenalty\": 780.00,\r\n                \"B3InterestOnUS\": 198.00,\r\n                \"B4FedIncomeTaxWH\": 356.00,\r\n                \"B5InvestExp\": 189.00,\r\n                \"B6ForeignTaxPaid\": 692,\r\n                \"B7ForeignCountry\": \"Carribean Islands in Madagascar Europeos\",\r\n                \"B8TaxExemptInterest\": 3299.00,\r\n                \"B9BondInterest\": 2250.97,\r\n                \"B10MarketDiscount\": 1999.00,\r\n                \"B11BondPre\": 10000.00,\r\n                \"B12BondPreOnTreasOblig\": 5507.07,\r\n                \"B13BondPreOnTaxExempt\": 6199.76,\r\n                \"B14CUSIPno\": \"MS82883\",\r\n                \"IsFATCA\": true,\r\n                \"Is2ndTINnot\": true,\r\n                \"AccountNum\": \"20123130000009000001\",\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"PA\",\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateWH\": 15\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"AZ\",\r\n                        \"StateIdNum\": \"99-9999999\",\r\n                        \"StateWH\": 17\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099INT/create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099INT",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.Form1099Records.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"TaxYear\", responseJSON.Form1099Records.SubmissionManifest.TaxYear);\r",
									"pm.environment.set(\"payerref\", responseJSON.Form1099Records.ReturnHeader.Business.PayerRef);\r",
									"pm.environment.set(\"TIN\", responseJSON.Form1099Records.ReturnData[0].Recipient.TIN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/form1099INT/Get?SubmissionId={{submissionint}}&RecordIds={{recordint}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099INT",
								"Get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionint}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordint}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": \"{{submissionint}}\",\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": \"{{businessint}}\",\r\n            \"BusinessNm\": \"Blink LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{EINorSSN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": \"{{recordint}}\",\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": \"{{recipientint}}\",\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{TIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"INTFormData\": {\r\n                \"PayerRTN\": 886864517,\r\n                \"B1IntIncome\": 1990.79,\r\n                \"B2EarlyWithdrawPenalty\": 78.00,\r\n                \"B3InterestOnUS\": 98.00,\r\n                \"B4FedIncomeTaxWH\": 56.00,\r\n                \"B5InvestExp\": 89.00,\r\n                \"B6ForeignTaxPaid\": 77.00,\r\n                \"B7ForeignCountry\": \"Carribean Islands in Madagascar Europeos\",\r\n                \"B8TaxExemptInterest\": 99.00,\r\n                \"B9BondInterest\": 22.00,\r\n                \"B10MarketDiscount\": 999.00,\r\n                \"B11BondPre\": 9999.00,\r\n                \"B12BondPreOnTreasOblig\": 877.00,\r\n                \"B13BondPreOnTaxExempt\": 9999.00,\r\n                \"B14CUSIPno\": \"87J58187\",\r\n                \"IsFATCA\": true,\r\n                \"Is2ndTINnot\": true,\r\n                \"AccountNum\": \"20123130000009000767\",\r\n                \"States\": [\r\n                    {\r\n                     \"StateCd\": \"PA\",\r\n                     \"StateWH\": 58.56,\r\n                     \"StateIdNum\": \"47693823\"\r\n                    },\r\n                    {\r\n                     \"StateCd\": \"AZ\",\r\n                     \"StateWH\": 175.45,\r\n                     \"StateIdNum\": \"59-2874823\"\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/form1099INT/update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099INT",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\",\"CREATED\", \"Transmitted\",\"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"\r",
									"        // Check StateReturns -> RecordStatus\r",
									"        successRecord.StateReturns.forEach((data) => {\r",
									"\r",
									"            pm.test(`StateReturns -> RecordStatus is ${data.Status}`, function () {\r",
									"\r",
									"                pm.expect(data.Status).to.be.oneOf([\"Transmitted\", \"SENT_TO_AGENCY\", \"NOTCREATED\", \"State Filing Order Received\", \"UNDER_PROCESS\", \"SENT_TO_AGENCY\", \"Created\", \"ACCEPTED\", \"REJECTED\", \"State Filing Completed\"]\r",
									"                );\r",
									"            })\r",
									"\r",
									"        });\r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"        // Check Postal -> Status\r",
									"        pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"            pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\"]);\r",
									"        });\r",
									"\r",
									"    }\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{accesstoken}}"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/form1099INT/Status?SubmissionId={{submissionint}}&RecordIds={{recordint}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099INT",
								"Status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionint}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordint}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(\"No records found\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"No records found\");\r",
									"    });\r",
									" // Additional tests for a not found response\r",
									"}else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099INT/List?SubmissionId={{submissionint}}&BusinessId={{businessint}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099INT",
								"List"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionint}}"
								},
								{
									"key": "BusinessId",
									"value": "{{businessint}}"
								},
								{
									"key": "TINType",
									"value": "EIN",
									"disabled": true
								},
								{
									"key": "TIN",
									"value": "092275349",
									"disabled": true
								},
								{
									"key": "TaxYear",
									"value": "2022",
									"disabled": true
								},
								{
									"key": "Page",
									"value": "",
									"disabled": true
								},
								{
									"key": "PageSize",
									"value": "",
									"disabled": true
								},
								{
									"key": "EfileStatus",
									"value": "Transmitted",
									"disabled": true
								},
								{
									"key": "FromDate",
									"value": "",
									"disabled": true
								},
								{
									"key": "ToDate",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get PDF",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Check the status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(`${responseData.Errors[0].Message}`, function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.be.oneOf([\"Invalid Submission Id\", \"Add a active webhook url\"]);\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{accesstoken}}"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099INT/GetPDF?SubmissionId={{submissionint}}&RecordIds={{recordint}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099INT",
								"GetPDF"
							],
							"query": [
								{
									"key": "TINMaskType",
									"value": "UNMASKED",
									"disabled": true
								},
								{
									"key": "SubmissionId",
									"value": "{{submissionint}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordint}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"    });\r",
									"    pm.test(\"SubmissionId is invalid\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"SubmissionId is invalid\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099INT/Validate?SubmissionId={{submissionint}}&RecordIds={{recordint}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099INT",
								"Validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionint}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordint}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into a JSON object\r",
									"const responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// Check the StatusCode and perform tests accordingly\r",
									"if (pm.response.code === 200) {\r",
									"    // Check if the response contains the Form1099Records object\r",
									"\r",
									"    // Check the SuccessRecords status\r",
									"    pm.test(\"SuccessRecords -> FederalReturn status is Transmitted\", function () {\r",
									"        const successRecords = responseJson.Form1099Records.SuccessRecords;\r",
									"        pm.expect(successRecords[0].Status).to.be.oneOf([\"Transmitted\"]);\r",
									"    });\r",
									"\r",
									"    // Check the OnlineAccess status\r",
									"    pm.test(\"OnlineAccess status is ORDER_CREATED\", function () {\r",
									"        const onlineAccess = responseJson.Form1099Records.SuccessRecords[0].OnlineAccess;\r",
									"        pm.expect(onlineAccess.Status).to.be.oneOf([\"ORDER_CREATED\"]);\r",
									"    });\r",
									"\r",
									"    const stateReturns = responseJson.Form1099Records.SuccessRecords[0].StateReturns;\r",
									"    stateReturns.forEach((data, index) => {\r",
									"        // Check the StateReturns status\r",
									"        pm.test(`StateReturns${stateReturns.length > 1 ? `-${index+1}` : ` `}status is Transmitted`, function () {\r",
									"            pm.expect(data.RecordStatus).to.be.oneOf([\"Transmitted\"]);\r",
									"        })\r",
									"    });\r",
									"} else if (pm.response.code === 404) {\r",
									"    // Handle 404 status code - Not Found\r",
									"    pm.test(\"Resource not found - 404\", function () {\r",
									"        // Add your specific tests for the 404 scenario\r",
									"        // For example: pm.expect(responseJson.errorMessage).to.equal(\"Resource not found\");\r",
									"    });\r",
									"} else if (pm.response.code === 500) {\r",
									"    // Handle 500 status code - Internal Server Error\r",
									"    pm.test(\"Internal Server Error - 500\", function () {\r",
									"        // Add your specific tests for the 500 scenario\r",
									"        // For example: pm.expect(responseJson.errorDetails).to.exist;\r",
									"    });\r",
									"} else if(pm.response.code === 400){\r",
									"    // Handle other status codes\r",
									"    pm.test(\"Submission Id is already transmitted\", function(){\r",
									"        let data=responseJson.Errors[0]\r",
									"         pm.expect(data.Message).to.be.equal( \"Submission Id is already transmitted\");\r",
									"        })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"SubmissionId\": \"{{submissionint}}\",\r\n  \"RecordIds\": [\r\n    \"{{recordint}}\"\r\n  ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{host-1.7.3}}/form1099INT/Transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099INT",
								"Transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"submissionint\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"recordint\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"businessint\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"recipientint\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "547dc15d-23de-43c1-9302-d001bb338954",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"Big Hit LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n            \"INTFormData\": {\r\n                \"PayerRTN\": 758876654,\r\n                \"B1IntIncome\": 7910.00,\r\n                \"B2EarlyWithdrawPenalty\": 780.00,\r\n                \"B3InterestOnUS\": 198.00,\r\n                \"B4FedIncomeTaxWH\": 356.00,\r\n                \"B5InvestExp\": 189.00,\r\n                \"B6ForeignTaxPaid\": 692,\r\n                \"B7ForeignCountry\": \"Carribean Islands in Madagascar Europeos\",\r\n                \"B8TaxExemptInterest\": 3299.00,\r\n                \"B9BondInterest\": 2250.97,\r\n                \"B10MarketDiscount\": 1999.00,\r\n                \"B11BondPre\": 10000.00,\r\n                \"B12BondPreOnTreasOblig\": 5507.07,\r\n                \"B13BondPreOnTaxExempt\": 6199.76,\r\n                \"B14CUSIPno\": \"MS82883\",\r\n                \"IsFATCA\": true,\r\n                \"Is2ndTINnot\": true,\r\n                \"AccountNum\": \"20123130000009000001\",\r\n                \"States\": [\r\n                    {\r\n                        \"StateCd\": \"PA\",\r\n                        \"StateIdNum\": \"99999999\",\r\n                        \"StateWH\": 15\r\n                    },\r\n                    {\r\n                        \"StateCd\": \"AZ\",\r\n                        \"StateIdNum\": \"99-9999999\",\r\n                        \"StateWH\": 17\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form1099INT/create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form1099INT",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200 & Status -> DELETED \", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 404){\r",
									"    pm.test(\"Status code is 404 & SubmissionId -> invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Enter a valid Submission Id\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"Enter a valid Submission Id\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/form1099INT/Delete?SubmissionId={{submissionint}}&RecordIds={{recordint}}&Referer=547dc15d-23de-43c1-9302-d001bb338954",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form1099INT",
								"Delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionint}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordint}}"
								},
								{
									"key": "Referer",
									"value": "547dc15d-23de-43c1-9302-d001bb338954"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1099 - W2G - 1.7.3",
			"item": [
				{
					"name": "JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"\r",
									"  return encodedSource;\r",
									"};\r",
									"\r",
									"//To generate Header and Payload\r",
									"\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"\r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-50\r",
									"};\r",
									"console.log(time);\r",
									"\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"\r",
									"//Client secret ID - To generate JWS\r",
									"\r",
									"var secretID = pm.environment.get('secret');\r",
									"\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"\r",
									"console.log(jws);\r",
									"\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							},
							{
								"key": "Content-Tye",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Referer",
								"value": "{{Referer}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"RLLYROF LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n           \"W2GFormData\": {\r\n               \"B1ReportableWinnings\": 50000.65,\r\n               \"B2DateWon\": \"02/01/2022\",\r\n               \"B3WagerType\": \"DOG_RACETRACK\",\r\n               \"B4FedTaxWH\": 500.82,\r\n               \"B5Txn\": null,\r\n               \"B6Race\": \"Horse\",\r\n               \"B7WinningsIdWagers\": 700.89,\r\n               \"B8Cashier\": \"Yugyu\",\r\n               \"B10Window\": 78.35,\r\n               \"B11FirstId\": \"GA93393935\",\r\n               \"B12SecondId\": \"NR935IIT935\",\r\n               \"States\": {\r\n                   \"StateCd\": \"CA\",\r\n                   \"StateIdNum\": \"999-9999-9\",\r\n                   \"StateWinnings\": 1000.56,\r\n                   \"StateWH\": 100.28,\r\n                   \"LocalWinnings\": 300.23,\r\n                   \"LocalWH\": 100.45,\r\n                   \"LocalityNm\": \"Pristine\"\r\n               }\r\n           }\r\n       }\r\n   ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2G/ValidateForm",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2G",
								"ValidateForm"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"var responseJSON;\r",
									"responseJSON = JSON.parse(responseBody);\r",
									"pm.environment.set(\"businessW2G\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"submissionW2G\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"recordW2G\", responseJSON.FormW2GRecords.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"recipientW2G\", responseJSON.FormW2GRecords.SuccessRecords[0].RecipientId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"RLLYROF LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n           \"W2GFormData\": {\r\n               \"B1ReportableWinnings\": 50000.65,\r\n               \"B2DateWon\": \"02/01/2022\",\r\n               \"B3WagerType\": \"DOG_RACETRACK\",\r\n               \"B4FedTaxWH\": 500.82,\r\n               \"B5Txn\": null,\r\n               \"B6Race\": \"Horse\",\r\n               \"B7WinningsIdWagers\": 700.89,\r\n               \"B8Cashier\": \"Yugyu\",\r\n               \"B10Window\": 78.35,\r\n               \"B11FirstId\": \"GA93393935\",\r\n               \"B12SecondId\": \"NR935IIT935\",\r\n               \"States\": {\r\n                   \"StateCd\": \"WV\",\r\n                   \"StateIdNum\": \"99999999\",\r\n                   \"StateWinnings\": 1000.56,\r\n                   \"StateWH\": 100.28,\r\n                   \"LocalWinnings\": 300.23,\r\n                   \"LocalWH\": 100.45,\r\n                   \"LocalityNm\": \"Pristine\"\r\n               }\r\n           }\r\n       }\r\n   ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2G/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2G",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.FormW2GRecords.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"TaxYear\", responseJSON.FormW2GRecords.SubmissionManifest.TaxYear);\r",
									"pm.environment.set(\"payerref\", responseJSON.FormW2GRecords.ReturnHeader.Business.PayerRef);\r",
									"pm.environment.set(\"TIN\", responseJSON.FormW2GRecords.ReturnData[0].Recipient.TIN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2G/Get?SubmissionId={{submissionW2G}}&RecordIds={{recordW2G}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2G",
								"Get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionW2G}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordW2G}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"var responseJSON;\r",
									"responseJSON = JSON.parse(responseBody);\r",
									"pm.environment.set(\"businessW2G\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"submissionW2G\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"recordW2G\", responseJSON.Form1099Records.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"recipientW2G\", responseJSON.Form1099Records.SuccessRecords[0].RecipientId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": \"{{submissionW2G}}\",\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": true,\r\n        \"ScheduleFiling\": {\r\n            \"EfileDate\": \"12/31/2023\"\r\n        }\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": \"{{businessW2G}}\"\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": \"{{recordW2G}}\",\r\n            \"SequenceId\": \"1\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": \"{{recipientW2G}}\"\r\n            },\r\n            \"W2GFormData\": {\r\n                \"B1ReportableWinnings\": 50000.65,\r\n                \"B2DateWon\": \"02/01/2022\",\r\n                \"B3WagerType\": \"DOG_RACETRACK\",\r\n                \"B4FedTaxWH\": 46.15,\r\n                \"B5Txn\": null,\r\n                \"B6Race\": \"Horse\",\r\n                \"B7WinningsIdWagers\": 700,\r\n                \"B8Cashier\": 45,\r\n                \"B10Window\": 78,\r\n                \"B11FirstId\": \"GA93393935\",\r\n                \"B12SecondId\": \"NR935IIT935\",\r\n                \"States\": {\r\n                    \"StateCd\": \"CA\",\r\n                    \"StateIdNum\": \"999-9999-9\",\r\n                    \"StateWinnings\": 1000,\r\n                    \"StateWH\": 100,\r\n                    \"LocalWinnings\": 300.23,\r\n                    \"LocalWH\": 100.45,\r\n                    \"LocalityNm\": \"Pristine\"\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2G/Update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2G",
								"Update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"}else if(pm.response.code === 400){\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"    });\r",
									"    pm.test(\"SubmissionId is invalid\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"SubmissionId is invalid\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2G/Validate?SubmissionId={{submissionW2G}}&RecordIds={{recordW2G}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2G",
								"Validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionW2G}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordW2G}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get PDF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"// Check the status code\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(`${responseData.Errors[0].Message}`, function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.be.oneOf([\"Invalid Submission Id\", \"Add a active webhook url\"]);\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2G/Getpdf?SubmissionId={{submissionW2G}}&RecordIds={{recordW2G}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2G",
								"Getpdf"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionW2G}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordW2G}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let responseData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"    });\r",
									"    pm.test(\"No records found\", function () {\r",
									"        pm.expect(responseData.Errors[0].Message).to.equal(\"No records found\");\r",
									"    });\r",
									" // Additional tests for a not found response\r",
									"}else {\r",
									"    pm.test(\"Status code is 401\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(401);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2G/List?SubmissionId={{submissionW2G}}&BusinessId={{businessW2G}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2G",
								"List"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionW2G}}"
								},
								{
									"key": "BusinessId",
									"value": "{{businessW2G}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(200);\r",
									"    });\r",
									"\r",
									"    // Check if SuccessRecords array exists and is not empty\r",
									"    if (jsonData.Form1099Records.SuccessRecords.length > 0) {\r",
									"        var successRecord = jsonData.Form1099Records.SuccessRecords[0];\r",
									"\r",
									"        // Check FederalReturn -> Status\r",
									"        pm.test(`FederalReturn -> Status -> ${successRecord.FederalReturn.Status} ${successRecord.FederalReturn.Status == \"REJECTED\" ? `& Error message -> ${successRecord.FederalReturn.Errors[0].Message}` : ``}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.FederalReturn.Status).to.be.oneOf([\"ACCEPTED\", \"\", \"CREATED\", \"Transmitted\", \"REJECTED\", \"Under Process\", \"Sent To Agency\"])\r",
									"        })\r",
									"\r",
									"\r",
									"\r",
									"        pm.test(`StateReturns -> RecordStatus is ${successRecord.StateReturns.Status}`, function () {\r",
									"\r",
									"            pm.expect(successRecord.StateReturns.Status).to.be.oneOf([\"Transmitted\", \"SENT_TO_AGENCY\", \"NOTCREATED\", \"State Filing Order Received\", \"UNDER_PROCESS\", \"SENT_TO_AGENCY\", \"Created\", \"ACCEPTED\", \"REJECTED\", \"CREATED\", \"State Filing Completed\"]\r",
									"            );\r",
									"        })\r",
									"\r",
									"        // Check OnlineAccess -> Status\r",
									"        pm.test(`OnlineAccess -> Status is ${successRecord.OnlineAccess.Status}`, function () {\r",
									"            pm.expect(successRecord.OnlineAccess.Status).to.be.oneOf([\"EMAIL_SENT\", \"VIEWED\", \"DOWNLOADED_FORM\", \"ORDER_RECEIVED\", \"CREATED\"]);\r",
									"        });\r",
									"\r",
									"    //     // Check Postal -> Status\r",
									"    //     pm.test(`Postal -> Status is ${successRecord.Postal.Status}`, function () {\r",
									"    //         if (successRecord.Postal.Status === null) {\r",
									"    //             // If the status is null, this test will fail with an appropriate error message.\r",
									"    //             pm.expect.fail(\"Status is null\");\r",
									"    //         } else {\r",
									"    //             // If the status is not null, check if it is one of the expected values.\r",
									"    //             pm.expect(successRecord.Postal.Status).to.be.oneOf([\"RECEIVED\", \"SENT\", \"CREATED\", \"ORDER_SENT\", \"ORDER_RECEIVED\", \"NOT_CREATED\"]);\r",
									"    //         }\r",
									"    //     });\r",
									"    // Additional tests for a successful response\r",
									"} else if (pm.response.code === 404) {\r",
									"    pm.test(\"Status code is 404 --> Submission Id is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(404);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"Submission Id is invalid\")\r",
									"    });\r",
									"    // Additional tests for a not found response\r",
									"} else if (pm.response.code === 400) {\r",
									"    pm.test(\"Status code is 400 --> SubmissionId  is invalid\", function () {\r",
									"        pm.expect(pm.response.code).to.equal(400);\r",
									"        pm.expect(jsonData.Errors[0].Message).to.be.equal(\"SubmissionId is invalid\")\r",
									"    });\r",
									"}\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{accesstoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/formW2G/Status?SubmissionId={{submissionW2G}}&RecordIds={{recordW2G}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"formW2G",
								"Status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionW2G}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordW2G}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body into a JSON object\r",
									"const responseJson = JSON.parse(responseBody);\r",
									"\r",
									"// Check the StatusCode and perform tests accordingly\r",
									"if (pm.response.code === 200) {\r",
									"    // Check if the response contains the FormW2GRecords object\r",
									"\r",
									"    // Check the SuccessRecords status\r",
									"    pm.test(\"SuccessRecords -> FederalReturn status is Transmitted\", function () {\r",
									"        const successRecords = responseJson.FormW2GRecords.SuccessRecords;\r",
									"        pm.expect(successRecords[0].Status).to.be.oneOf([\"Transmitted\"]);\r",
									"    });\r",
									"\r",
									"    // Check the OnlineAccess status\r",
									"    pm.test(\"OnlineAccess status is ORDER_CREATED\", function () {\r",
									"        const onlineAccess = responseJson.FormW2GRecords.SuccessRecords[0].OnlineAccess;\r",
									"        pm.expect(onlineAccess.Status).to.be.oneOf([\"ORDER_CREATED\"]);\r",
									"    });\r",
									"\r",
									"    const postal = responseJson.FormW2GRecords.SuccessRecords[0].Postal;\r",
									"    pm.test(\"Postal status is ORDER_CREATED\", function () {\r",
									"\r",
									"        pm.expect(postal.Status).to.be.oneOf([\"sent\", \"SENT\",\"RECEIVED\", \"received\"]);\r",
									"    });\r",
									"\r",
									"    const stateReturns = responseJson.FormW2GRecords.SuccessRecords[0].StateReturns;\r",
									"\r",
									"        // Check the StateReturns status\r",
									"        pm.test(`StateReturns status is ${stateReturns.RecordStatus}`, function () {\r",
									"            pm.expect(stateReturns.RecordStatus).to.be.oneOf([\"Transmitted\", \"NOTCREATED\"]);\r",
									"        })\r",
									"\r",
									"} else if (pm.response.code === 404) {\r",
									"    // Handle 404 status code - Not Found\r",
									"    pm.test(\"Resource not found - 404\", function () {\r",
									"        // Add your specific tests for the 404 scenario\r",
									"        // For example: pm.expect(responseJson.errorMessage).to.equal(\"Resource not found\");\r",
									"    });\r",
									"} else if (pm.response.code === 500) {\r",
									"    // Handle 500 status code - Internal Server Error\r",
									"    pm.test(\"Internal Server Error - 500\", function () {\r",
									"        // Add your specific tests for the 500 scenario\r",
									"        // For example: pm.expect(responseJson.errorDetails).to.exist;\r",
									"    });\r",
									"} else if(pm.response.code === 400){\r",
									"    // Handle other status codes\r",
									"    pm.test(\"Submission Id is already transmitted\", function(){\r",
									"        let data=responseJson.Errors[0]\r",
									"         pm.expect(data.Message).to.be.equal( \"Submission Id is already transmitted\");\r",
									"        })\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionId\": \"{{submissionW2G}}\",\r\n    \"RecordIds\": [\r\n        \"{{recordW2G}}\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2G/Transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2G",
								"Transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"var i = pm.environment.get('i')\r",
									"console.log(\"i\", i)\r",
									"i ? pm.environment.set('i', i+1) : pm.environment.set('i', 1);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"var responseJSON;\r",
									"responseJSON = JSON.parse(responseBody);\r",
									"pm.environment.set(\"businessW2G\", responseJSON.BusinessId);\r",
									"pm.environment.set(\"submissionW2G\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"recordW2G\", responseJSON.FormW2GRecords.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"recipientW2G\", responseJSON.FormW2GRecords.SuccessRecords[0].RecipientId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManifest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYear\": \"2022\",\r\n        \"IsFederalFiling\": true,\r\n        \"IsStateFiling\": true,\r\n        \"IsPostal\": true,\r\n        \"IsOnlineAccess\": true,\r\n        \"IsScheduleFiling\": false,\r\n        \"ScheduleFiling\": null\r\n    },\r\n    \"ReturnHeader\": {\r\n        \"Business\": {\r\n            \"BusinessId\": null,\r\n            \"BusinessNm\": \"RLLYROF LLC - {{i}}\",\r\n            \"PayerRef\": \"{{payerref}}\",\r\n            \"TradeNm\": \"SHERKS\",\r\n            \"IsEIN\": true,\r\n            \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n            \"Email\": \"Feroz@email.com\",\r\n            \"ContactNm\": \"NICK Molsen\",\r\n            \"Phone\": \"{{phoneNumber}}\",\r\n            \"PhoneExtn\": \"12345\",\r\n            \"Fax\": \"{{faxNumber}}\",\r\n            \"BusinessType\": \"ESTE\",\r\n            \"SigningAuthority\": {\r\n                \"Name\": \"John\",\r\n                \"Phone\": \"1234567890\",\r\n                \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n            },\r\n            \"KindOfEmployer\": \"FederalGovt\",\r\n            \"KindOfPayer\": \"REGULAR941\",\r\n            \"IsBusinessTerminated\": true,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": {\r\n                \"Address1\": \"3521 AIRPORT WAY\",\r\n                \"Address2\": \"UNIT 9\",\r\n                \"City\": \"FAIRBANKS\",\r\n                \"State\": \"AK\",\r\n                \"ZipCd\": \"99709\"\r\n            },\r\n            \"ForeignAddress\": {\r\n                \"Address1\": \"Bloyed Rd 15\",\r\n                \"Address2\": \"Sector 12\",\r\n                \"City\": \"ONTARIO\",\r\n                \"ProvinceOrStateNm\": \"TORENTO\",\r\n                \"Country\": \"CA\",\r\n                \"PostalCd\": \"SD1 465\"\r\n            }\r\n        }\r\n    },\r\n    \"ReturnData\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"IsPostal\": true,\r\n            \"IsOnlineAccess\": true,\r\n            \"SequenceId\": \"01\",\r\n            \"Recipient\": {\r\n                \"RecipientId\": null,\r\n                \"TINType\": \"EIN\",\r\n                \"TIN\": \"{{randomNumer_EIN}}\",\r\n                \"FirstPayeeNm\": \"JASON MAMOA\",\r\n                \"SecondPayeeNm\": \"RELIYA\",\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                },\r\n                \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"Phone\": \"{{phoneNumber}}\"\r\n            },\r\n           \"W2GFormData\": {\r\n               \"B1ReportableWinnings\": 50000.65,\r\n               \"B2DateWon\": \"02/01/2022\",\r\n               \"B3WagerType\": \"DOG_RACETRACK\",\r\n               \"B4FedTaxWH\": 500.82,\r\n               \"B5Txn\": null,\r\n               \"B6Race\": \"Horse\",\r\n               \"B7WinningsIdWagers\": 700.89,\r\n               \"B8Cashier\": \"Yugyu\",\r\n               \"B10Window\": 78.35,\r\n               \"B11FirstId\": \"GA93393935\",\r\n               \"B12SecondId\": \"NR935IIT935\",\r\n               \"States\": {\r\n                   \"StateCd\": \"CA\",\r\n                   \"StateIdNum\": \"999-9999-9\",\r\n                   \"StateWinnings\": 1000.56,\r\n                   \"StateWH\": 100.28,\r\n                   \"LocalWinnings\": 300.23,\r\n                   \"LocalWH\": 100.45,\r\n                   \"LocalityNm\": \"Pristine\"\r\n               }\r\n           }\r\n       }\r\n   ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/FormW2G/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"FormW2G",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var endpointURL = pm.request.url.toString().toLowerCase().replace(\"{{host}}\", '');\r",
									"endpointURL = endpointURL.replace('{{submission1099}}', pm.environment.get('submission1099'));\r",
									"endpointURL = endpointURL.replace('{{record1099}}', pm.environment.get('record1099'));\r",
									"const method = pm.request.method; \r",
									"console.log(endpointURL);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host-1.7.3}}/formW2G/Delete?SubmissionId={{submissionW2G}}&RecordIds={{recordW2G}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"formW2G",
								"Delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{submissionW2G}}"
								},
								{
									"key": "RecordIds",
									"value": "{{recordW2G}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1094 C & 1095 C - 1.7.3",
			"item": [
				{
					"name": "JWT - V2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"  return encodedSource;\r",
									"};\r",
									"//To generate Header and Payload\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-260\r",
									"};\r",
									"console.log(time);\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"//Client secret ID - To generate JWS\r",
									"var secretID = pm.environment.get('secret');\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"console.log(jws);\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"pm.environment.set('randomNumer_EIN', generateRandomEIN());\r",
									"pm.environment.set('randomNumer_EIN_1', generateRandomEIN());\r",
									"pm.environment.set('MemberEIN_1', generateRandomEIN());\r",
									"pm.environment.set('MemberEIN_2', generateRandomEIN());\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"pm.environment.set('randomNumer_SSN', generateRandomSSN());\r",
									"pm.environment.set('randomNumer_SSN_1', generateRandomSSN());\r",
									"pm.environment.set('randomNumer_SSN_2', generateRandomSSN());\r",
									"pm.environment.set('randomNumer_SSN_3', generateRandomSSN());\r",
									"pm.environment.set('randomNumer_SSN_4', generateRandomSSN());\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"SubmissionId_ACA\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"RecordId_ACA\", responseJSON.FormACARecords.SuccessRecords.RecordId);\r",
									"pm.environment.set(\"EmployeeId_ACA\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[0].EmployeeId);\r",
									"pm.environment.set(\"Form1095CId_ACA\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[0].Form1095CId);\r",
									"\r",
									"\r",
									"// \"Form1095SeqNum\": 1\r",
									"pm.environment.set(\"CoveredIndividualId_1\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[0].CoveredIndividualRecords[0].CoveredIndividualId);\r",
									"pm.environment.set(\"CoveredIndividualId_2\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[0].CoveredIndividualRecords[1].CoveredIndividualId);\r",
									"\r",
									"\r",
									"// \"Form1095SeqNum\": 2\r",
									"pm.environment.set(\"EmployeeId_ACA_2\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[1].EmployeeId);\r",
									"pm.environment.set(\"Form1095CId_ACA_2\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[1].Form1095CId);\r",
									"pm.environment.set(\"CoveredIndividualId_3\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[1].CoveredIndividualRecords[0].CoveredIndividualId);\r",
									"pm.environment.set(\"CoveredIndividualId_4\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[1].CoveredIndividualRecords[1].CoveredIndividualId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManiFest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYr\": \"2022\",\r\n        \"EmployeeCount\": 2\r\n    },\r\n    \"ACAForms\": {\r\n        \"ReturnHeader\": {\r\n            \"Business\": {\r\n                \"BusinessId\": null,\r\n                \"BusinessNm\": \"Floral World LLC - {{i}}\",\r\n                \"PayerRef\": \"{{payerref}}\",\r\n                \"TradeNm\": \"SHERKS\",\r\n                \"IsEIN\": true,\r\n                \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n                \"Email\": \"Feroz@email.com\",\r\n                \"ContactNm\": \"NICK Molsen\",\r\n                \"Phone\": \"{{phoneNumber}}\",\r\n                \"PhoneExtn\": \"12345\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"BusinessType\": \"ESTE\",\r\n                \"SigningAuthority\": {\r\n                    \"Name\": \"John\",\r\n                    \"Phone\": \"1234567890\",\r\n                    \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n                },\r\n                \"KindOfEmployer\": \"FederalGovt\",\r\n                \"KindOfPayer\": \"REGULAR941\",\r\n                \"IsBusinessTerminated\": true,\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                }\r\n            },\r\n            \"Form1094C\": {\r\n                \"Form1095CAttachedCnt\": 9,\r\n                \"AuthoritativeTransmittalInd\": true,\r\n                \"TotalForm1095CALEMemberCnt\": 6,\r\n                \"QualifyingOfferMethodInd\": true,\r\n                \"NinetyEightPctOfferMethodInd\": false,\r\n                \"AggregateGroupMemberInd\": true,\r\n                \"AggregateGroupInformation\": [\r\n                    {\r\n                        \"BusinessNm\": \"ABC\",\r\n                        \"BusinessNmCont\": \"Macrop Solutions\",\r\n                        \"MemberEIN\": \"{{MemberEIN_1}}\",\r\n                        \"FullTimeEmployeeCount\": 2\r\n                    },\r\n                    {\r\n                        \"BusinessNm\": \"Groove\",\r\n                        \"BusinessNmCont\": \"Nehres Company\",\r\n                        \"MemberEIN\": \"{{MemberEIN_2}}\",\r\n                        \"FullTimeEmployeeCount\": 2\r\n                    }\r\n                ],\r\n                \"ALEMemberInformation\": {\r\n                    \"AllTwelveMonthsInd\": false,\r\n                    \"TwelveMonths\": null,\r\n                    \"IndividualMonth\": [\r\n                        {\r\n                            \"Month\": \"2\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 10,\r\n                            \"TotalEmployeeCnt\": 11,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"1\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 10,\r\n                            \"TotalEmployeeCnt\": 11,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"3\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 10,\r\n                            \"TotalEmployeeCnt\": 11,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"4\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"5\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 10,\r\n                            \"TotalEmployeeCnt\": 11,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"6\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"7\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"8\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"9\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"10\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"11\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"12\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        }\r\n                    ]\r\n                },\r\n                \"DesignatedGovernmentEntityDetails\": null\r\n            }\r\n        },\r\n        \"ReturnData\": {\r\n            \"RecordId\": null,\r\n            \"Form1095C\": [\r\n                {\r\n                    \"EmployeeManifest\": {\r\n                        \"Form1095CId\": null,\r\n                        \"Form1095SeqNum\": \"1\"\r\n                    },\r\n                    \"Employee\": {\r\n                        \"EmployeeId\": null,\r\n                        \"SSN\": \"{{randomNumer_SSN_2}}\",\r\n                        \"FirstNm\": \"Steler\",\r\n                        \"MiddleNm\": \"Mixos\",\r\n                        \"LastNm\": \"Wernley\",\r\n                        \"Suffix\": \"Sr\",\r\n                        \"Email\": \"balaji.d+1@spantechnologyservices.com\",\r\n                        \"Fax\": \"4567891234\",\r\n                        \"Phone\": \"7412643261\",\r\n                        \"IsForeign\": false,\r\n                        \"USAddress\": {\r\n                            \"Address1\": \"1751 Kinsey Rd\",\r\n                            \"Address2\": \"Main St\",\r\n                            \"City\": \"Dothan\",\r\n                            \"State\": \"AL\",\r\n                            \"ZipCd\": \"36303\"\r\n                        },\r\n                        \"ForeignAddress\": null\r\n                    },\r\n                    \"EmployeeReturnDetails\": {\r\n                        \"EmployeeAgeOnJan1\": \"28\",\r\n                        \"StartMonthNumberCd\": \"06\",\r\n                        \"AllTwelveMonthsInd\": false,\r\n                        \"TwelveMonths\": null,\r\n                        \"IndividualMonth\": [\r\n                            {\r\n                                \"Month\": \"01\",\r\n                                \"OfferOfCoverage\": \"1A\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"02\",\r\n                                \"OfferOfCoverage\": \"1B\",\r\n                                \"EmployeeRequiredContribution\": 300,\r\n                                \"Section4980H\": \"2B\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"03\",\r\n                                \"OfferOfCoverage\": \"1C\",\r\n                                \"EmployeeRequiredContribution\": 300,\r\n                                \"Section4980H\": \"2C\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"04\",\r\n                                \"OfferOfCoverage\": \"1D\",\r\n                                \"EmployeeRequiredContribution\": 300,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"05\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"06\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"07\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"08\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"09\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"10\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"11\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"12\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            }\r\n                        ],\r\n                        \"IsSelfInsured\": true,\r\n                        \"CoveredIndividuals\": [\r\n                            {\r\n                                \"CoveredIndividualId\": null,\r\n                                \"PersonFirstNm\": \"Steler\",\r\n                                \"PersonMiddleNm\": \"Mixos\",\r\n                                \"PersonLastNm\": \"Wernley\",\r\n                                \"SSN\": \"{{randomNumer_SSN_2}}\",\r\n                                \"DOB\": null,\r\n                                \"MonthsCoverageOffered\": {\r\n                                    \"AllTwelveMonths\": true,\r\n                                    \"IndividualMonths\": null\r\n                                }\r\n                            },\r\n                            {\r\n                                \"CoveredIndividualId\": null,\r\n                                \"PersonFirstNm\": \"Lara\",\r\n                                \"PersonMiddleNm\": \"Clein\",\r\n                                \"PersonLastNm\": \"Tyslo\",\r\n                                \"SSN\": \"{{randomNumer_SSN_3}}\",\r\n                                \"DOB\": null,\r\n                                \"MonthsCoverageOffered\": {\r\n                                    \"AllTwelveMonths\": true,\r\n                                    \"IndividualMonths\": null\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    \"EmployeeManifest\": {\r\n                        \"Form1095CId\": null,\r\n                        \"Form1095SeqNum\": \"2\"\r\n                    },\r\n                    \"Employee\": {\r\n                        \"EmployeeId\": null,\r\n                        \"SSN\": \"{{randomNumer_SSN_1}}\",\r\n                        \"FirstNm\": \"Steler\",\r\n                        \"MiddleNm\": \"Mixos\",\r\n                        \"LastNm\": \"Wernley\",\r\n                        \"Suffix\": \"Sr\",\r\n                        \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                        \"Fax\": \"4567891234\",\r\n                        \"Phone\": \"7412643261\",\r\n                        \"IsForeign\": false,\r\n                        \"USAddress\": {\r\n                            \"Address1\": \"1751 Kinsey Rd\",\r\n                            \"Address2\": \"Main St\",\r\n                            \"City\": \"Dothan\",\r\n                            \"State\": \"AL\",\r\n                            \"ZipCd\": \"36303\"\r\n                        },\r\n                        \"ForeignAddress\": null\r\n                    },\r\n                    \"EmployeeReturnDetails\": {\r\n                        \"EmployeeAgeOnJan1\": \"28\",\r\n                        \"StartMonthNumberCd\": \"06\",\r\n                        \"AllTwelveMonthsInd\": false,\r\n                        \"TwelveMonths\": null,\r\n                        \"IndividualMonth\": [\r\n                            {\r\n                                \"Month\": \"01\",\r\n                                \"OfferOfCoverage\": \"1A\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"02\",\r\n                                \"OfferOfCoverage\": \"1B\",\r\n                                \"EmployeeRequiredContribution\": 300,\r\n                                \"Section4980H\": \"2B\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"03\",\r\n                                \"OfferOfCoverage\": \"1C\",\r\n                                \"EmployeeRequiredContribution\": 300,\r\n                                \"Section4980H\": \"2C\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"04\",\r\n                                \"OfferOfCoverage\": \"1D\",\r\n                                \"EmployeeRequiredContribution\": 300,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"05\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"06\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"07\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"08\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"09\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"10\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"11\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"12\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            }\r\n                        ],\r\n                        \"IsSelfInsured\": true,\r\n                        \"CoveredIndividuals\": [\r\n                            {\r\n                                \"CoveredIndividualId\": null,\r\n                                \"PersonFirstNm\": \"Steler\",\r\n                                \"PersonMiddleNm\": \"Mixos\",\r\n                                \"PersonLastNm\": \"Wernley\",\r\n                                \"SSN\": \"{{randomNumer_SSN_1}}\",\r\n                                \"DOB\": null,\r\n                                \"MonthsCoverageOffered\": {\r\n                                    \"AllTwelveMonths\": true,\r\n                                    \"IndividualMonths\": null\r\n                                }\r\n                            },\r\n                            {\r\n                                \"CoveredIndividualId\": null,\r\n                                \"PersonFirstNm\": \"Lara\",\r\n                                \"PersonMiddleNm\": \"Clein\",\r\n                                \"PersonLastNm\": \"Tyslo\",\r\n                                \"SSN\": \"{{randomNumer_SSN_4}}\",\r\n                                \"DOB\": null,\r\n                                \"MonthsCoverageOffered\": {\r\n                                    \"AllTwelveMonths\": true,\r\n                                    \"IndividualMonths\": null\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/v1.7.3/Form1095C/Create",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1.7.3",
								"Form1095C",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"BusinessId\", responseJSON.ACAForms.ReturnHeader.Business.BusinessId);\r",
									"pm.environment.set(\"TaxYr\", responseJSON.SubmissionManiFest.TaxYr);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.ACAForms.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"MemberEIN_1\", responseJSON.ACAForms.ReturnHeader.Form1094C.AggregateGroupInformation[0].MemberEIN);\r",
									"pm.environment.set(\"MemberEIN_2\", responseJSON.ACAForms.ReturnHeader.Form1094C.AggregateGroupInformation[1].MemberEIN);\r",
									"pm.environment.set(\"SSN\", responseJSON.ACAForms.ReturnData.Form1095C[0].Employee.SSN);\r",
									"pm.environment.set(\"SSN_1\", responseJSON.ACAForms.ReturnData.Form1095C[1].Employee.SSN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/v1.7.3/Form1095C/Get?SubmissionId={{SubmissionId_ACA}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1.7.3",
								"Form1095C",
								"Get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SubmissionId_ACA}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"pm.environment.set('randomNumer_EIN', generateRandomEIN());\r",
									"pm.environment.set('randomNumer_EIN_1', generateRandomEIN());\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"SubmissionId_ACA\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"RecordId_ACA\", responseJSON.FormACARecords.SuccessRecords.RecordId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManiFest\": {\r\n        \"SubmissionId\": \"{{SubmissionId_ACA}}\",\r\n        \"TaxYr\": \"{{TaxYr}}\",\r\n        \"EmployeeCount\": 1\r\n    },\r\n    \"ACAForms\": {\r\n        \"ReturnHeader\": {\r\n            \"Business\": {\r\n                \"BusinessId\": null,\r\n                \"BusinessNm\": \"Floral World LLC - {{i}}\",\r\n                \"PayerRef\": \"{{payerref}}\",\r\n                \"TradeNm\": \"SHERKS\",\r\n                \"IsEIN\": true,\r\n                \"EINorSSN\": \"{{EINorSSN}}\",\r\n                \"Email\": \"Feroz@email.com\",\r\n                \"ContactNm\": \"NICK Molsen\",\r\n                \"Phone\": \"{{phoneNumber}}\",\r\n                \"PhoneExtn\": \"12345\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"BusinessType\": \"ESTE\",\r\n                \"SigningAuthority\": {\r\n                    \"Name\": \"John\",\r\n                    \"Phone\": \"1234567890\",\r\n                    \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n                },\r\n                \"KindOfEmployer\": \"FederalGovt\",\r\n                \"KindOfPayer\": \"REGULAR941\",\r\n                \"IsBusinessTerminated\": true,\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                }\r\n            },\r\n            \"Form1094C\": {\r\n                \"Form1095CAttachedCnt\": 3,\r\n                \"AuthoritativeTransmittalInd\": false,\r\n                \"DesignatedGovernmentEntityDetails\": null\r\n            }\r\n        },\r\n        \"ReturnData\": {\r\n            \"RecordId\": \"{{RecordId_ACA}}\",\r\n            \"AddForm1095C\": null,\r\n            \"UpdateForm1095C\": [\r\n                {\r\n                    \"EmployeeManifest\": {\r\n                        \"Form1095CId\": \"{{Form1095CId_ACA}}\",\r\n                        \"Form1095SeqNum\": \"1\"\r\n                    },\r\n                    \"Employee\": {\r\n                        \"EmployeeId\": \"{{EmployeeId_ACA}}\",\r\n                        \"SSN\": \"{{SSN}}\",\r\n                        \"FirstNm\": \"Pravin \",\r\n                        \"MiddleNm\": \"Michal\",\r\n                        \"LastNm\": \"Waugh\",\r\n                        \"Suffix\": \"Sr\",\r\n                        \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                        \"Fax\": \"{{faxNumber}}\",\r\n                        \"Phone\": \"{{phoneNumber}}\",\r\n                        \"IsForeign\": true,\r\n                        \"USAddress\": {\r\n                            \"Address1\": \"1751 Kinsey Rd\",\r\n                            \"Address2\": \"Main St\",\r\n                            \"City\": \"Dothan\",\r\n                            \"State\": \"AL\",\r\n                            \"ZipCd\": \"36303\"\r\n                        },\r\n                        \"ForeignAddress\": {\r\n                            \"Address1\": \"500 Penn Avenue\",\r\n                            \"Address2\": \"Park Street\",\r\n                            \"City\": \"Toronto\",\r\n                            \"ProvinceOrStateNm\": \"Ontario\",\r\n                            \"Country\": \"CA\",\r\n                            \"PostalCd\": \"02452\"\r\n                        }\r\n                    },\r\n                    \"EmployeeReturnDetails\": {\r\n                        \"EmployeeAgeOnJan1\": \"26\",\r\n                        \"StartMonthNumberCd\": \"05\",\r\n                        \"AllTwelveMonthsInd\": false,\r\n                        \"TwelveMonths\": null,\r\n                        \"IndividualMonth\": [\r\n                            {\r\n                                \"Month\": \"01\",\r\n                                \"OfferOfCoverage\": \"1D\",\r\n                                \"EmployeeRequiredContribution\": 205,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": 36303\r\n                            },\r\n                            {\r\n                                \"Month\": \"02\",\r\n                                \"OfferOfCoverage\": \"1E\",\r\n                                \"EmployeeRequiredContribution\": 205,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": 36303\r\n                            },\r\n                            {\r\n                                \"Month\": \"03\",\r\n                                \"OfferOfCoverage\": \"1D\",\r\n                                \"EmployeeRequiredContribution\": 205,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": 36303\r\n                            },\r\n                            {\r\n                                \"Month\": \"04\",\r\n                                \"OfferOfCoverage\": \"1E\",\r\n                                \"EmployeeRequiredContribution\": 205,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": 36303\r\n                            },\r\n                            {\r\n                                \"Month\": \"05\",\r\n                                \"OfferOfCoverage\": \"1D\",\r\n                                \"EmployeeRequiredContribution\": 205,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": 36303\r\n                            },\r\n                            {\r\n                                \"Month\": \"06\",\r\n                                \"OfferOfCoverage\": \"1E\",\r\n                                \"EmployeeRequiredContribution\": 205,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": 36303\r\n                            },\r\n                            {\r\n                                \"Month\": \"07\",\r\n                                \"OfferOfCoverage\": \"1D\",\r\n                                \"EmployeeRequiredContribution\": 205,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": 36303\r\n                            },\r\n                            {\r\n                                \"Month\": \"08\",\r\n                                \"OfferOfCoverage\": \"1E\",\r\n                                \"EmployeeRequiredContribution\": 205,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": 36303\r\n                            },\r\n                            {\r\n                                \"Month\": \"09\",\r\n                                \"OfferOfCoverage\": \"1D\",\r\n                                \"EmployeeRequiredContribution\": 205,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": 36303\r\n                            },\r\n                            {\r\n                                \"Month\": \"10\",\r\n                                \"OfferOfCoverage\": \"1E\",\r\n                                \"EmployeeRequiredContribution\": 205,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": 36303\r\n                            },\r\n                            {\r\n                                \"Month\": \"11\",\r\n                                \"OfferOfCoverage\": \"1D\",\r\n                                \"EmployeeRequiredContribution\": 205,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": 36303\r\n                            },\r\n                            {\r\n                                \"Month\": \"12\",\r\n                                \"OfferOfCoverage\": \"1E\",\r\n                                \"EmployeeRequiredContribution\": 205,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": 36303\r\n                            }\r\n                        ],\r\n                        \"IsSelfInsured\": true,\r\n                        \"AddCoveredIndividuals\": [\r\n                            {\r\n                                \"CoveredIndividualId\": null,\r\n                                \"PersonFirstNm\": \"Pravin\",\r\n                                \"PersonMiddleNm\": \"Michal\",\r\n                                \"PersonLastNm\": \"Waugh\",\r\n                                \"SSN\": \"{{randomNumer_SSN_1}}\",\r\n                                \"DOB\": null,\r\n                                \"MonthsCoverageOffered\": {\r\n                                    \"AllTwelveMonths\": true,\r\n                                    \"IndividualMonths\": null\r\n                                }\r\n                            },\r\n                            {\r\n                                \"CoveredIndividualId\": null,\r\n                                \"PersonFirstNm\": \"Lara\",\r\n                                \"PersonMiddleNm\": \"Clein\",\r\n                                \"PersonLastNm\": \"Tyslo\",\r\n                                \"SSN\": \"{{randomNumer_SSN_4}}\",\r\n                                \"DOB\": null,\r\n                                \"MonthsCoverageOffered\": {\r\n                                    \"AllTwelveMonths\": true,\r\n                                    \"IndividualMonths\": null\r\n                                }\r\n                            }\r\n                        ],\r\n                        \"DeleteCoveredIndividuals\": [\r\n                            {\r\n                                \"Form1095CId\": \"{{Form1095CId_ACA_2}}\"\r\n                            }\r\n                        ]\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/v1.7.3/Form1095C/Update",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1.7.3",
								"Form1095C",
								"Update"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"BusinessId\", responseJSON.ACAForms.ReturnHeader.Business.BusinessId);\r",
									"pm.environment.set(\"TaxYr\", responseJSON.SubmissionManiFest.TaxYr);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.ACAForms.ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"SSN\", responseJSON.ACAForms.ReturnData.Form1095C[0].Employee.SSN);\r",
									"pm.environment.set(\"SSN_1\", responseJSON.ACAForms.ReturnData.Form1095C[1].Employee.SSN);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/v1.7.3/Form1095C/Get?SubmissionId={{SubmissionId_ACA}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1.7.3",
								"Form1095C",
								"Get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SubmissionId_ACA}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/v1.7.3/Form1095C/Getpdf?SubmissionId={{SubmissionId_ACA}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1.7.3",
								"Form1095C",
								"Getpdf"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SubmissionId_ACA}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/v1.7.3/Form1095C/status?SubmissionId={{SubmissionId_ACA}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1.7.3",
								"Form1095C",
								"status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SubmissionId_ACA}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.test(`EFileStatus is ${responseJSON.Form1095C[0].EFileStatus}`, function(){\r",
									"    pm.expect(responseJSON.Form1095C[0].EFileStatus).to.be.oneOf([\"CREATED\"])\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/v1.7.3/Form1095C/list?BusinessId={{BusinessId}}&EIN={{EINorSSN}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1.7.3",
								"Form1095C",
								"list"
							],
							"query": [
								{
									"key": "BusinessId",
									"value": "{{BusinessId}}"
								},
								{
									"key": "EIN",
									"value": "{{EINorSSN}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/v1.7.3/Form1095C/delete?SubmissionId={{SubmissionId_ACA}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1.7.3",
								"Form1095C",
								"delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SubmissionId_ACA}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"pm.environment.set('randomNumer_EIN', generateRandomEIN());\r",
									"pm.environment.set('randomNumer_EIN_1', generateRandomEIN());\r",
									"pm.environment.set('MemberEIN_1', generateRandomEIN());\r",
									"pm.environment.set('MemberEIN_2', generateRandomEIN());\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"pm.environment.set('randomNumer_SSN', generateRandomSSN());\r",
									"pm.environment.set('randomNumer_SSN_1', generateRandomSSN());\r",
									"pm.environment.set('randomNumer_SSN_2', generateRandomSSN());\r",
									"pm.environment.set('randomNumer_SSN_3', generateRandomSSN());\r",
									"pm.environment.set('randomNumer_SSN_4', generateRandomSSN());\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"SubmissionId_ACA\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"RecordId_ACA\", responseJSON.FormACARecords.SuccessRecords.RecordId);\r",
									"pm.environment.set(\"EmployeeId_ACA\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[0].EmployeeId);\r",
									"pm.environment.set(\"Form1095CId_ACA\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[0].Form1095CId);\r",
									"\r",
									"\r",
									"// \"Form1095SeqNum\": 1\r",
									"pm.environment.set(\"CoveredIndividualId_1\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[0].CoveredIndividualRecords[0].CoveredIndividualId);\r",
									"pm.environment.set(\"CoveredIndividualId_2\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[0].CoveredIndividualRecords[1].CoveredIndividualId);\r",
									"\r",
									"\r",
									"// \"Form1095SeqNum\": 2\r",
									"pm.environment.set(\"EmployeeId_ACA_2\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[1].EmployeeId);\r",
									"pm.environment.set(\"Form1095CId_ACA_2\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[1].Form1095CId);\r",
									"pm.environment.set(\"CoveredIndividualId_3\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[1].CoveredIndividualRecords[0].CoveredIndividualId);\r",
									"pm.environment.set(\"CoveredIndividualId_4\", responseJSON.FormACARecords.SuccessRecords.Form1095CRecords[1].CoveredIndividualRecords[1].CoveredIndividualId);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionManiFest\": {\r\n        \"SubmissionId\": null,\r\n        \"TaxYr\": \"2022\",\r\n        \"EmployeeCount\": 2\r\n    },\r\n    \"ACAForms\": {\r\n        \"ReturnHeader\": {\r\n            \"Business\": {\r\n                \"BusinessId\": null,\r\n                \"BusinessNm\": \"Floral World LLC - {{i}}\",\r\n                \"PayerRef\": \"{{payerref}}\",\r\n                \"TradeNm\": \"SHERKS\",\r\n                \"IsEIN\": true,\r\n                \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n                \"Email\": \"Feroz@email.com\",\r\n                \"ContactNm\": \"NICK Molsen\",\r\n                \"Phone\": \"{{phoneNumber}}\",\r\n                \"PhoneExtn\": \"12345\",\r\n                \"Fax\": \"{{faxNumber}}\",\r\n                \"BusinessType\": \"ESTE\",\r\n                \"SigningAuthority\": {\r\n                    \"Name\": \"John\",\r\n                    \"Phone\": \"1234567890\",\r\n                    \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n                },\r\n                \"KindOfEmployer\": \"FederalGovt\",\r\n                \"KindOfPayer\": \"REGULAR941\",\r\n                \"IsBusinessTerminated\": true,\r\n                \"IsForeign\": false,\r\n                \"USAddress\": {\r\n                    \"Address1\": \"3521 AIRPORT WAY\",\r\n                    \"Address2\": \"UNIT 9\",\r\n                    \"City\": \"FAIRBANKS\",\r\n                    \"State\": \"AK\",\r\n                    \"ZipCd\": \"99709\"\r\n                },\r\n                \"ForeignAddress\": {\r\n                    \"Address1\": \"Bloyed Rd 15\",\r\n                    \"Address2\": \"Sector 12\",\r\n                    \"City\": \"ONTARIO\",\r\n                    \"ProvinceOrStateNm\": \"TORENTO\",\r\n                    \"Country\": \"CA\",\r\n                    \"PostalCd\": \"SD1 465\"\r\n                }\r\n            },\r\n            \"Form1094C\": {\r\n                \"Form1095CAttachedCnt\": 9,\r\n                \"AuthoritativeTransmittalInd\": true,\r\n                \"TotalForm1095CALEMemberCnt\": 6,\r\n                \"QualifyingOfferMethodInd\": true,\r\n                \"NinetyEightPctOfferMethodInd\": false,\r\n                \"AggregateGroupMemberInd\": true,\r\n                \"AggregateGroupInformation\": [\r\n                    {\r\n                        \"BusinessNm\": \"ABC\",\r\n                        \"BusinessNmCont\": \"Macrop Solutions\",\r\n                        \"MemberEIN\": \"{{MemberEIN_1}}\",\r\n                        \"FullTimeEmployeeCount\": 2\r\n                    },\r\n                    {\r\n                        \"BusinessNm\": \"Groove\",\r\n                        \"BusinessNmCont\": \"Nehres Company\",\r\n                        \"MemberEIN\": \"{{MemberEIN_2}}\",\r\n                        \"FullTimeEmployeeCount\": 2\r\n                    }\r\n                ],\r\n                \"ALEMemberInformation\": {\r\n                    \"AllTwelveMonthsInd\": false,\r\n                    \"TwelveMonths\": null,\r\n                    \"IndividualMonth\": [\r\n                        {\r\n                            \"Month\": \"2\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 10,\r\n                            \"TotalEmployeeCnt\": 11,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"1\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 10,\r\n                            \"TotalEmployeeCnt\": 11,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"3\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 10,\r\n                            \"TotalEmployeeCnt\": 11,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"4\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"5\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 10,\r\n                            \"TotalEmployeeCnt\": 11,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"6\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"7\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"8\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"9\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"10\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"11\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        },\r\n                        {\r\n                            \"Month\": \"12\",\r\n                            \"MinEssentialCvrOffrCd\": true,\r\n                            \"ALEMemberFTECnt\": 12,\r\n                            \"TotalEmployeeCnt\": 12,\r\n                            \"AggregateGroupInd\": true\r\n                        }\r\n                    ]\r\n                },\r\n                \"DesignatedGovernmentEntityDetails\": null\r\n            }\r\n        },\r\n        \"ReturnData\": {\r\n            \"RecordId\": null,\r\n            \"Form1095C\": [\r\n                {\r\n                    \"EmployeeManifest\": {\r\n                        \"Form1095CId\": null,\r\n                        \"Form1095SeqNum\": \"1\"\r\n                    },\r\n                    \"Employee\": {\r\n                        \"EmployeeId\": null,\r\n                        \"SSN\": \"{{randomNumer_SSN_2}}\",\r\n                        \"FirstNm\": \"Steler\",\r\n                        \"MiddleNm\": \"Mixos\",\r\n                        \"LastNm\": \"Wernley\",\r\n                        \"Suffix\": \"Sr\",\r\n                        \"Email\": \"balaji.d+1@spantechnologyservices.com\",\r\n                        \"Fax\": \"4567891234\",\r\n                        \"Phone\": \"7412643261\",\r\n                        \"IsForeign\": false,\r\n                        \"USAddress\": {\r\n                            \"Address1\": \"1751 Kinsey Rd\",\r\n                            \"Address2\": \"Main St\",\r\n                            \"City\": \"Dothan\",\r\n                            \"State\": \"AL\",\r\n                            \"ZipCd\": \"36303\"\r\n                        },\r\n                        \"ForeignAddress\": null\r\n                    },\r\n                    \"EmployeeReturnDetails\": {\r\n                        \"EmployeeAgeOnJan1\": \"28\",\r\n                        \"StartMonthNumberCd\": \"06\",\r\n                        \"AllTwelveMonthsInd\": false,\r\n                        \"TwelveMonths\": null,\r\n                        \"IndividualMonth\": [\r\n                            {\r\n                                \"Month\": \"01\",\r\n                                \"OfferOfCoverage\": \"1A\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"02\",\r\n                                \"OfferOfCoverage\": \"1B\",\r\n                                \"EmployeeRequiredContribution\": 300,\r\n                                \"Section4980H\": \"2B\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"03\",\r\n                                \"OfferOfCoverage\": \"1C\",\r\n                                \"EmployeeRequiredContribution\": 300,\r\n                                \"Section4980H\": \"2C\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"04\",\r\n                                \"OfferOfCoverage\": \"1D\",\r\n                                \"EmployeeRequiredContribution\": 300,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"05\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"06\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"07\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"08\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"09\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"10\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"11\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"12\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            }\r\n                        ],\r\n                        \"IsSelfInsured\": true,\r\n                        \"CoveredIndividuals\": [\r\n                            {\r\n                                \"CoveredIndividualId\": null,\r\n                                \"PersonFirstNm\": \"Steler\",\r\n                                \"PersonMiddleNm\": \"Mixos\",\r\n                                \"PersonLastNm\": \"Wernley\",\r\n                                \"SSN\": \"{{randomNumer_SSN_2}}\",\r\n                                \"DOB\": null,\r\n                                \"MonthsCoverageOffered\": {\r\n                                    \"AllTwelveMonths\": true,\r\n                                    \"IndividualMonths\": null\r\n                                }\r\n                            },\r\n                            {\r\n                                \"CoveredIndividualId\": null,\r\n                                \"PersonFirstNm\": \"Lara\",\r\n                                \"PersonMiddleNm\": \"Clein\",\r\n                                \"PersonLastNm\": \"Tyslo\",\r\n                                \"SSN\": \"{{randomNumer_SSN_3}}\",\r\n                                \"DOB\": null,\r\n                                \"MonthsCoverageOffered\": {\r\n                                    \"AllTwelveMonths\": true,\r\n                                    \"IndividualMonths\": null\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    \"EmployeeManifest\": {\r\n                        \"Form1095CId\": null,\r\n                        \"Form1095SeqNum\": \"2\"\r\n                    },\r\n                    \"Employee\": {\r\n                        \"EmployeeId\": null,\r\n                        \"SSN\": \"{{randomNumer_SSN_1}}\",\r\n                        \"FirstNm\": \"Steler\",\r\n                        \"MiddleNm\": \"Mixos\",\r\n                        \"LastNm\": \"Wernley\",\r\n                        \"Suffix\": \"Sr\",\r\n                        \"Email\": \"balaji.d@spantechnologyservices.com\",\r\n                        \"Fax\": \"4567891234\",\r\n                        \"Phone\": \"7412643261\",\r\n                        \"IsForeign\": false,\r\n                        \"USAddress\": {\r\n                            \"Address1\": \"1751 Kinsey Rd\",\r\n                            \"Address2\": \"Main St\",\r\n                            \"City\": \"Dothan\",\r\n                            \"State\": \"AL\",\r\n                            \"ZipCd\": \"36303\"\r\n                        },\r\n                        \"ForeignAddress\": null\r\n                    },\r\n                    \"EmployeeReturnDetails\": {\r\n                        \"EmployeeAgeOnJan1\": \"28\",\r\n                        \"StartMonthNumberCd\": \"06\",\r\n                        \"AllTwelveMonthsInd\": false,\r\n                        \"TwelveMonths\": null,\r\n                        \"IndividualMonth\": [\r\n                            {\r\n                                \"Month\": \"01\",\r\n                                \"OfferOfCoverage\": \"1A\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"02\",\r\n                                \"OfferOfCoverage\": \"1B\",\r\n                                \"EmployeeRequiredContribution\": 300,\r\n                                \"Section4980H\": \"2B\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"03\",\r\n                                \"OfferOfCoverage\": \"1C\",\r\n                                \"EmployeeRequiredContribution\": 300,\r\n                                \"Section4980H\": \"2C\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"04\",\r\n                                \"OfferOfCoverage\": \"1D\",\r\n                                \"EmployeeRequiredContribution\": 300,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"05\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"06\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"07\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"08\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2D\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"09\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"10\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"11\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            },\r\n                            {\r\n                                \"Month\": \"12\",\r\n                                \"OfferOfCoverage\": \"1H\",\r\n                                \"EmployeeRequiredContribution\": 0,\r\n                                \"Section4980H\": \"2A\",\r\n                                \"ZipCd\": null\r\n                            }\r\n                        ],\r\n                        \"IsSelfInsured\": true,\r\n                        \"CoveredIndividuals\": [\r\n                            {\r\n                                \"CoveredIndividualId\": null,\r\n                                \"PersonFirstNm\": \"Steler\",\r\n                                \"PersonMiddleNm\": \"Mixos\",\r\n                                \"PersonLastNm\": \"Wernley\",\r\n                                \"SSN\": \"{{randomNumer_SSN_1}}\",\r\n                                \"DOB\": null,\r\n                                \"MonthsCoverageOffered\": {\r\n                                    \"AllTwelveMonths\": true,\r\n                                    \"IndividualMonths\": null\r\n                                }\r\n                            },\r\n                            {\r\n                                \"CoveredIndividualId\": null,\r\n                                \"PersonFirstNm\": \"Lara\",\r\n                                \"PersonMiddleNm\": \"Clein\",\r\n                                \"PersonLastNm\": \"Tyslo\",\r\n                                \"SSN\": \"{{randomNumer_SSN_4}}\",\r\n                                \"DOB\": null,\r\n                                \"MonthsCoverageOffered\": {\r\n                                    \"AllTwelveMonths\": true,\r\n                                    \"IndividualMonths\": null\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/v1.7.3/Form1095C/Create",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1.7.3",
								"Form1095C",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"    let ein;\r",
									"    do {\r",
									"        ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"    } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"    return ein;\r",
									"}\r",
									"\r",
									"pm.environment.set('randomNumer_EIN', generateRandomEIN());\r",
									"pm.environment.set('randomNumer_EIN_1', generateRandomEIN());\r",
									"pm.environment.set('MemberEIN_1', generateRandomEIN());\r",
									"pm.environment.set('MemberEIN_2', generateRandomEIN());\r",
									"\r",
									"function generateRandomSSN() {\r",
									"    let ssn;\r",
									"    do {\r",
									"        ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"    } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"    return ssn;\r",
									"}\r",
									"\r",
									"pm.environment.set('randomNumer_SSN', generateRandomSSN());\r",
									"pm.environment.set('randomNumer_SSN_1', generateRandomSSN());\r",
									"pm.environment.set('randomNumer_SSN_2', generateRandomSSN());\r",
									"pm.environment.set('randomNumer_SSN_3', generateRandomSSN());\r",
									"pm.environment.set('randomNumer_SSN_4', generateRandomSSN());\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"function generateRandomPhoneNumber() {\r",
									"    var phoneNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        phoneNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return phoneNumber;\r",
									"}\r",
									"\r",
									"var randomPhoneNumber = generateRandomPhoneNumber();\r",
									"console.log(randomPhoneNumber);\r",
									"\r",
									"pm.variables.set('phoneNumber', generateRandomFaxNumber());\r",
									"\r",
									"function generateRandomFaxNumber() {\r",
									"    var FaxNumber = '9'; // Start with 9 as the first digit\r",
									"    for (var i = 0; i < 9; i++) {\r",
									"        FaxNumber += Math.floor(Math.random() * 10);\r",
									"    }\r",
									"    return FaxNumber;\r",
									"}\r",
									"\r",
									"var randomFaxNumber = generateRandomPhoneNumber();\r",
									"console.log(randomFaxNumber);\r",
									"\r",
									"pm.variables.set('faxNumber', generateRandomFaxNumber());\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.test(`RecordStatus is ${responseJSON.FormACARecords.SuccessRecords.RecordStatus}`, function() {\r",
									"    pm.expect(responseJSON.FormACARecords.SuccessRecords.RecordStatus).to.be.oneOf([\"TRANSMITTED\"])\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{accesstoken}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "UserToken",
								"type": "text",
								"value": "{{usertokenSWT}}",
								"disabled": true
							},
							{
								"key": "IpAddress",
								"type": "text",
								"value": "{{ipaddressSWT}}",
								"disabled": true
							},
							{
								"key": "Authentication",
								"type": "text",
								"value": "{{authentication}}",
								"disabled": true
							},
							{
								"key": "TimeStamp",
								"type": "text",
								"value": "{{ts}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"SubmissionId\": \"{{SubmissionId_ACA}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/v1.7.3/Form1095C/Transmit",
							"host": [
								"{{host}}"
							],
							"path": [
								"v1.7.3",
								"Form1095C",
								"Transmit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "941SCHR - 1.7.3 - Q2",
			"item": [
				{
					"name": "JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"  return encodedSource;\r",
									"};\r",
									"//To generate Header and Payload\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-260\r",
									"};\r",
									"console.log(time);\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"//Client secret ID - To generate JWS\r",
									"var secretID = pm.environment.get('secret');\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"console.log(jws);\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "validateform",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('randomNumer_SSN',_.random(100, 999)+'-'+_.random(10, 99)+'-'+_.random(1000, 9999));\r",
									"pm.environment.set('randomNumer_EIN',_.random(10, 99)+'-'+_.random(1000000, 9999999));\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Form941SchRRecords\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"Sequence\": null,\r\n            \"ReturnHeader\": {\r\n                \"ReturnType\": \"FORM941SCHR\",\r\n                \"MoreClients\": false,\r\n                \"TaxYr\": \"2023\",\r\n                \"Qtr\": \"Q2\",\r\n                \"Business\": {\r\n                    \"BusinessId\": null,\r\n                    \"BusinessNm\": \"{{$randomFirstName}} {{$randomCompanySuffix}}\",\r\n                    \"TradeNm\": \"{{$randomBsNoun}}\",\r\n                    \"IsEIN\": true,\r\n                    \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n                    \"Email\": \"john@gmail.com\",\r\n                    \"ContactNm\": \"John\",\r\n                    \"Phone\": \"1234567890\",\r\n                    \"PhoneExtn\": null,\r\n                    \"Fax\": \"1234567890\",\r\n                    \"BusinessType\": \"CORP\",\r\n                    \"SigningAuthority\": {\r\n                        \"Name\": \"John\",\r\n                        \"Phone\": \"1234567890\",\r\n                        \"BusinessMemberType\": \"PRESIDENT\"\r\n                    },\r\n                    \"KindOfEmployer\": \"FEDERALGOVT\",\r\n                    \"KindOfPayer\": \"REGULAR941\",\r\n                    \"IsBusinessTerminated\": false,\r\n                    \"IsForeign\": false,\r\n                    \"USAddress\": {\r\n                        \"Address1\": \"1751 Kinsey Rd\",\r\n                        \"Address2\": \"Main St\",\r\n                        \"City\": \"Dothan\",\r\n                        \"State\": \"AL\",\r\n                        \"ZipCd\": \"36303\"\r\n                    },\r\n                    \"ForeignAddress\": {\r\n                        \"Address1\": null,\r\n                        \"Address2\": null,\r\n                        \"City\": null,\r\n                        \"ProvinceOrStateNm\": null,\r\n                        \"Country\": null,\r\n                        \"PostalCd\": null\r\n                    }\r\n                },\r\n                \"IsThirdPartyDesignee\": false,\r\n                \"ThirdPartyDesignee\": {\r\n                    \"Name\": null,\r\n                    \"Phone\": null,\r\n                    \"PIN\": null\r\n                },\r\n                \"SignatureDetails\": {\r\n                    \"SignatureType\": \"ONLINE_SIGN_PIN\",\r\n                    \"OnlineSignaturePIN\": {\r\n                        \"PIN\": \"1234567895\"\r\n                    },\r\n                    \"ReportingAgentPIN\": {\r\n                        \"PIN\": null\r\n                    }\r\n                },\r\n                \"BusinessStatusDetails\": {\r\n                    \"IsBusinessClosed\": false,\r\n                    \"BusinessClosedDetails\": null,\r\n                    \"IsBusinessTransferred\": false,\r\n                    \"BusinessTransferredDetails\": {\r\n                        \"Name\": null,\r\n                        \"BusinessChangeType\": null,\r\n                        \"DateOfChange\": null,\r\n                        \"NewBusinessType\": null,\r\n                        \"NewBusinessName\": null,\r\n                        \"IsForeign\": false,\r\n                        \"USAddress\": null,\r\n                        \"ForeignAddress\": null\r\n                    },\r\n                    \"IsSeasonalEmployer\": false\r\n                }\r\n            },\r\n            \"ReturnData\": {\r\n                \"Form941MainFilerData\": {\r\n                    \"EmployeeCnt\": 25,\r\n                    \"WagesAmt\": 25000.18,\r\n                    \"FedIncomeTaxWHAmt\": 15000.23,\r\n                    \"TotQualSickFamilyLeaveWages_Col1\": 50000,\r\n                    \"TotSSTax5a5bCol2\": 6200,\r\n                    \"TaxOnMedicareWagesTipsAmt_Col2\": 725,\r\n                    \"TotSSMdcrTaxAmt\": 10250,\r\n                    \"TaxOnUnreportedTips3121qAmt\": 250,\r\n                    \"PayrollTaxCreditAmt\": 3250,\r\n                    \"IsPayrollTaxCredit\": true,\r\n                    \"Form8974\": {\r\n                        \"Form8974IncomeTaxDetails\": [\r\n                            {\r\n                                \"IncomeTaxPeriodEndDate\": \"07-07-2021\",\r\n                                \"IncomeTaxReturnFiledForm\": \"FORM1065\",\r\n                                \"IncomeTaxReturnFiledDate\": \"07-07-2021\",\r\n                                \"Form6765EIN\": \"006548956\",\r\n                                \"Form6765Line44Amt\": 5000,\r\n                                \"PreviousPeriodRemainingCreditAmt\": 1750,\r\n                                \"RemainingCredit\": 3250\r\n                            }\r\n                        ],\r\n                        \"Line7\": 3250,\r\n                        \"Line8\": 3100,\r\n                        \"Line9\": 3100,\r\n                        \"Line10\": 6200,\r\n                        \"Line11\": 3100,\r\n                        \"PayerIndicatorType\": \"THIRDPARTYSICKPAYIND\",\r\n                        \"Line12\": 3100,\r\n                        \"Line13\": 150,\r\n                        \"Line14\": 725,\r\n                        \"Line15\": 362.50,\r\n                        \"Line16\": 150,\r\n                        \"Line17\": 3250\r\n                    },\r\n                    \"NonRfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 500.13,\r\n                    \"NonRfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 2000,\r\n                    \"TotTaxAfterAdjustmentAndNonRfdCr\": 19250.1,\r\n                    \"TotTaxDepositAmt\": 50,\r\n                    \"RfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 1000.45,\r\n                    \"RfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 327.41,\r\n                    \"QualHealthPlanExpToSickLeaveWgsB4_Apr1_2021\": 250,\r\n                    \"QualHealthPlanExpToFamilyLeaveWgsB4_Apr1_2021\": 200,\r\n                    \"QualSickLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 150,\r\n                    \"QualHealthPlanExpToSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 100,\r\n                    \"AmtUnderCBAAllocableToQualSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 50,\r\n                    \"QualFamilyLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 25,\r\n                    \"QualHealthPlanExpToFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 25,\r\n                    \"AmtUnderCBAAllocableToQualFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 5\r\n                },\r\n                \"Form941ClientDetails\": [\r\n                    {\r\n                        \"CSeqId\": \"1\",\r\n                        \"ClientName\": \"GER LLC\",\r\n                        \"ClientEIN\": \"002589632\",\r\n                        \"WagesTypeCd\": \"A\",\r\n                        \"EmployeeCnt\": 25,\r\n                        \"WagesAmt\": 25000.18,\r\n                        \"FedIncomeTaxWHAmt\": 15000.22,\r\n                        \"TotQualSickFamilyLeaveWages_Col1\": 50000,\r\n                        \"TotSSTax5a5bCol2\": 6200,\r\n                        \"TaxOnMedicareWagesTipsAmt_Col2\": 725,\r\n                        \"TotSSMdcrTaxAmt\": 10250,\r\n                        \"TaxOnUnreportedTips3121qAmt\": 250,\r\n                        \"PayrollTaxCreditAmt\": 3250,\r\n                        \"IsPayrollTaxCredit\": true,\r\n                        \"Form8974\": {\r\n                            \"Form8974IncomeTaxDetails\": [\r\n                                {\r\n                                    \"IncomeTaxPeriodEndDate\": \"07-07-2021\",\r\n                                    \"IncomeTaxReturnFiledForm\": \"FORM1065\",\r\n                                    \"IncomeTaxReturnFiledDate\": \"07-07-2021\",\r\n                                    \"Form6765EIN\": \"006548956\",\r\n                                    \"Form6765Line44Amt\": 5000,\r\n                                    \"PreviousPeriodRemainingCreditAmt\": 1750,\r\n                                    \"RemainingCredit\": 3250\r\n                                }\r\n                            ],\r\n                            \"Line7\": 3250,\r\n                            \"Line8\": 3100,\r\n                            \"Line9\": 3100,\r\n                            \"Line10\": 6200,\r\n                            \"Line11\": 3100,\r\n                            \"PayerIndicatorType\": \"THIRDPARTYSICKPAYIND\",\r\n                            \"Line12\": 3100,\r\n                            \"Line13\": 150,\r\n                            \"Line14\": 725,\r\n                            \"Line15\": 362.50,\r\n                            \"Line16\": 150,\r\n                            \"Line17\": 3250\r\n                        },\r\n                        \"NonRfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 500.12,\r\n                        \"NonRfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 2000,\r\n                        \"TotTaxAfterAdjustmentAndNonRfdCr\": 19250.1,\r\n                        \"TotTaxDepositAmt\": 50,\r\n                        \"RfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 1000.44,\r\n                        \"RfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 327.41,\r\n                        \"QualHealthPlanExpToSickLeaveWgsB4_Apr1_2021\": 250,\r\n                        \"QualHealthPlanExpToFamilyLeaveWgsB4_Apr1_2021\": 200,\r\n                        \"QualSickLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 150,\r\n                        \"QualHealthPlanExpToSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 100,\r\n                        \"AmtUnderCBAAllocableToQualSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 50,\r\n                        \"QualFamilyLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 25,\r\n                        \"QualHealthPlanExpToFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 25,\r\n                        \"AmtUnderCBAAllocableToQualFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 5,\r\n                        \"CRecordId\": null\r\n                    }\r\n                ],\r\n                \"AggregateForm941Data\": {\r\n                    \"EmployeeCnt\": 50,\r\n                    \"WagesAmt\": 50000.36,\r\n                    \"FedIncomeTaxWHAmt\": 30000.45,\r\n                    \"WagesNotSubjToSSMedcrTaxInd\": false,\r\n                    \"SocialSecurityTaxCashWagesAmt_Col1\": 50000.00,\r\n                    \"QualSickLeaveWagesAmt_Col1\": 50000.00,\r\n                    \"QualFamilyLeaveWagesAmt_Col1\": 50000.00,\r\n                    \"TaxableSocSecTipsAmt_Col1\": 50000.00,\r\n                    \"TaxableMedicareWagesTipsAmt_Col1\": 50000.00,\r\n                    \"TxblWageTipsSubjAddnlMedcrAmt_Col1\": 50000.00,\r\n                    \"SocialSecurityTaxAmt_Col2\": 6200.00,\r\n                    \"TaxOnQualSickLeaveWagesAmt_Col2\": 3100.00,\r\n                    \"TaxOnQualFamilyLeaveWagesAmt_Col2\": 3100.00,\r\n                    \"TaxOnSocialSecurityTipsAmt_Col2\": 6200.00,\r\n                    \"TaxOnMedicareWagesTipsAmt_Col2\": 1450.00,\r\n                    \"TaxOnWageTipsSubjAddnlMedcrAmt_Col2\": 450.00,\r\n                    \"TotSSMdcrTaxAmt\": 20500.00,\r\n                    \"TaxOnUnreportedTips3121qAmt\": 500.00,\r\n                    \"TotalTaxBeforeAdjustmentAmt\": 51000.45,\r\n                    \"CurrentQtrFractionsCentsAmt\": -700.00,\r\n                    \"CurrentQuarterSickPaymentAmt\": -500.00,\r\n                    \"CurrQtrTipGrpTermLifeInsAdjAmt\": 200,\r\n                    \"TotalTaxAfterAdjustmentAmt\": 50000.45,\r\n                    \"PayrollTaxCreditAmt\": 6500,\r\n                    \"IsPayrollTaxCredit\": true,\r\n                    \"FilerType\": \"CPEO\",\r\n                    \"NonRfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 1000.25,\r\n                    \"NonRfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 4000.00,\r\n                    \"TotlNonRfdCrAmt\": 11500.25,\r\n                    \"TotTaxAfterAdjustmentAndNonRfdCr\": 38500.20,\r\n                    \"TotTaxDepositAmt\": 100,\r\n                    \"RfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 2000.89,\r\n                    \"RfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 654.82,\r\n                    \"TotDepositAndRfdCrAmt\": 2755.71,\r\n                    \"BalanceDueAmt\": 35744.49,\r\n                    \"OverpaidAmt\": 0,\r\n                    \"OverPaymentRecoveryType\": null,\r\n                    \"QualHealthPlanExpToSickLeaveWagesB4_Apr1_2021\": 500,\r\n                    \"QualHealthPlanExpToFamilyLeaveWagesB4_Apr1_2021\": 400,\r\n                    \"QualSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 300,\r\n                    \"QualHealthPlanExpToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 200,\r\n                    \"CBAToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 100,\r\n                    \"QualFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 50,\r\n                    \"QualHealthPlanExpToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 50,\r\n                    \"CBAToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 10\r\n                },\r\n                \"IRSPaymentType\": \"EFTPS\",\r\n                \"IRSPayment\": {\r\n                    \"BankRoutingNum\": null,\r\n                    \"AccountType\": null,\r\n                    \"BankAccountNum\": null,\r\n                    \"Phone\": null\r\n                },\r\n                \"DepositScheduleType\": {\r\n                    \"DepositorType\": \"SEMIWEEKLY\",\r\n                    \"MonthlyDepositor\": null,\r\n                    \"SemiWeeklyDepositor\": {\r\n                        \"ScheduleBMonth1Amt\": [\r\n                            {\r\n                                \"Day\": \"Day1\",\r\n                                \"Amt\": \"10000.00\"\r\n                            }\r\n                        ],\r\n                        \"ScheduleBMonth2Amt\": [\r\n                            {\r\n                                \"Day\": \"Day5\",\r\n                                \"Amt\": \"10000.20\"\r\n                            }\r\n                        ],\r\n                        \"ScheduleBMonth3Amt\": [\r\n                            {\r\n                                \"Day\": \"Day7\",\r\n                                \"Amt\": \"18500.00 \"\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"TotalQuarterTaxLiabilityAmt\": 38500.20\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form941SCHR/validateform",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form941SCHR",
								"validateform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"  let ein;\r",
									"  do {\r",
									"    ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"  } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"  return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"  let ssn;\r",
									"  do {\r",
									"    ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"  } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('9') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"  return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"SUB941SCHR\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"REC941SCHR\", responseJSON.Form941SchRRecords.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"crecord\", responseJSON.Form941SchRRecords.SuccessRecords[0].ClientSuccessRecords[0].CRecordId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Form941SchRRecords\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"Sequence\": null,\r\n            \"ReturnHeader\": {\r\n                \"ReturnType\": \"FORM941SCHR\",\r\n                \"MoreClients\": false,\r\n                \"TaxYr\": \"2023\",\r\n                \"Qtr\": \"Q2\",\r\n                \"Business\": {\r\n                    \"BusinessId\": null,\r\n                    \"BusinessNm\": \"{{$randomFirstName}} {{$randomCompanySuffix}}\",\r\n                    \"TradeNm\": \"{{$randomBsNoun}}\",\r\n                    \"IsEIN\": true,\r\n                    \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n                    \"Email\": \"john@gmail.com\",\r\n                    \"ContactNm\": \"John\",\r\n                    \"Phone\": \"1234567890\",\r\n                    \"PhoneExtn\": null,\r\n                    \"Fax\": \"1234567890\",\r\n                    \"BusinessType\": \"CORP\",\r\n                    \"SigningAuthority\": {\r\n                        \"Name\": \"John\",\r\n                        \"Phone\": \"1234567890\",\r\n                        \"BusinessMemberType\": \"PRESIDENT\"\r\n                    },\r\n                    \"KindOfEmployer\": \"FEDERALGOVT\",\r\n                    \"KindOfPayer\": \"REGULAR941\",\r\n                    \"IsBusinessTerminated\": false,\r\n                    \"IsForeign\": false,\r\n                    \"USAddress\": {\r\n                        \"Address1\": \"1751 Kinsey Rd\",\r\n                        \"Address2\": \"Main St\",\r\n                        \"City\": \"Dothan\",\r\n                        \"State\": \"AL\",\r\n                        \"ZipCd\": \"36303\"\r\n                    },\r\n                    \"ForeignAddress\": {\r\n                        \"Address1\": null,\r\n                        \"Address2\": null,\r\n                        \"City\": null,\r\n                        \"ProvinceOrStateNm\": null,\r\n                        \"Country\": null,\r\n                        \"PostalCd\": null\r\n                    }\r\n                },\r\n                \"IsThirdPartyDesignee\": false,\r\n                \"ThirdPartyDesignee\": {\r\n                    \"Name\": null,\r\n                    \"Phone\": null,\r\n                    \"PIN\": null\r\n                },\r\n                \"SignatureDetails\": {\r\n                    \"SignatureType\": \"ONLINE_SIGN_PIN\",\r\n                    \"OnlineSignaturePIN\": {\r\n                        \"PIN\": \"1234567895\"\r\n                    },\r\n                    \"ReportingAgentPIN\": {\r\n                        \"PIN\": null\r\n                    }\r\n                },\r\n                \"BusinessStatusDetails\": {\r\n                    \"IsBusinessClosed\": false,\r\n                    \"BusinessClosedDetails\": null,\r\n                    \"IsBusinessTransferred\": false,\r\n                    \"BusinessTransferredDetails\": {\r\n                        \"Name\": null,\r\n                        \"BusinessChangeType\": null,\r\n                        \"DateOfChange\": null,\r\n                        \"NewBusinessType\": null,\r\n                        \"NewBusinessName\": null,\r\n                        \"IsForeign\": false,\r\n                        \"USAddress\": null,\r\n                        \"ForeignAddress\": null\r\n                    },\r\n                    \"IsSeasonalEmployer\": false\r\n                }\r\n            },\r\n            \"ReturnData\": {\r\n                \"Form941MainFilerData\": {\r\n                    \"EmployeeCnt\": 25,\r\n                    \"WagesAmt\": 25000.18,\r\n                    \"FedIncomeTaxWHAmt\": 15000.23,\r\n                    \"TotQualSickFamilyLeaveWages_Col1\": 50000,\r\n                    \"TotSSTax5a5bCol2\": 6200,\r\n                    \"TaxOnMedicareWagesTipsAmt_Col2\": 725,\r\n                    \"TotSSMdcrTaxAmt\": 10250,\r\n                    \"TaxOnUnreportedTips3121qAmt\": 250,\r\n                    \"PayrollTaxCreditAmt\": 3250,\r\n                    \"IsPayrollTaxCredit\": true,\r\n                    \"Form8974\": {\r\n                        \"Form8974IncomeTaxDetails\": [\r\n                            {\r\n                                \"IncomeTaxPeriodEndDate\": \"07-07-2021\",\r\n                                \"IncomeTaxReturnFiledForm\": \"FORM1065\",\r\n                                \"IncomeTaxReturnFiledDate\": \"07-07-2021\",\r\n                                \"Form6765EIN\": \"006548956\",\r\n                                \"Form6765Line44Amt\": 5000,\r\n                                \"PreviousPeriodRemainingCreditAmt\": 1750,\r\n                                \"RemainingCredit\": 3250\r\n                            }\r\n                        ],\r\n                        \"Line7\": 3250,\r\n                        \"Line8\": 3100,\r\n                        \"Line9\": 3100,\r\n                        \"Line10\": 6200,\r\n                        \"Line11\": 3100,\r\n                        \"PayerIndicatorType\": \"THIRDPARTYSICKPAYIND\",\r\n                        \"Line12\": 3100,\r\n                        \"Line13\": 150,\r\n                        \"Line14\": 725,\r\n                        \"Line15\": 362.50,\r\n                        \"Line16\": 150,\r\n                        \"Line17\": 3250\r\n                    },\r\n                    \"NonRfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 500.13,\r\n                    \"NonRfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 2000,\r\n                    \"TotTaxAfterAdjustmentAndNonRfdCr\": 19250.1,\r\n                    \"TotTaxDepositAmt\": 50,\r\n                    \"RfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 1000.45,\r\n                    \"RfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 327.41,\r\n                    \"QualHealthPlanExpToSickLeaveWgsB4_Apr1_2021\": 250,\r\n                    \"QualHealthPlanExpToFamilyLeaveWgsB4_Apr1_2021\": 200,\r\n                    \"QualSickLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 150,\r\n                    \"QualHealthPlanExpToSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 100,\r\n                    \"AmtUnderCBAAllocableToQualSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 50,\r\n                    \"QualFamilyLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 25,\r\n                    \"QualHealthPlanExpToFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 25,\r\n                    \"AmtUnderCBAAllocableToQualFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 5\r\n                },\r\n                \"Form941ClientDetails\": [\r\n                    {\r\n                        \"CSeqId\": \"1\",\r\n                        \"ClientName\": \"GER LLC\",\r\n                        \"ClientEIN\": \"002589632\",\r\n                        \"WagesTypeCd\": \"A\",\r\n                        \"EmployeeCnt\": 25,\r\n                        \"WagesAmt\": 25000.18,\r\n                        \"FedIncomeTaxWHAmt\": 15000.22,\r\n                        \"TotQualSickFamilyLeaveWages_Col1\": 50000,\r\n                        \"TotSSTax5a5bCol2\": 6200,\r\n                        \"TaxOnMedicareWagesTipsAmt_Col2\": 725,\r\n                        \"TotSSMdcrTaxAmt\": 10250,\r\n                        \"TaxOnUnreportedTips3121qAmt\": 250,\r\n                        \"PayrollTaxCreditAmt\": 3250,\r\n                        \"IsPayrollTaxCredit\": true,\r\n                        \"Form8974\": {\r\n                            \"Form8974IncomeTaxDetails\": [\r\n                                {\r\n                                    \"IncomeTaxPeriodEndDate\": \"07-07-2021\",\r\n                                    \"IncomeTaxReturnFiledForm\": \"FORM1065\",\r\n                                    \"IncomeTaxReturnFiledDate\": \"07-07-2021\",\r\n                                    \"Form6765EIN\": \"006548956\",\r\n                                    \"Form6765Line44Amt\": 5000,\r\n                                    \"PreviousPeriodRemainingCreditAmt\": 1750,\r\n                                    \"RemainingCredit\": 3250\r\n                                }\r\n                            ],\r\n                            \"Line7\": 3250,\r\n                            \"Line8\": 3100,\r\n                            \"Line9\": 3100,\r\n                            \"Line10\": 6200,\r\n                            \"Line11\": 3100,\r\n                            \"PayerIndicatorType\": \"THIRDPARTYSICKPAYIND\",\r\n                            \"Line12\": 3100,\r\n                            \"Line13\": 150,\r\n                            \"Line14\": 725,\r\n                            \"Line15\": 362.50,\r\n                            \"Line16\": 150,\r\n                            \"Line17\": 3250\r\n                        },\r\n                        \"NonRfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 500.12,\r\n                        \"NonRfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 2000,\r\n                        \"TotTaxAfterAdjustmentAndNonRfdCr\": 19250.1,\r\n                        \"TotTaxDepositAmt\": 50,\r\n                        \"RfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 1000.44,\r\n                        \"RfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 327.41,\r\n                        \"QualHealthPlanExpToSickLeaveWgsB4_Apr1_2021\": 250,\r\n                        \"QualHealthPlanExpToFamilyLeaveWgsB4_Apr1_2021\": 200,\r\n                        \"QualSickLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 150,\r\n                        \"QualHealthPlanExpToSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 100,\r\n                        \"AmtUnderCBAAllocableToQualSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 50,\r\n                        \"QualFamilyLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 25,\r\n                        \"QualHealthPlanExpToFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 25,\r\n                        \"AmtUnderCBAAllocableToQualFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 5,\r\n                        \"CRecordId\": null\r\n                    }\r\n                ],\r\n                \"AggregateForm941Data\": {\r\n                    \"EmployeeCnt\": 50,\r\n                    \"WagesAmt\": 50000.36,\r\n                    \"FedIncomeTaxWHAmt\": 30000.45,\r\n                    \"WagesNotSubjToSSMedcrTaxInd\": false,\r\n                    \"SocialSecurityTaxCashWagesAmt_Col1\": 50000.00,\r\n                    \"QualSickLeaveWagesAmt_Col1\": 50000.00,\r\n                    \"QualFamilyLeaveWagesAmt_Col1\": 50000.00,\r\n                    \"TaxableSocSecTipsAmt_Col1\": 50000.00,\r\n                    \"TaxableMedicareWagesTipsAmt_Col1\": 50000.00,\r\n                    \"TxblWageTipsSubjAddnlMedcrAmt_Col1\": 50000.00,\r\n                    \"SocialSecurityTaxAmt_Col2\": 6200.00,\r\n                    \"TaxOnQualSickLeaveWagesAmt_Col2\": 3100.00,\r\n                    \"TaxOnQualFamilyLeaveWagesAmt_Col2\": 3100.00,\r\n                    \"TaxOnSocialSecurityTipsAmt_Col2\": 6200.00,\r\n                    \"TaxOnMedicareWagesTipsAmt_Col2\": 1450.00,\r\n                    \"TaxOnWageTipsSubjAddnlMedcrAmt_Col2\": 450.00,\r\n                    \"TotSSMdcrTaxAmt\": 20500.00,\r\n                    \"TaxOnUnreportedTips3121qAmt\": 500.00,\r\n                    \"TotalTaxBeforeAdjustmentAmt\": 51000.45,\r\n                    \"CurrentQtrFractionsCentsAmt\": -700.00,\r\n                    \"CurrentQuarterSickPaymentAmt\": -500.00,\r\n                    \"CurrQtrTipGrpTermLifeInsAdjAmt\": 200,\r\n                    \"TotalTaxAfterAdjustmentAmt\": 50000.45,\r\n                    \"PayrollTaxCreditAmt\": 6500,\r\n                    \"IsPayrollTaxCredit\": true,\r\n                    \"FilerType\": \"CPEO\",\r\n                    \"NonRfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 1000.25,\r\n                    \"NonRfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 4000.00,\r\n                    \"TotlNonRfdCrAmt\": 11500.25,\r\n                    \"TotTaxAfterAdjustmentAndNonRfdCr\": 38500.20,\r\n                    \"TotTaxDepositAmt\": 100,\r\n                    \"RfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 2000.89,\r\n                    \"RfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 654.82,\r\n                    \"TotDepositAndRfdCrAmt\": 2755.71,\r\n                    \"BalanceDueAmt\": 35744.49,\r\n                    \"OverpaidAmt\": 0,\r\n                    \"OverPaymentRecoveryType\": null,\r\n                    \"QualHealthPlanExpToSickLeaveWagesB4_Apr1_2021\": 500,\r\n                    \"QualHealthPlanExpToFamilyLeaveWagesB4_Apr1_2021\": 400,\r\n                    \"QualSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 300,\r\n                    \"QualHealthPlanExpToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 200,\r\n                    \"CBAToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 100,\r\n                    \"QualFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 50,\r\n                    \"QualHealthPlanExpToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 50,\r\n                    \"CBAToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 10\r\n                },\r\n                \"IRSPaymentType\": \"EFTPS\",\r\n                \"IRSPayment\": {\r\n                    \"BankRoutingNum\": null,\r\n                    \"AccountType\": null,\r\n                    \"BankAccountNum\": null,\r\n                    \"Phone\": null\r\n                },\r\n                \"DepositScheduleType\": {\r\n                    \"DepositorType\": \"SEMIWEEKLY\",\r\n                    \"MonthlyDepositor\": null,\r\n                    \"SemiWeeklyDepositor\": {\r\n                        \"ScheduleBMonth1Amt\": [\r\n                            {\r\n                                \"Day\": \"Day1\",\r\n                                \"Amt\": \"10000.00\"\r\n                            }\r\n                        ],\r\n                        \"ScheduleBMonth2Amt\": [\r\n                            {\r\n                                \"Day\": \"Day5\",\r\n                                \"Amt\": \"10000.20\"\r\n                            }\r\n                        ],\r\n                        \"ScheduleBMonth3Amt\": [\r\n                            {\r\n                                \"Day\": \"Day7\",\r\n                                \"Amt\": \"18500.00 \"\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"TotalQuarterTaxLiabilityAmt\": 38500.20\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form941SCHR/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form941SCHR",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"busid\", responseJSON.Form941SchRRecords[0].ReturnHeader.Business.BusinessId);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.Form941SchRRecords[0].ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"BusinessNm\", responseJSON.Form941SchRRecords[0].ReturnHeader.Business.BusinessNm);\r",
									"pm.environment.set(\"TradeNm\", responseJSON.Form941SchRRecords[0].ReturnHeader.Business.TradeNm);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form941schr/get?SubmissionId={{SUB941SCHR}}&RecordId={{REC941SCHR}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form941schr",
								"get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SUB941SCHR}}"
								},
								{
									"key": "RecordId",
									"value": "{{REC941SCHR}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form941schr/list?BusinessId={{busid}}&EINorSSN={{EINorSSN}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form941schr",
								"list"
							],
							"query": [
								{
									"key": "BusinessId",
									"value": "{{busid}}"
								},
								{
									"key": "EINorSSN",
									"value": "{{EINorSSN}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Form941SchRRecords\": [\r\n    {\r\n      \"RecordId\": \"{{REC941SCHR}}\",\r\n      \"Sequence\": null,\r\n      \"ReturnHeader\": {\r\n        \"ReturnType\": \"FORM941SCHR\",\r\n        \"MoreClients\": false,\r\n        \"TaxYr\": \"2022\",\r\n        \"Qtr\": \"Q4\",\r\n        \"Business\": {\r\n          \"BusinessId\": null,\r\n          \"BusinessNm\": \"{{BusinessNm}}\",\r\n          \"TradeNm\": \"EKC\",\r\n          \"IsEIN\": true,\r\n          \"EINorSSN\": \"{{EINorSSN}}\",\r\n          \"Email\": \"jhon2@gmail.com\",\r\n          \"ContactNm\": null,\r\n          \"Phone\": \"1234567890\",\r\n          \"PhoneExtn\": null,\r\n          \"Fax\": \"1234567890\",\r\n          \"BusinessType\": \"CORP\",\r\n          \"SigningAuthority\": {\r\n            \"Name\": \"John\",\r\n            \"Phone\": \"1234567890\",\r\n            \"BusinessMemberType\": \"PRESIDENT\"\r\n          },\r\n          \"KindOfEmployer\": \"FEDERALGOVT\",\r\n          \"KindOfPayer\": \"REGULAR941\",\r\n          \"IsBusinessTerminated\": false,\r\n          \"IsForeign\": false,\r\n          \"USAddress\": {\r\n            \"Address1\": \"1751 Kinsey Rd\",\r\n            \"Address2\": \"Main St\",\r\n            \"City\": \"Dothan\",\r\n            \"State\": \"AL\",\r\n            \"ZipCd\": \"36303\"\r\n          },\r\n          \"ForeignAddress\": {\r\n            \"Address1\": null,\r\n            \"Address2\": null,\r\n            \"City\": null,\r\n            \"ProvinceOrStateNm\": null,\r\n            \"Country\": null,\r\n            \"PostalCd\": null\r\n          }\r\n        },\r\n        \"IsThirdPartyDesignee\": false,\r\n        \"ThirdPartyDesignee\": {\r\n          \"Name\": null,\r\n          \"Phone\": null,\r\n          \"PIN\": null\r\n        },\r\n        \"SignatureDetails\": {\r\n          \"SignatureType\": \"ONLINE_SIGN_PIN\",\r\n          \"OnlineSignaturePIN\": {\r\n           \"PIN\": \"1234567895\"\r\n         }\r\n        },\r\n        \"BusinessStatusDetails\": {\r\n          \"IsBusinessClosed\": false,\r\n          \"BusinessClosedDetails\": null,\r\n          \"IsBusinessTransferred\": false,\r\n          \"BusinessTransferredDetails\": {\r\n            \"Name\": null,\r\n            \"BusinessChangeType\": null,\r\n            \"DateOfChange\": null,\r\n            \"NewBusinessType\": null,\r\n            \"NewBusinessName\": null,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": null,\r\n            \"ForeignAddress\": null\r\n          },\r\n          \"IsSeasonalEmployer\": false\r\n        }\r\n      },\r\n      \"ReturnData\": {\r\n        \"Form941MainFilerData\": {\r\n          \"EmployeeCnt\": 5,\r\n          \"WagesAmt\": 0,\r\n          \"FedIncomeTaxWHAmt\": 0,\r\n          \"TotQualSickFamilyLeaveWages_Col1\": 0,\r\n          \"TotSSTax5a5bCol2\": 0,\r\n          \"TaxOnMedicareWagesTipsAmt_Col2\": 0,\r\n          \"TotSSMdcrTaxAmt\": 0,\r\n          \"TaxOnUnreportedTips3121qAmt\": 0,\r\n          \"PayrollTaxCreditAmt\": 0,\r\n          \"IsPayrollTaxCredit\": false,\r\n          \"Form8974\": null,\r\n          \"NonRfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 0,\r\n          \"NonRfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 0,\r\n          \"TotTaxAfterAdjustmentAndNonRfdCr\": 0,\r\n          \"TotTaxDepositAmt\": 0,\r\n          \"RfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 0,\r\n          \"RfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 0,\r\n          \"QualHealthPlanExpToSickLeaveWgsB4_Apr1_2021\": 0,\r\n          \"QualHealthPlanExpToFamilyLeaveWgsB4_Apr1_2021\": 0,\r\n          \"QualSickLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 0,\r\n          \"QualHealthPlanExpToSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 0 ,\r\n          \"AmtUnderCBAAllocableToQualSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 0,\r\n          \"QualFamilyLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 0,\r\n          \"QualHealthPlanExpToFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 0,\r\n          \"AmtUnderCBAAllocableToQualFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 0\r\n        },\r\n        \"Form941AddClientDetails\": [\r\n          {\r\n            \"CSeqId\": \"2\",\r\n            \"ClientName\": \"canon LLC\",\r\n            \"ClientEIN\": \"002586532\",\r\n            \"WagesTypeCd\": \"A\",\r\n            \"EmployeeCnt\": 5,\r\n          \"WagesAmt\": 25000,\r\n          \"FedIncomeTaxWHAmt\": 10000,\r\n          \"TotQualSickFamilyLeaveWages_Col1\": 250,\r\n          \"TotSSTax5a5bCol2\": 49.6,\r\n          \"TaxOnMedicareWagesTipsAmt_Col2\": 1,\r\n          \"TotSSMdcrTaxAmt\": 50,\r\n          \"TaxOnUnreportedTips3121qAmt\": 200,\r\n          \"PayrollTaxCreditAmt\": 7.2,\r\n          \"IsPayrollTaxCredit\": true,\r\n          \"Form8974\": {\r\n            \"Form8974IncomeTaxDetails\": [\r\n              {\r\n                \"IncomeTaxPeriodEndDate\": \"07-07-2021\",\r\n                \"IncomeTaxReturnFiledForm\": \"FORM1065\",\r\n                \"IncomeTaxReturnFiledDate\": \"07-07-2021\",\r\n                \"Form6765EIN\": \"006548956\",\r\n                \"Form6765Line44Amt\": 14.4,\r\n                \"PreviousPeriodRemainingCreditAmt\": 7.2,\r\n                \"RemainingCredit\": 7.2\r\n              }\r\n            ],\r\n            \"Line7\": 7.2,\r\n            \"Line8\": 3100,\r\n            \"Line9\": 3100,\r\n            \"Line10\": 6200,\r\n            \"Line11\": 3100,\r\n            \"PayerIndicatorType\": \"THIRDPARTYSICKPAYIND\",\r\n            \"Line12\": 7.2\r\n          },\r\n          \"NonRfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 40,\r\n          \"NonRfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 200,\r\n          \"TotTaxAfterAdjustmentAndNonRfdCr\": 12248.7,\r\n          \"TotTaxDepositAmt\": 200,\r\n          \"RfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 4,\r\n          \"RfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 20,\r\n          \"QualHealthPlanExpToSickLeaveWgsB4_Apr1_2021\": 200.25,\r\n          \"QualHealthPlanExpToFamilyLeaveWgsB4_Apr1_2021\": 200.25,\r\n          \"QualSickLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 400.25,\r\n          \"QualHealthPlanExpToSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 0 ,\r\n          \"AmtUnderCBAAllocableToQualSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 300,\r\n          \"QualFamilyLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 400.25,\r\n          \"QualHealthPlanExpToFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 0,\r\n          \"AmtUnderCBAAllocableToQualFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 200\r\n        }\r\n        ],\r\n        \"Form941UpdateClientDetails\": [\r\n          {\r\n            \"CSeqId\": \"1\",\r\n            \"ClientName\": \"GER LLC\",\r\n            \"ClientEIN\": \"002589632\",\r\n            \"WagesTypeCd\": \"A\",\r\n            \"EmployeeCnt\": 5,\r\n            \"WagesAmt\": 25000,\r\n            \"FedIncomeTaxWHAmt\": 15000,\r\n            \"TotQualSickFamilyLeaveWages_Col1\": 250,\r\n            \"TotSSTax5a5bCol2\": 24.8,\r\n            \"TaxOnMedicareWagesTipsAmt_Col2\": 1.9,\r\n            \"TotSSMdcrTaxAmt\": 59.60    ,\r\n            \"TaxOnUnreportedTips3121qAmt\": 300,\r\n            \"PayrollTaxCreditAmt\": 30,\r\n            \"IsPayrollTaxCredit\": true,\r\n            \"Form8974\": {\r\n              \"Form8974IncomeTaxDetails\": [\r\n                {\r\n                  \"IncomeTaxPeriodEndDate\": \"07-07-2021\",\r\n                  \"IncomeTaxReturnFiledForm\": \"FORM1065\",\r\n                  \"IncomeTaxReturnFiledDate\": \"07-07-2021\",\r\n                  \"Form6765EIN\": \"006548956\",\r\n                  \"Form6765Line44Amt\": 60,\r\n                  \"PreviousPeriodRemainingCreditAmt\": 30,\r\n                  \"RemainingCredit\": 30\r\n                }\r\n              ],\r\n              \"Line7\": 30,\r\n              \"Line8\": 3100,\r\n              \"Line9\": 3100,\r\n              \"Line10\": 6200,\r\n              \"Line11\": 3100,\r\n              \"PayerIndicatorType\": null,\r\n              \"Line12\": 30\r\n            },\r\n            \"NonRfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 35,\r\n            \"NonRfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 200,\r\n            \"TotTaxAfterAdjustmentAndNonRfdCr\": 12248.7,\r\n            \"TotTaxDepositAmt\": 200,\r\n            \"RfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 4,\r\n            \"RfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 20,\r\n            \"QualHealthPlanExpToSickLeaveWgsB4_Apr1_2021\": 200,\r\n            \"QualHealthPlanExpToFamilyLeaveWgsB4_Apr1_2021\": 300,\r\n            \"QualSickLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 400,\r\n            \"QualHealthPlanExpToSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 0,\r\n            \"AmtUnderCBAAllocableToQualSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 200.25,\r\n            \"QualFamilyLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 200,\r\n            \"QualHealthPlanExpToFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 0,\r\n            \"AmtUnderCBAAllocableToQualFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 200.25,\r\n            \"CRecordId\": \"{{crecord}}\"\r\n          }\r\n        ],\r\n        \"AggregateForm941Data\": {\r\n          \"EmployeeCnt\": 200,\r\n          \"WagesAmt\": 50000,\r\n          \"FedIncomeTaxWHAmt\": 25000,\r\n          \"WagesNotSubjToSSMedcrTaxInd\": false,\r\n          \"SocialSecurityTaxCashWagesAmt_Col1\": 400,\r\n          \"QualSickLeaveWagesAmt_Col1\": 300,\r\n          \"QualFamilyLeaveWagesAmt_Col1\": 200,\r\n          \"TaxableSocSecTipsAmt_Col1\": 200,\r\n          \"TaxableMedicareWagesTipsAmt_Col1\": 100,\r\n          \"TxblWageTipsSubjAddnlMedcrAmt_Col1\": 144.44,\r\n          \"SocialSecurityTaxAmt_Col2\": 49.6,\r\n          \"TaxOnQualSickLeaveWagesAmt_Col2\": 18.6,\r\n          \"TaxOnQualFamilyLeaveWagesAmt_Col2\": 12.4,\r\n          \"TaxOnSocialSecurityTipsAmt_Col2\": 24.8,\r\n          \"TaxOnMedicareWagesTipsAmt_Col2\": 2.9,\r\n          \"TaxOnWageTipsSubjAddnlMedcrAmt_Col2\": 1.30,\r\n          \"TotSSMdcrTaxAmt\": 109.60,\r\n          \"TaxOnUnreportedTips3121qAmt\": 500,\r\n          \"TotalTaxBeforeAdjustmentAmt\": 25609.60,\r\n          \"CurrentQtrFractionsCentsAmt\": -300,\r\n          \"CurrentQuarterSickPaymentAmt\": -200,\r\n          \"CurrQtrTipGrpTermLifeInsAdjAmt\": -100,\r\n          \"TotalTaxAfterAdjustmentAmt\": 25009.60,\r\n          \"PayrollTaxCreditAmt\": 37.2,\r\n          \"IsPayrollTaxCredit\": false,\r\n          \"FilerType\": \"CPEO\",\r\n          \"NonRfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 75,\r\n          \"NonRfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 400,\r\n          \"TotlNonRfdCrAmt\": 512.2,\r\n          \"TotTaxAfterAdjustmentAndNonRfdCr\": 24497.40,\r\n          \"TotTaxDepositAmt\": 400,\r\n          \"RfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 8,\r\n          \"RfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 40,\r\n          \"TotDepositAndRfdCrAmt\": 448,\r\n          \"BalanceDueAmt\": 24049.40,\r\n          \"OverpaidAmt\": 0,\r\n          \"OverPaymentRecoveryType\": null,\r\n          \"QualHealthPlanExpToSickLeaveWagesB4_Apr1_2021\": 400.25,\r\n          \"QualHealthPlanExpToFamilyLeaveWagesB4_Apr1_2021\": 500.25,\r\n          \"QualSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 800.25,\r\n          \"QualHealthPlanExpToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n          \"CBAToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 500.25,\r\n          \"QualFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 600.25,\r\n          \"QualHealthPlanExpToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n          \"CBAToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 400.25\r\n        },\r\n        \"IRSPaymentType\": \"EFTPS\",\r\n        \"IRSPayment\": {\r\n          \"BankRoutingNum\": null,\r\n          \"AccountType\": null,\r\n          \"BankAccountNum\": null,\r\n          \"Phone\": null\r\n        },\r\n        \"DepositScheduleType\": {\r\n          \"DepositorType\": \"SEMIWEEKLY\",\r\n          \"MonthlyDepositor\": null,\r\n          \"SemiWeeklyDepositor\": {\r\n            \"ScheduleBMonth1Amt\": [\r\n              {\r\n                \"Day\": \"Day1\",\r\n                \"Amt\": \"8124.00\"\r\n              }\r\n            ],\r\n            \"ScheduleBMonth2Amt\": [\r\n              {\r\n                \"Day\": \"Day5\",\r\n                \"Amt\": \"8124.40\"\r\n              }\r\n            ],\r\n            \"ScheduleBMonth3Amt\": [\r\n              {\r\n                \"Day\": \"Day7\",\r\n                \"Amt\": \"8249\"\r\n              }\r\n            ]\r\n          },\r\n          \"TotalQuarterTaxLiabilityAmt\": 24497.40\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"SubmissionId\":\"{{SUB941SCHR}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form941SCHR/update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form941SCHR",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    responseJSON = JSON.parse(responseBody);\r",
									"    pm.test(`RecordStatus is ${responseJSON.Form941SchRRecords.SuccessRecords[0].RecordStatus}`, function () {\r",
									"        pm.expect(responseJSON.Form941SchRRecords.SuccessRecords[0].RecordStatus).to.be.oneOf([\"Created\"])\r",
									"    })\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form941schr/status?SubmissionId={{SUB941SCHR}}&RecordId={{REC941SCHR}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form941schr",
								"status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SUB941SCHR}}"
								},
								{
									"key": "RecordId",
									"value": "{{REC941SCHR}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form941schr/validate?SubmissionId={{SUB941SCHR}}&RecordId={{REC941SCHR}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form941schr",
								"validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SUB941SCHR}}"
								},
								{
									"key": "RecordId",
									"value": "{{REC941SCHR}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"SubmissionId\": \"{{SUB941SCHR}}\",\r\n \"RecordIds\": [\r\n   \"{{REC941SCHR}}\"\r\n ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form941SCHR/transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form941SCHR",
								"transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form941schr/getpdf?SubmissionId={{SUB941SCHR}}&RecordId={{REC941SCHR}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form941schr",
								"getpdf"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SUB941SCHR}}"
								},
								{
									"key": "RecordId",
									"value": "{{REC941SCHR}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('randomNumer_SSN',_.random(100, 999)+'-'+_.random(10, 99)+'-'+_.random(1000, 9999));\r",
									"pm.environment.set('randomNumer_EIN',_.random(10, 99)+'-'+_.random(1000000, 9999999));\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"SUB941SCHR\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"REC941SCHR\", responseJSON.Form941SchRRecords.SuccessRecords[0].RecordId);\r",
									"pm.environment.set(\"crecord\", responseJSON.Form941SchRRecords.SuccessRecords[0].ClientSuccessRecords[0].CRecordId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Form941SchRRecords\": [\r\n    {\r\n      \"RecordId\": null,\r\n      \"Sequence\": null,\r\n      \"ReturnHeader\": {\r\n        \"ReturnType\": \"FORM941SCHR\",\r\n        \"MoreClients\": false,\r\n        \"TaxYr\": \"2022\",\r\n        \"Qtr\": \"Q2\",\r\n        \"Business\": {\r\n          \"BusinessId\": null,\r\n          \"BusinessNm\": \"jhomn\",\r\n          \"TradeNm\": \"EKC\",\r\n          \"IsEIN\": true,\r\n          \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n          \"Email\": \"jhon2@gmail.com\",\r\n          \"ContactNm\": null,\r\n          \"Phone\": \"1234567890\",\r\n          \"PhoneExtn\": null,\r\n          \"Fax\": \"1234567890\",\r\n          \"BusinessType\": \"CORP\",\r\n          \"SigningAuthority\": {\r\n            \"Name\": \"John\",\r\n            \"Phone\": \"1234567890\",\r\n            \"BusinessMemberType\": \"PRESIDENT\"\r\n          },\r\n          \"KindOfEmployer\": \"FEDERALGOVT\",\r\n          \"KindOfPayer\": \"REGULAR941\",\r\n          \"IsBusinessTerminated\": false,\r\n          \"IsForeign\": false,\r\n          \"USAddress\": {\r\n            \"Address1\": \"1751 Kinsey Rd\",\r\n            \"Address2\": \"Main St\",\r\n            \"City\": \"Dothan\",\r\n            \"State\": \"AL\",\r\n            \"ZipCd\": \"36303\"\r\n          },\r\n          \"ForeignAddress\": {\r\n            \"Address1\": null,\r\n            \"Address2\": null,\r\n            \"City\": null,\r\n            \"ProvinceOrStateNm\": null,\r\n            \"Country\": null,\r\n            \"PostalCd\": null\r\n          }\r\n        },\r\n        \"IsThirdPartyDesignee\": false,\r\n        \"ThirdPartyDesignee\": {\r\n          \"Name\": null,\r\n          \"Phone\": null,\r\n          \"PIN\": null\r\n        },\r\n        \"SignatureDetails\": {\r\n          \"SignatureType\": \"ONLINE_SIGN_PIN\",\r\n          \"OnlineSignaturePIN\": {\r\n           \"PIN\": \"1234567895\"\r\n         },\r\n          \"ReportingAgentPIN\": {\r\n            \"PIN\": null\r\n          }\r\n        },\r\n        \"BusinessStatusDetails\": {\r\n          \"IsBusinessClosed\": false,\r\n          \"BusinessClosedDetails\": null,\r\n          \"IsBusinessTransferred\": false,\r\n          \"BusinessTransferredDetails\": {\r\n            \"Name\": null,\r\n            \"BusinessChangeType\": null,\r\n            \"DateOfChange\": null,\r\n            \"NewBusinessType\": null,\r\n            \"NewBusinessName\": null,\r\n            \"IsForeign\": false,\r\n            \"USAddress\": null,\r\n            \"ForeignAddress\": null\r\n          },\r\n          \"IsSeasonalEmployer\": false\r\n        }\r\n      },\r\n      \"ReturnData\": {\r\n        \"Form941MainFilerData\": {\r\n          \"EmployeeCnt\": 5,\r\n          \"WagesAmt\": 25000,\r\n          \"FedIncomeTaxWHAmt\": 10000,\r\n          \"TotQualSickFamilyLeaveWages_Col1\": 250,\r\n          \"TotSSTax5a5bCol2\": 49.6,\r\n          \"TaxOnMedicareWagesTipsAmt_Col2\": 1,\r\n          \"TotSSMdcrTaxAmt\": 50,\r\n          \"TaxOnUnreportedTips3121qAmt\": 200,\r\n          \"PayrollTaxCreditAmt\": 7.2,\r\n          \"IsPayrollTaxCredit\": true,\r\n          \"Form8974\": {\r\n            \"Form8974IncomeTaxDetails\": [\r\n              {\r\n                \"IncomeTaxPeriodEndDate\": \"07-07-2021\",\r\n                \"IncomeTaxReturnFiledForm\": \"FORM1065\",\r\n                \"IncomeTaxReturnFiledDate\": \"07-07-2021\",\r\n                \"Form6765EIN\": \"006548956\",\r\n                \"Form6765Line44Amt\": 14.4,\r\n                \"PreviousPeriodRemainingCreditAmt\": 7.2,\r\n                \"RemainingCredit\": 7.2\r\n              }\r\n            ],\r\n            \"Line7\": 7.2,\r\n            \"Line8\": 3100,\r\n            \"Line9\": 3100,\r\n            \"Line10\": 6200,\r\n            \"Line11\": 3100,\r\n            \"PayerIndicatorType\": \"THIRDPARTYSICKPAYIND\",\r\n            \"Line12\": 7.2\r\n          },\r\n          \"NonRfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 40,\r\n          \"NonRfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 200,\r\n          \"TotTaxAfterAdjustmentAndNonRfdCr\": 12248.7,\r\n          \"TotTaxDepositAmt\": 200,\r\n          \"RfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 4,\r\n          \"RfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 20,\r\n          \"QualHealthPlanExpToSickLeaveWgsB4_Apr1_2021\": 200.25,\r\n          \"QualHealthPlanExpToFamilyLeaveWgsB4_Apr1_2021\": 200.25,\r\n          \"QualSickLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 400.25,\r\n          \"QualHealthPlanExpToSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 0 ,\r\n          \"AmtUnderCBAAllocableToQualSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 300,\r\n          \"QualFamilyLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 400.25,\r\n          \"QualHealthPlanExpToFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 0,\r\n          \"AmtUnderCBAAllocableToQualFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 200\r\n        },\r\n        \"Form941ClientDetails\": [\r\n          {\r\n            \"CSeqId\": \"1\",\r\n            \"ClientName\": \"GER LLC\",\r\n            \"ClientEIN\": \"002589632\",\r\n            \"WagesTypeCd\": \"A\",\r\n            \"EmployeeCnt\": 5,\r\n            \"WagesAmt\": 25000,\r\n            \"FedIncomeTaxWHAmt\": 15000,\r\n            \"TotQualSickFamilyLeaveWages_Col1\": 250,\r\n            \"TotSSTax5a5bCol2\": 24.8,\r\n            \"TaxOnMedicareWagesTipsAmt_Col2\": 1.9,\r\n            \"TotSSMdcrTaxAmt\": 59.60    ,\r\n            \"TaxOnUnreportedTips3121qAmt\": 300,\r\n            \"PayrollTaxCreditAmt\": 30,\r\n            \"IsPayrollTaxCredit\": true,\r\n            \"Form8974\": {\r\n              \"Form8974IncomeTaxDetails\": [\r\n                {\r\n                  \"IncomeTaxPeriodEndDate\": \"07-07-2021\",\r\n                  \"IncomeTaxReturnFiledForm\": \"FORM1065\",\r\n                  \"IncomeTaxReturnFiledDate\": \"07-07-2021\",\r\n                  \"Form6765EIN\": \"006548956\",\r\n                  \"Form6765Line44Amt\": 60,\r\n                  \"PreviousPeriodRemainingCreditAmt\": 30,\r\n                  \"RemainingCredit\": 30\r\n                }\r\n              ],\r\n              \"Line7\": 30,\r\n              \"Line8\": 3100,\r\n              \"Line9\": 3100,\r\n              \"Line10\": 6200,\r\n              \"Line11\": 3100,\r\n              \"PayerIndicatorType\": null,\r\n              \"Line12\": 30\r\n            },\r\n            \"NonRfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 35,\r\n            \"NonRfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 200,\r\n            \"TotTaxAfterAdjustmentAndNonRfdCr\": 12248.7,\r\n            \"TotTaxDepositAmt\": 200,\r\n            \"RfdCrQualSickAndFamilyWgsB4_Apr1_2021\": 4,\r\n            \"RfdCrQualSickAndFamilyWgsAfter_Mar31_2021andB4_Oct1_2021\": 20,\r\n            \"QualHealthPlanExpToSickLeaveWgsB4_Apr1_2021\": 200,\r\n            \"QualHealthPlanExpToFamilyLeaveWgsB4_Apr1_2021\": 300,\r\n            \"QualSickLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 400,\r\n            \"QualHealthPlanExpToSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 0,\r\n            \"AmtUnderCBAAllocableToQualSickLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 200.25,\r\n            \"QualFamilyLeaveWgsForLeaveAfter_Mar31_2021andB4_Oct1_2021\": 200,\r\n            \"QualHealthPlanExpToFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 0,\r\n            \"AmtUnderCBAAllocableToQualFamilyLeaveWgsAfter_Mar31_2021andB4_Oct1_2021\": 200.25,\r\n            \"CRecordId\": null\r\n          }\r\n        ],\r\n        \"AggregateForm941Data\": {\r\n          \"EmployeeCnt\": 200,\r\n          \"WagesAmt\": 50000,\r\n          \"FedIncomeTaxWHAmt\": 25000,\r\n          \"WagesNotSubjToSSMedcrTaxInd\": false,\r\n          \"SocialSecurityTaxCashWagesAmt_Col1\": 400,\r\n          \"QualSickLeaveWagesAmt_Col1\": 300,\r\n          \"QualFamilyLeaveWagesAmt_Col1\": 200,\r\n          \"TaxableSocSecTipsAmt_Col1\": 200,\r\n          \"TaxableMedicareWagesTipsAmt_Col1\": 100,\r\n          \"TxblWageTipsSubjAddnlMedcrAmt_Col1\": 144.44,\r\n          \"SocialSecurityTaxAmt_Col2\": 49.6,\r\n          \"TaxOnQualSickLeaveWagesAmt_Col2\": 18.6,\r\n          \"TaxOnQualFamilyLeaveWagesAmt_Col2\": 12.4,\r\n          \"TaxOnSocialSecurityTipsAmt_Col2\": 24.8,\r\n          \"TaxOnMedicareWagesTipsAmt_Col2\": 2.9,\r\n          \"TaxOnWageTipsSubjAddnlMedcrAmt_Col2\": 1.30,\r\n          \"TotSSMdcrTaxAmt\": 109.60,\r\n          \"TaxOnUnreportedTips3121qAmt\": 500,\r\n          \"TotalTaxBeforeAdjustmentAmt\": 25609.60,\r\n          \"CurrentQtrFractionsCentsAmt\": -300,\r\n          \"CurrentQuarterSickPaymentAmt\": -200,\r\n          \"CurrQtrTipGrpTermLifeInsAdjAmt\": -100,\r\n          \"TotalTaxAfterAdjustmentAmt\": 25009.60,\r\n          \"PayrollTaxCreditAmt\": 37.2,\r\n          \"IsPayrollTaxCredit\": false,\r\n          \"FilerType\": \"CPEO\",\r\n          \"NonRfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 75,\r\n          \"NonRfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 400,\r\n          \"TotlNonRfdCrAmt\": 512.2,\r\n          \"TotTaxAfterAdjustmentAndNonRfdCr\": 24497.40,\r\n          \"TotTaxDepositAmt\": 400,\r\n          \"RfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 8,\r\n          \"RfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 40,\r\n          \"TotDepositAndRfdCrAmt\": 448,\r\n          \"BalanceDueAmt\": 24049.40,\r\n          \"OverpaidAmt\": 0,\r\n          \"OverPaymentRecoveryType\": null,\r\n          \"QualHealthPlanExpToSickLeaveWagesB4_Apr1_2021\": 400.25,\r\n          \"QualHealthPlanExpToFamilyLeaveWagesB4_Apr1_2021\": 500.25,\r\n          \"QualSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 800.25,\r\n          \"QualHealthPlanExpToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n          \"CBAToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 500.25,\r\n          \"QualFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 600.25,\r\n          \"QualHealthPlanExpToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n          \"CBAToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 400.25\r\n        },\r\n        \"IRSPaymentType\": \"EFTPS\",\r\n        \"IRSPayment\": {\r\n          \"BankRoutingNum\": null,\r\n          \"AccountType\": null,\r\n          \"BankAccountNum\": null,\r\n          \"Phone\": null\r\n        },\r\n        \"DepositScheduleType\": {\r\n          \"DepositorType\": \"SEMIWEEKLY\",\r\n          \"MonthlyDepositor\": null,\r\n          \"SemiWeeklyDepositor\": {\r\n            \"ScheduleBMonth1Amt\": [\r\n              {\r\n                \"Day\": \"Day1\",\r\n                \"Amt\": \"8124.00\"\r\n              }\r\n            ],\r\n            \"ScheduleBMonth2Amt\": [\r\n              {\r\n                \"Day\": \"Day5\",\r\n                \"Amt\": \"8124.40\"\r\n              }\r\n            ],\r\n            \"ScheduleBMonth3Amt\": [\r\n              {\r\n                \"Day\": \"Day7\",\r\n                \"Amt\": \"8249\"\r\n              }\r\n            ]\r\n          },\r\n          \"TotalQuarterTaxLiabilityAmt\": 24497.40\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form941SCHR/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form941SCHR",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form941schr/delete?SubmissionId={{SUB941SCHR}}&RecordId={{REC941SCHR}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form941schr",
								"delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SUB941SCHR}}"
								},
								{
									"key": "RecordId",
									"value": "{{REC941SCHR}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "941 - 1.7.3 - Q2",
			"item": [
				{
					"name": "JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Base64 URL encoding\r",
									"function base64url(source) {\r",
									"  // Encode in classical base64\r",
									"  encodedSource = CryptoJS.enc.Base64.stringify(source);\r",
									"  // Remove padding equal characters\r",
									"  encodedSource = encodedSource.replace(/=+$/, '');\r",
									"  // Replace characters according to base64url specifications\r",
									"  encodedSource = encodedSource.replace(/\\+/g, '-');\r",
									"  encodedSource = encodedSource.replace(/\\//g, '_');\r",
									"  return encodedSource;\r",
									"};\r",
									"//To generate Header and Payload\r",
									"var header = {\r",
									"  \"alg\": \"HS256\",\r",
									"  \"typ\": \"JWT\"\r",
									"};\r",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));\r",
									"var encodedHeader = base64url(stringifiedHeader);\r",
									"//Unix epoch time formula\r",
									"var time = Math.floor(new Date().getTime()/1000.0); \r",
									"var payloaddata = {\r",
									"  \"iss\": pm.environment.get('clientid'),\r",
									"  \"sub\": pm.environment.get('clientid'),\r",
									"  \"aud\": pm.environment.get('usertoken'),\r",
									"  \"iat\": time-260\r",
									"};\r",
									"console.log(time);\r",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(payloaddata));\r",
									"var encodedPayloadData = base64url(stringifiedData);\r",
									"var headerPayload = encodedHeader + \".\" + encodedPayloadData;\r",
									"//Client secret ID - To generate JWS\r",
									"var secretID = pm.environment.get('secret');\r",
									"var signature = CryptoJS.HmacSHA256(headerPayload, secretID);\r",
									"signature = base64url(signature);\r",
									"var jws = headerPayload + \".\" + signature;\r",
									"console.log(jws);\r",
									"pm.environment.set(\"auth\", jws);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"accesstoken\", responseJSON.AccessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authentication",
								"value": "{{auth}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "validateform",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('randomNumer_SSN',_.random(100, 999)+'-'+_.random(10, 99)+'-'+_.random(1000, 9999));\r",
									"pm.environment.set('randomNumer_EIN',_.random(10, 99)+'-'+_.random(1000000, 9999999));\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Form941Records\": [\r\n        {\r\n            \"SequenceId\": \"001\",\r\n            \"ReturnHeader\": {\r\n                \"ReturnType\": \"FORM941\",\r\n                \"TaxYr\": \"2023\",\r\n                \"Qtr\": \"Q2\",\r\n                \"Business\": {\r\n                    \"BusinessId\": null,\r\n                    \"BusinessNm\": \"Meefto Bridge Company\",\r\n                    \"TradeNm\": \" Meefto\",\r\n                    \"IsEIN\": true,\r\n                    \"EINorSSN\": \"865626415\",\r\n                    \"Email\": \"John@gmail.com\",\r\n                    \"ContactNm\": \"Alice John\",\r\n                    \"Phone\": \"9894216412\",\r\n                    \"PhoneExtn\": null,\r\n                    \"Fax\": \"3236415281\",\r\n                    \"BusinessType\": \"ESTE\",\r\n                    \"SigningAuthority\": {\r\n                        \"Name\": \"Tina Charles\",\r\n                        \"Phone\": \"7498798798\",\r\n                        \"BusinessMemberType\": \"ADMINISTRATOR\"\r\n                    },\r\n                    \"KindOfEmployer\": null,\r\n                    \"KindOfPayer\": null,\r\n                    \"IsBusinessTerminated\": false,\r\n                    \"IsForeign\": true,\r\n                    \"USAddress\": {\r\n                        \"Address1\": \"1751 Kinsey Rd\",\r\n                        \"Address2\": \"Main St\",\r\n                        \"City\": \"Dothan\",\r\n                        \"State\": \"AL\",\r\n                        \"ZipCd\": \"36303\"\r\n                    },\r\n                    \"ForeignAddress\": {\r\n                        \"Address1\": \"1751 Kinsey Rd\",\r\n                        \"Address2\": \"Main St\",\r\n                        \"City\": \"Dothan\",\r\n                        \"ProvinceOrStateNm\": \"NY\",\r\n                        \"Country\": \"UK\",\r\n                        \"PostalCd\": \"78867789\"\r\n                    }\r\n                },\r\n                \"IsThirdPartyDesignee\": false,\r\n                \"ThirdPartyDesignee\": {\r\n                    \"Name\": null,\r\n                    \"Phone\": null,\r\n                    \"PIN\": null\r\n                },\r\n                \"SignatureDetails\": {\r\n                    \"SignatureType\": \"ONLINE_SIGN_PIN\",\r\n                    \"OnlineSignaturePIN\": {\r\n                        \"PIN\": \"1262441864\"\r\n                    },\r\n                    \"ReportingAgentPIN\": {\r\n                        \"PIN\":null\r\n                    },\r\n                    \"taxPayerPIN\": {\r\n                        \"PIN\": null\r\n                    },\r\n                    \"Form8453EMP\": null\r\n                },\r\n                \"BusinessStatusDetails\": {\r\n                    \"IsBusinessClosed\": false,\r\n                    \"BusinessClosedDetails\": {\r\n                        \"Name\": null,\r\n                        \"FinalDateWagesPaid\": null,\r\n                        \"IsForeign\": false,\r\n                        \"USAddress\": {\r\n                            \"Address1\": \"1751 Kinsey Rd\",\r\n                            \"Address2\": \"Main St\",\r\n                            \"City\": \"Dothan\",\r\n                            \"State\": \"AL\",\r\n                            \"ZipCd\": \"36303\"\r\n                        },\r\n                        \"ForeignAddress\": {\r\n                            \"Address1\": \"1751 Kinsey Rd\",\r\n                            \"Address2\": \"Main St\",\r\n                            \"City\": \"Dothan\",\r\n                            \"ProvinceOrStateNm\": \"NY\",\r\n                            \"Country\": \"UK\",\r\n                            \"PostalCd\": \"78867789\"\r\n                        }\r\n                    },\r\n                    \"IsBusinessTransferred\": false,\r\n                    \"BusinessTransferredDetails\": {\r\n                        \"Name\": null,\r\n                        \"BusinessChangeType\": null,\r\n                        \"DateOfChange\": null,\r\n                        \"NewBusinessType\": null,\r\n                        \"NewBusinessName\": null,\r\n                        \"IsForeign\": true,\r\n                        \"USAddress\": {\r\n                            \"Address1\": null,\r\n                            \"Address2\": null,\r\n                            \"City\": null,\r\n                            \"State\": null,\r\n                            \"ZipCd\": null\r\n                        },\r\n                        \"ForeignAddress\": {\r\n                            \"Address1\": \"1751 Kinsey Rd\",\r\n                            \"Address2\": \"Main St\",\r\n                            \"City\": \"Dothan\",\r\n                            \"ProvinceOrStateNm\": \"NY\",\r\n                            \"Country\": \"UK\",\r\n                            \"PostalCd\": \"78867789\"\r\n                        }\r\n                    },\r\n                    \"IsSeasonalEmployer\": false\r\n                }\r\n            },\r\n            \"ReturnData\": {\r\n                \"Form941\": {\r\n                    \"EmployeeCnt\": 200,\r\n                    \"WagesAmt\": 1264000.32,\r\n                    \"FedIncomeTaxWHAmt\": 248000.32,\r\n                    \"WagesNotSubjToSSMedcrTaxInd\": false,\r\n                    \"SocialSecurityTaxCashWagesAmt_Col1\":14502.32,\r\n                    \"QualSickLeaveWagesAmt_Col1\": 14280.64,\r\n                    \"QualFamilyLeaveWagesAmt_Col1\": 11520.32,\r\n                    \"TaxableSocSecTipsAmt_Col1\": 1420.36,\r\n                    \"TaxableMedicareWagesTipsAmt_Col1\": 11512.64,\r\n                    \"TxblWageTipsSubjAddnlMedcrAmt_Col1\": 7832.16,\r\n                    \"SocialSecurityTaxAmt_Col2\": 1798.29,\r\n                    \"TaxOnQualSickLeaveWagesAmt_Col2\": 885.40,\r\n                    \"TaxOnQualFamilyLeaveWagesAmt_Col2\": 714.26,\r\n                    \"TaxOnSocialSecurityTipsAmt_Col2\": 176.12,\r\n                    \"TaxOnMedicareWagesTipsAmt_Col2\": 333.87,\r\n                    \"TaxOnWageTipsSubjAddnlMedcrAmt_Col2\": 70.49,\r\n                    \"TotSSMdcrTaxAmt\":3978.43,\r\n                    \"TaxOnUnreportedTips3121qAmt\": 11204.62,\r\n                    \"TotalTaxBeforeAdjustmentAmt\": 263183.37,\r\n                    \"CurrentQtrFractionsCentsAmt\": 5200.36,\r\n                    \"CurrentQuarterSickPaymentAmt\": 16412.28,\r\n                    \"CurrQtrTipGrpTermLifeInsAdjAmt\": 5420.32,\r\n                    \"TotalTaxAfterAdjustmentAmt\":290216.33,\r\n                    \"PayrollTaxCreditAmt\": 1154.15,\r\n                    \"IsPayrollTaxCredit\": true,\r\n                    \"Form8974\": {\r\n                        \"Form8974IncomeTaxDetails\": [\r\n                            {\r\n                                \"IncomeTaxPeriodEndDate\": \"07-07-2021\",\r\n                                \"IncomeTaxReturnFiledForm\": \"FORM1065\",\r\n                                \"IncomeTaxReturnFiledDate\": \"07-07-2021\",\r\n                                \"Form6765EIN\": \"006548956\",\r\n                                \"Form6765Line44Amt\": 5000,\r\n                                \"PreviousPeriodRemainingCreditAmt\": 100,\r\n                                \"RemainingCredit\": 4900\r\n                            }\r\n                        ],\r\n                        \"Line7\": 4900,\r\n                        \"Line8\": 1798.29,\r\n                        \"Line9\": 176.12,\r\n                        \"Line10\": 1974.41,\r\n                        \"Line11\": 987.21,\r\n                        \"PayerIndicatorType\": \"SECTION3121QIND\",\r\n                        \"Line12\": 987.21,\r\n                        \"Line13\": 3912.79,\r\n                        \"Line14\": 333.87,\r\n                        \"Line15\": 166.94,\r\n                        \"Line16\": 166.94,\r\n                        \"Line17\": 1154.15\r\n                    },\r\n                    \"NonRfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 0,\r\n                    \"NonRfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 15248.63,\r\n                    \"TotlNonRfdCrAmt\":16402.78,\r\n                    \"TotTaxAfterAdjustmentAndNonRfdCr\": 273813.55,\r\n                    \"TotTaxDepositAmt\":13248.12,\r\n                    \"RfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 12126.32,\r\n                    \"RfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 1218.44,\r\n                    \"TotDepositAndRfdCrAmt\": 26592.88,\r\n                    \"BalanceDueAmt\": 247220.67,\r\n                    \"OverpaidAmt\": 0,\r\n                    \"OverPaymentRecoveryType\": null,\r\n                    \"QualHealthPlanExpToSickLeaveWagesB4_Apr1_2021\": 1200.66,\r\n                    \"QualHealthPlanExpToFamilyLeaveWagesB4_Apr1_2021\": 1520.64,\r\n                    \"QualSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 14282.34,\r\n                    \"QualHealthPlanExpToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 12118.66,\r\n                    \"CBAToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 5420.66,\r\n                    \"QualFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 55281.44,\r\n                    \"QualHealthPlanExpToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 291864.32,\r\n                    \"CBAToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 1840.32\r\n                },\r\n                \"IRSPaymentType\": \"EFTPS\",\r\n                \"IRSPayment\": {\r\n                    \"BankRoutingNum\": null,\r\n                    \"AccountType\": null,\r\n                    \"BankAccountNum\": null,\r\n                    \"Phone\": null\r\n                },\r\n                \"DepositScheduleType\": {\r\n                    \"DepositorType\": \"MONTHLY\",\r\n                    \"MonthlyDepositor\": {\r\n                        \"TaxLiabilityMonth1\":50000.00,\r\n                        \"TaxLiabilityMonth2\": 173813.55,\r\n                        \"TaxLiabilityMonth3\": 50000.00\r\n                    },\r\n                    \"SemiWeeklyDepositor\": null,\r\n                    \"TotalQuarterTaxLiabilityAmt\": 273813.55\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form941/validateform",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form941",
								"validateform"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const excludedNumbers = [7, 8, 9, 17, 18, 19, 28, 29, 49, 69, 70, 78, 79, 89];\r",
									"\r",
									"function generateRandomEIN() {\r",
									"  let ein;\r",
									"  do {\r",
									"    ein = `${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 8999999) + 1000000}`; // generate a random EIN number in the format XX-YYYYYYY\r",
									"  } while (excludedNumbers.some(n => ein.startsWith(n))); // repeat until a non-excluded number is generated\r",
									"  return ein;\r",
									"}\r",
									"\r",
									"const randomEIN = generateRandomEIN();\r",
									"pm.environment.set('randomNumer_EIN', randomEIN);\r",
									"\r",
									"function generateRandomSSN() {\r",
									"  let ssn;\r",
									"  do {\r",
									"    ssn = `${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 90) + 10}-${Math.floor(Math.random() * 9000) + 1000}`; // generate a random SSN number in the format XXX-XX-XXXX\r",
									"  } while (ssn.startsWith('666') || ssn.startsWith('999') || ssn.startsWith('9') || ssn.startsWith('000') || ssn.startsWith('9')); // repeat until a non-excluded number is generated\r",
									"  return ssn;\r",
									"}\r",
									"\r",
									"const randomSSN = generateRandomSSN();\r",
									"pm.environment.set('randomNumer_SSN', randomSSN);\r",
									"\r",
									"\r",
									"\r",
									"function randomString(minValue, maxValue, dataSet = 'abcdefgh0123456789ABCDEFGVWXYZ') {\r",
									"    if (!minValue) {\r",
									"        minValue = 4;\r",
									"        maxValue = 10;\r",
									"    }\r",
									"\r",
									"    if (!maxValue) {\r",
									"        maxValue = minValue;\r",
									"    }\r",
									"\r",
									"    let length = _.random(minValue, maxValue),\r",
									"        randomString = \"\";\r",
									"\r",
									"    for (let i = 0; i < length; i++)\r",
									"        randomString += dataSet.charAt(Math.floor(Math.random() * dataSet.length));\r",
									"    return randomString;\r",
									"}\r",
									"\r",
									"pm.variables.set('payerref', randomString());\r",
									"pm.variables.set('accountno', randomString());\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"SUB941\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"REC941\", responseJSON.Form941Records.SuccessRecords[0].RecordId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionId\": null,\r\n    \"Form941Records\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"Sequence\": \"1\",\r\n            \"ReturnHeader\": {\r\n                \"ReturnType\": \"FORM941PR\",\r\n                \"TaxYr\": \"2023\",\r\n                \"Qtr\": \"Q2\",\r\n                \"Business\": {\r\n                    \"BusinessId\": null,\r\n                    \"BusinessNm\": \"ASDFEY LLC - {{i}}\",\r\n                    \"TradeNm\": null,\r\n                    \"IsEIN\": true,\r\n                    \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n                    \"Email\": \"fzambon@intechsol-pr.com\",\r\n                    \"ContactNm\": \"Joel Cruz\",\r\n                    \"Phone\": \"787-641-7809\",\r\n                    \"PhoneExtn\": \"\",\r\n                    \"Fax\": null,\r\n                    \"BusinessType\": \"CORP\",\r\n                    \"SigningAuthority\": {\r\n                        \"Name\": \"Joel Cruz\",\r\n                        \"Phone\": \"7876417809\",\r\n                        \"BusinessMemberType\": \"TAXOFFICER\"\r\n                    },\r\n                    \"KindOfEmployer\": null,\r\n                    \"KindOfPayer\": null,\r\n                    \"IsBusinessTerminated\": false,\r\n                    \"IsForeign\": false,\r\n                    \"USAddress\": {\r\n                        \"Address1\": \"P O Box 140400\",\r\n                        \"Address2\": null,\r\n                        \"City\": \"Arecibo\",\r\n                        \"State\": \"PR\",\r\n                        \"ZipCd\": \"00614\"\r\n                    },\r\n                    \"ForeignAddress\": null\r\n                },\r\n                \"IsThirdPartyDesignee\": true,\r\n                \"ThirdPartyDesignee\": {\r\n                    \"Name\": \"Joel Cruz\",\r\n                    \"Phone\": \"787-641-7809\",\r\n                    \"PIN\": \"11111\"\r\n                },\r\n                \"SignatureDetails\": {\r\n                    \"SignatureType\": \"ONLINE_SIGN_PIN\",\r\n                    \"OnlineSignaturePIN\": {\r\n                        \"PIN\": \"1234567895\"\r\n                    },\r\n                    \"ReportingAgentPIN\": null,\r\n                    \"Form8453EMP\": null\r\n                },\r\n                \"BusinessStatusDetails\": {\r\n                    \"IsBusinessClosed\": false,\r\n                    \"BusinessClosedDetails\": {\r\n                        \"Name\": null,\r\n                        \"FinalDateWagesPaid\": null,\r\n                        \"IsForeign\": false,\r\n                        \"USAddress\": null,\r\n                        \"ForeignAddress\": null\r\n                    },\r\n                    \"IsBusinessTransferred\": false,\r\n                    \"BusinessTransferredDetails\": {\r\n                        \"Name\": null,\r\n                        \"BusinessChangeType\": null,\r\n                        \"DateOfChange\": null,\r\n                        \"NewBusinessType\": null,\r\n                        \"NewBusinessName\": null,\r\n                        \"IsForeign\": false,\r\n                        \"USAddress\": null,\r\n                        \"ForeignAddress\": null,\r\n                        \"IsSale\": false\r\n                    },\r\n                    \"IsSeasonalEmployer\": false\r\n                }\r\n            },\r\n            \"ReturnData\": {\r\n                \"Form941\": {\r\n                    \"EmployeeCnt\": 52,\r\n                    \"WagesAmt\": 0,\r\n                    \"FedIncomeTaxWHAmt\": 0,\r\n                    \"WagesNotSubjToSSMedcrTaxInd\": false,\r\n                    \"SocialSecurityTaxCashWagesAmt_Col1\": 738468.3,\r\n                    \"TaxableSocSecTipsAmt_Col1\": 0,\r\n                    \"TaxableMedicareWagesTipsAmt_Col1\": 738468.3,\r\n                    \"TxblWageTipsSubjAddnlMedcrAmt_Col1\": 0,\r\n                    \"SocialSecurityTaxAmt_Col2\": 91570.07,\r\n                    \"TaxOnSocialSecurityTipsAmt_Col2\": 0,\r\n                    \"TaxOnMedicareWagesTipsAmt_Col2\": 21415.58,\r\n                    \"TaxOnWageTipsSubjAddnlMedcrAmt_Col2\": 0,\r\n                    \"TotSSMdcrTaxAmt\": 112985.65,\r\n                    \"TaxOnUnreportedTips3121qAmt\": 0,\r\n                    \"TotalTaxBeforeAdjustmentAmt\": 112985.65,\r\n                    \"CurrentQtrFractionsCentsAmt\": -2.07,\r\n                    \"CurrentQuarterSickPaymentAmt\": -22.09,\r\n                    \"CurrQtrTipGrpTermLifeInsAdjAmt\": 0,\r\n                    \"TotalTaxAfterAdjustmentAmt\": 112961.49,\r\n                    \"PayrollTaxCreditAmt\": 0,\r\n                    \"TotTaxAfterAdjustmentAndNonRfdCr\": 112961.49,\r\n                    \"IsPayrollTaxCredit\": false,\r\n                    \"Form8974\": null,\r\n                    \"TotTaxDepositAmt\": 94931.83,\r\n                    \"BalanceDueAmt\": 18029.66,\r\n                    \"OverpaidAmt\": 0,\r\n                    \"OverPaymentRecoveryType\": null,\r\n                    \"FilerType\": null,\r\n                    \"QualSickLeaveWagesAmt_Col1\": 0,\r\n                    \"TaxOnQualSickLeaveWagesAmt_Col2\": 0,\r\n                    \"QualFamilyLeaveWagesAmt_Col1\": 0,\r\n                    \"TaxOnQualFamilyLeaveWagesAmt_Col2\": 0,\r\n                    \"NonRfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 0,\r\n                    \"NonRfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n                    \"NonRfdCobraPremAsstCr\": 0,\r\n                    \"TotlNonRfdCrAmt\": 0,\r\n                    \"RfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 0,\r\n                    \"RfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n                    \"RfdCobraPremAsstCr\": 0,\r\n                    \"TotDepositAndRfdCrAmt\": 94931.83,\r\n                    \"QualHealthPlanExpToSickLeaveWagesB4_Apr1_2021\": 0,\r\n                    \"QualHealthPlanExpToFamilyLeaveWagesB4_Apr1_2021\": 0,\r\n                    \"QualSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n                    \"QualHealthPlanExpToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n                    \"CBAToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n                    \"QualFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n                    \"QualHealthPlanExpToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n                    \"CBAToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0\r\n                },\r\n                \"IRSPaymentType\": \"EFTPS\",\r\n                \"IRSPayment\": null,\r\n                \"DepositScheduleType\": {\r\n                    \"DepositorType\": \"SEMIWEEKLY\",\r\n                    \"MonthlyDepositor\": null,\r\n                    \"SemiWeeklyDepositor\": {\r\n                        \"ScheduleBMonth1Amt\": [\r\n                            {\r\n                                \"Day\": 5,\r\n                                \"Amt\": 10785.88\r\n                            },\r\n                            {\r\n                                \"Day\": 13,\r\n                                \"Amt\": 25212.44\r\n                            },\r\n                            {\r\n                                \"Day\": 20,\r\n                                \"Amt\": 11047.18\r\n                            }\r\n                        ],\r\n                        \"ScheduleBMonth2Amt\": [\r\n                            {\r\n                                \"Day\": 3,\r\n                                \"Amt\": 10912.88\r\n                            },\r\n                            {\r\n                                \"Day\": 15,\r\n                                \"Amt\": 16792.8\r\n                            },\r\n                            {\r\n                                \"Day\": 17,\r\n                                \"Amt\": 9667.9\r\n                            }\r\n                        ],\r\n                        \"ScheduleBMonth3Amt\": [\r\n                            {\r\n                                \"Day\": 2,\r\n                                \"Amt\": 15.27\r\n                            },\r\n                            {\r\n                                \"Day\": 3,\r\n                                \"Amt\": 10488.84\r\n                            },\r\n                            {\r\n                                \"Day\": 9,\r\n                                \"Amt\": 8.64\r\n                            },\r\n                            {\r\n                                \"Day\": 15,\r\n                                \"Amt\": 7344.8\r\n                            },\r\n                            {\r\n                                \"Day\": 17,\r\n                                \"Amt\": 10684.86\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"TotalQuarterTaxLiabilityAmt\": 112961.49\r\n                }\r\n            },\r\n            \"ReturnNumber\": null\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form941/create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form941",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"businessid\", responseJSON.Form941Records[0].ReturnHeader.Business.BusinessId);\r",
									"pm.environment.set(\"EINorSSN\", responseJSON.Form941Records[0].ReturnHeader.Business.EINorSSN);\r",
									"pm.environment.set(\"BusinessNm\", responseJSON.Form941Records[0].ReturnHeader.Business.BusinessNm);\r",
									"pm.environment.set(\"TradeNm\", responseJSON.Form941Records[0].ReturnHeader.Business.TradeNm);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form941/get?SubmissionId={{SUB941}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form941",
								"get"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SUB941}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form941/list?BusinessId={{businessid}}&EINorSSN={{EINorSSN}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form941",
								"list"
							],
							"query": [
								{
									"key": "BusinessId",
									"value": "{{businessid}}"
								},
								{
									"key": "EINorSSN",
									"value": "{{EINorSSN}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Form941Records\": [\r\n        {\r\n            \"RecordId\": \"{{REC941}}\",\r\n            \"Sequence\": null,\r\n            \"ReturnHeader\": {\r\n                \"ReturnType\": \"Form941\",\r\n                \"MoreClients\": false,\r\n                \"TaxYr\": \"2023\",\r\n                \"Qtr\": \"Q2\",\r\n                \"Business\": {\r\n                    \"BusinessId\": null,\r\n                    \"BusinessNm\": \"{{BusinessNm}}\",\r\n                    \"TradeNm\": null,\r\n                    \"IsEIN\": true,\r\n                    \"EINorSSN\": \"{{EINorSSN}}\",\r\n                    \"Email\": \"cloe.g+2606a@spantechnologyservices.com\",\r\n                    \"ContactNm\": \"Daphne\",\r\n                    \"Phone\": \"2314568796\",\r\n                    \"PhoneExtn\": null,\r\n                    \"Fax\": null,\r\n                    \"BusinessType\": \"SPRO\",\r\n                    \"SigningAuthority\": {\r\n                        \"Name\": \"Daphne\",\r\n                        \"Phone\": \"2314568796\",\r\n                        \"BusinessMemberType\": \"OWNER\"\r\n                    },\r\n                    \"KindOfEmployer\": null,\r\n                    \"KindOfPayer\": null,\r\n                    \"IsBusinessTerminated\": false,\r\n                    \"IsForeign\": true,\r\n                    \"USAddress\": {\r\n                        \"Address1\": null,\r\n                        \"Address2\": null,\r\n                        \"City\": null,\r\n                        \"State\": null,\r\n                        \"ZipCd\": null\r\n                    },\r\n                    \"ForeignAddress\": {\r\n                        \"Address1\": \"123 main Street\",\r\n                        \"Address2\": null,\r\n                        \"City\": \"India\",\r\n                        \"ProvinceOrStateNm\": \"India\",\r\n                        \"Country\": \"IN\",\r\n                        \"PostalCd\": \"641004\"\r\n                    }\r\n                },\r\n                \"IsThirdPartyDesignee\": false,\r\n                \"ThirdPartyDesignee\": {\r\n                    \"Name\": null,\r\n                    \"Phone\": null,\r\n                    \"PIN\": null\r\n                },\r\n                \"SignatureDetails\": {\r\n                    \"SignatureType\": \"ONLINE_SIGN_PIN\",\r\n                    \"OnlineSignaturePIN\": {\r\n                        \"PIN\": \"1234567895\"\r\n                    },\r\n                    \"ReportingAgentPIN\": null,\r\n                    \"Form8453EMP\": {\r\n                        \"AttachmentNm\": null,\r\n                        \"Attachment\": null,\r\n                        \"AttachmentFileType\": null,\r\n                        \"SignedDate\": \"0001-01-01T00:00:00\"\r\n                    }\r\n                },\r\n                \"BusinessStatusDetails\": {\r\n                    \"IsBusinessClosed\": false,\r\n                    \"BusinessClosedDetails\": {\r\n                        \"Name\": null,\r\n                        \"FinalDateWagesPaid\": null,\r\n                        \"IsForeign\": false,\r\n                        \"USAddress\": null,\r\n                        \"ForeignAddress\": null\r\n                    },\r\n                    \"IsBusinessTransferred\": false,\r\n                    \"BusinessTransferredDetails\": {\r\n                        \"Name\": null,\r\n                        \"BusinessChangeType\": null,\r\n                        \"DateOfChange\": null,\r\n                        \"NewBusinessType\": null,\r\n                        \"NewBusinessName\": null,\r\n                        \"IsForeign\": false,\r\n                        \"USAddress\": {\r\n                            \"Address1\": null,\r\n                            \"Address2\": null,\r\n                            \"City\": null,\r\n                            \"State\": null,\r\n                            \"ZipCd\": null\r\n                        },\r\n                        \"ForeignAddress\": {\r\n                            \"Address1\": null,\r\n                            \"Address2\": null,\r\n                            \"City\": null,\r\n                            \"ProvinceOrStateNm\": null,\r\n                            \"Country\": null,\r\n                            \"PostalCd\": null\r\n                        }\r\n                    },\r\n                    \"IsSeasonalEmployer\": false\r\n                }\r\n            },\r\n            \"ReturnData\": {\r\n                \"Form941\": {\r\n                    \"EmployeeCnt\": 40,\r\n                    \"WagesAmt\": 7000.0,\r\n                    \"FedIncomeTaxWHAmt\": 6000.0,\r\n                    \"WagesNotSubjToSSMedcrTaxInd\": false,\r\n                    \"SocialSecurityTaxCashWagesAmt_Col1\": 5000.0,\r\n                    \"TaxableSocSecTipsAmt_Col1\": 0.0,\r\n                    \"TaxableMedicareWagesTipsAmt_Col1\": 0.0,\r\n                    \"TxblWageTipsSubjAddnlMedcrAmt_Col1\": 0.0,\r\n                    \"SocialSecurityTaxAmt_Col2\": 620.0,\r\n                    \"TaxOnSocialSecurityTipsAmt_Col2\": 0.0,\r\n                    \"TaxOnMedicareWagesTipsAmt_Col2\": 0.0,\r\n                    \"TaxOnWageTipsSubjAddnlMedcrAmt_Col2\": 0.0,\r\n                    \"TotSSMdcrTaxAmt\": 1426.0,\r\n                    \"TaxOnUnreportedTips3121qAmt\": 0.0,\r\n                    \"TotalTaxBeforeAdjustmentAmt\": 7426.0,\r\n                    \"CurrentQtrFractionsCentsAmt\": 0.0,\r\n                    \"CurrentQuarterSickPaymentAmt\": 0.0,\r\n                    \"CurrQtrTipGrpTermLifeInsAdjAmt\": 0.0,\r\n                    \"TotalTaxAfterAdjustmentAmt\": 7426.0,\r\n                    \"PayrollTaxCreditAmt\": 0.0,\r\n                    \"TotTaxAfterAdjustmentAndNonRfdCr\": 7426.0,\r\n                    \"IsPayrollTaxCredit\": false,\r\n                    \"Form8974\": null,\r\n                    \"TotTaxDepositAmt\": 0.0,\r\n                    \"BalanceDueAmt\": 7426.0,\r\n                    \"OverpaidAmt\": 0.0,\r\n                    \"OverPaymentRecoveryType\": null,\r\n                    \"FilerType\": null,\r\n                    \"NonRfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0.0,\r\n                    \"RfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0.0,\r\n                    \"QualHealthPlanExpToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0.0,\r\n                    \"QualSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0.0,\r\n                    \"CBAToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0.0,\r\n                    \"QualFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0.0,\r\n                    \"QualHealthPlanExpToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0.0,\r\n                    \"CBAToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0.0,\r\n                    \"NonRfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 0.0,\r\n                    \"NonRfdCobraPremAsstCr\": 0.0,\r\n                    \"NumOfIndivCobraPremAsst\": 0,\r\n                    \"RfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 0.0,\r\n                    \"RfdCobraPremAsstCr\": 0.0,\r\n                    \"QualHealthPlanExpToSickLeaveWagesB4_Apr1_2021\": 0.0,\r\n                    \"QualHealthPlanExpToFamilyLeaveWagesB4_Apr1_2021\": 0.0,\r\n                    \"QualSickLeaveWagesAmt_Col1\": 6000.0,\r\n                    \"QualFamilyLeaveWagesAmt_Col1\": 7000.0,\r\n                    \"TaxOnQualSickLeaveWagesAmt_Col2\": 372.0,\r\n                    \"TaxOnQualFamilyLeaveWagesAmt_Col2\": 434.0,\r\n                    \"NonRfdCrQualSickAndFamilyWagesAmt\": 0.0,\r\n                    \"TotlNonRfdCrAmt\": 0.0,\r\n                    \"DeferredAmtErSSTax\": 0.0,\r\n                    \"DeferredAmtSSTax\": 0.0,\r\n                    \"DeferredAmtEESSTax\": 0.0,\r\n                    \"RfdCrQualSickAndFamilyWagesAmt\": 0.0,\r\n                    \"TotDepositAndRfdCrAmt\": 0.0,\r\n                    \"QualHealthPlanExpToSickLeaveWagesAmt\": 0.0,\r\n                    \"QualHealthPlanExpToFamilyLeaveWagesAmt\": 0.0,\r\n                    \"Form5884CCr\": 0.0,\r\n                    \"QualWagesPaidMar13To31\": 0.0,\r\n                    \"QualHealthPlanExpMar13To31\": 0.0\r\n                },\r\n                \"IRSPaymentType\": \"EFTPS\",\r\n                \"IRSPayment\": {\r\n                    \"BankRoutingNum\": null,\r\n                    \"AccountType\": null,\r\n                    \"BankAccountNum\": null,\r\n                    \"Phone\": null\r\n                },\r\n                \"DepositScheduleType\": {\r\n                    \"DepositorType\": \"MINTAXLIABILITY\",\r\n                    \"MonthlyDepositor\": {\r\n                        \"TaxLiabilityMonth1\": 0.0,\r\n                        \"TaxLiabilityMonth2\": 0.0,\r\n                        \"TaxLiabilityMonth3\": 0.0\r\n                    },\r\n                    \"SemiWeeklyDepositor\": {\r\n                        \"ScheduleBMonth1Amt\": [],\r\n                        \"ScheduleBMonth2Amt\": [],\r\n                        \"ScheduleBMonth3Amt\": []\r\n                    },\r\n                    \"TotalQuarterTaxLiabilityAmt\": 0.0\r\n                }\r\n            }\r\n        }\r\n    ],\r\n    \"SubmissionId\": \"{{SUB941}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form941/update",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form941",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    responseJSON = JSON.parse(responseBody);\r",
									"    pm.test(`RecordStatus is ${responseJSON.Form941Records.SuccessRecords[0].RecordStatus}`, function () {\r",
									"        pm.expect(responseJSON.Form941Records.SuccessRecords[0].RecordStatus).to.be.oneOf([\"Created\"])\r",
									"    })\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form941/status?SubmissionId={{SUB941}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form941",
								"status"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SUB941}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form941/validate?SubmissionId={{SUB941}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form941",
								"validate"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SUB941}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form941/getpdf?RecordId={{SUB941}}&SubmissionId={{SUB941}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form941",
								"getpdf"
							],
							"query": [
								{
									"key": "RecordId",
									"value": "{{SUB941}}"
								},
								{
									"key": "SubmissionId",
									"value": "{{SUB941}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Transmit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"SubmissionId\": \"{{SUB941}}\",\r\n \"RecordIds\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form941/transmit",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form941",
								"transmit"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form941/getpdf?RecordId={{SUB941}}&SubmissionId={{SUB941}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form941",
								"getpdf"
							],
							"query": [
								{
									"key": "RecordId",
									"value": "{{SUB941}}"
								},
								{
									"key": "SubmissionId",
									"value": "{{SUB941}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('randomNumer_SSN',_.random(100, 999)+'-'+_.random(10, 99)+'-'+_.random(1000, 9999));\r",
									"pm.environment.set('randomNumer_EIN',_.random(10, 99)+'-'+_.random(1000000, 9999999));\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"]=responseCode.code===200;\r",
									"var responseJSON;\r",
									"responseJSON=JSON.parse(responseBody);\r",
									"pm.environment.set(\"SUB941\", responseJSON.SubmissionId);\r",
									"pm.environment.set(\"REC941\", responseJSON.Form941Records.SuccessRecords[0].RecordId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SubmissionId\": null,\r\n    \"Form941Records\": [\r\n        {\r\n            \"RecordId\": null,\r\n            \"Sequence\": \"1\",\r\n            \"ReturnHeader\": {\r\n                \"ReturnType\": \"FORM941PR\",\r\n                \"TaxYr\": \"2023\",\r\n                \"Qtr\": \"Q2\",\r\n                \"Business\": {\r\n                    \"BusinessId\": null,\r\n                    \"BusinessNm\": \"ASDFEY LLC - {{i}}\",\r\n                    \"TradeNm\": null,\r\n                    \"IsEIN\": true,\r\n                    \"EINorSSN\": \"{{randomNumer_EIN}}\",\r\n                    \"Email\": \"fzambon@intechsol-pr.com\",\r\n                    \"ContactNm\": \"Joel Cruz\",\r\n                    \"Phone\": \"787-641-7809\",\r\n                    \"PhoneExtn\": \"\",\r\n                    \"Fax\": null,\r\n                    \"BusinessType\": \"CORP\",\r\n                    \"SigningAuthority\": {\r\n                        \"Name\": \"Joel Cruz\",\r\n                        \"Phone\": \"7876417809\",\r\n                        \"BusinessMemberType\": \"TAXOFFICER\"\r\n                    },\r\n                    \"KindOfEmployer\": null,\r\n                    \"KindOfPayer\": null,\r\n                    \"IsBusinessTerminated\": false,\r\n                    \"IsForeign\": false,\r\n                    \"USAddress\": {\r\n                        \"Address1\": \"P O Box 140400\",\r\n                        \"Address2\": null,\r\n                        \"City\": \"Arecibo\",\r\n                        \"State\": \"PR\",\r\n                        \"ZipCd\": \"00614\"\r\n                    },\r\n                    \"ForeignAddress\": null\r\n                },\r\n                \"IsThirdPartyDesignee\": true,\r\n                \"ThirdPartyDesignee\": {\r\n                    \"Name\": \"Joel Cruz\",\r\n                    \"Phone\": \"787-641-7809\",\r\n                    \"PIN\": \"11111\"\r\n                },\r\n                \"SignatureDetails\": {\r\n                    \"SignatureType\": \"ONLINE_SIGN_PIN\",\r\n                    \"OnlineSignaturePIN\": {\r\n                        \"PIN\": \"1234567895\"\r\n                    },\r\n                    \"ReportingAgentPIN\": null,\r\n                    \"Form8453EMP\": null\r\n                },\r\n                \"BusinessStatusDetails\": {\r\n                    \"IsBusinessClosed\": false,\r\n                    \"BusinessClosedDetails\": {\r\n                        \"Name\": null,\r\n                        \"FinalDateWagesPaid\": null,\r\n                        \"IsForeign\": false,\r\n                        \"USAddress\": null,\r\n                        \"ForeignAddress\": null\r\n                    },\r\n                    \"IsBusinessTransferred\": false,\r\n                    \"BusinessTransferredDetails\": {\r\n                        \"Name\": null,\r\n                        \"BusinessChangeType\": null,\r\n                        \"DateOfChange\": null,\r\n                        \"NewBusinessType\": null,\r\n                        \"NewBusinessName\": null,\r\n                        \"IsForeign\": false,\r\n                        \"USAddress\": null,\r\n                        \"ForeignAddress\": null,\r\n                        \"IsSale\": false\r\n                    },\r\n                    \"IsSeasonalEmployer\": false\r\n                }\r\n            },\r\n            \"ReturnData\": {\r\n                \"Form941\": {\r\n                    \"EmployeeCnt\": 52,\r\n                    \"WagesAmt\": 0,\r\n                    \"FedIncomeTaxWHAmt\": 0,\r\n                    \"WagesNotSubjToSSMedcrTaxInd\": false,\r\n                    \"SocialSecurityTaxCashWagesAmt_Col1\": 738468.3,\r\n                    \"TaxableSocSecTipsAmt_Col1\": 0,\r\n                    \"TaxableMedicareWagesTipsAmt_Col1\": 738468.3,\r\n                    \"TxblWageTipsSubjAddnlMedcrAmt_Col1\": 0,\r\n                    \"SocialSecurityTaxAmt_Col2\": 91570.07,\r\n                    \"TaxOnSocialSecurityTipsAmt_Col2\": 0,\r\n                    \"TaxOnMedicareWagesTipsAmt_Col2\": 21415.58,\r\n                    \"TaxOnWageTipsSubjAddnlMedcrAmt_Col2\": 0,\r\n                    \"TotSSMdcrTaxAmt\": 112985.65,\r\n                    \"TaxOnUnreportedTips3121qAmt\": 0,\r\n                    \"TotalTaxBeforeAdjustmentAmt\": 112985.65,\r\n                    \"CurrentQtrFractionsCentsAmt\": -2.07,\r\n                    \"CurrentQuarterSickPaymentAmt\": -22.09,\r\n                    \"CurrQtrTipGrpTermLifeInsAdjAmt\": 0,\r\n                    \"TotalTaxAfterAdjustmentAmt\": 112961.49,\r\n                    \"PayrollTaxCreditAmt\": 0,\r\n                    \"TotTaxAfterAdjustmentAndNonRfdCr\": 112961.49,\r\n                    \"IsPayrollTaxCredit\": false,\r\n                    \"Form8974\": null,\r\n                    \"TotTaxDepositAmt\": 94931.83,\r\n                    \"BalanceDueAmt\": 18029.66,\r\n                    \"OverpaidAmt\": 0,\r\n                    \"OverPaymentRecoveryType\": null,\r\n                    \"FilerType\": null,\r\n                    \"QualSickLeaveWagesAmt_Col1\": 0,\r\n                    \"TaxOnQualSickLeaveWagesAmt_Col2\": 0,\r\n                    \"QualFamilyLeaveWagesAmt_Col1\": 0,\r\n                    \"TaxOnQualFamilyLeaveWagesAmt_Col2\": 0,\r\n                    \"NonRfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 0,\r\n                    \"NonRfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n                    \"NonRfdCobraPremAsstCr\": 0,\r\n                    \"TotlNonRfdCrAmt\": 0,\r\n                    \"RfdCrQualSickAndFamilyWagesB4_Apr1_2021\": 0,\r\n                    \"RfdCrQualSickAndFamilyWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n                    \"RfdCobraPremAsstCr\": 0,\r\n                    \"TotDepositAndRfdCrAmt\": 94931.83,\r\n                    \"QualHealthPlanExpToSickLeaveWagesB4_Apr1_2021\": 0,\r\n                    \"QualHealthPlanExpToFamilyLeaveWagesB4_Apr1_2021\": 0,\r\n                    \"QualSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n                    \"QualHealthPlanExpToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n                    \"CBAToSickLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n                    \"QualFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n                    \"QualHealthPlanExpToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0,\r\n                    \"CBAToFamilyLeaveWagesAfter_Mar31_2021AndB4_Oct1_2021\": 0\r\n                },\r\n                \"IRSPaymentType\": \"EFTPS\",\r\n                \"IRSPayment\": null,\r\n                \"DepositScheduleType\": {\r\n                    \"DepositorType\": \"SEMIWEEKLY\",\r\n                    \"MonthlyDepositor\": null,\r\n                    \"SemiWeeklyDepositor\": {\r\n                        \"ScheduleBMonth1Amt\": [\r\n                            {\r\n                                \"Day\": 5,\r\n                                \"Amt\": 10785.88\r\n                            },\r\n                            {\r\n                                \"Day\": 13,\r\n                                \"Amt\": 25212.44\r\n                            },\r\n                            {\r\n                                \"Day\": 20,\r\n                                \"Amt\": 11047.18\r\n                            }\r\n                        ],\r\n                        \"ScheduleBMonth2Amt\": [\r\n                            {\r\n                                \"Day\": 3,\r\n                                \"Amt\": 10912.88\r\n                            },\r\n                            {\r\n                                \"Day\": 15,\r\n                                \"Amt\": 16792.8\r\n                            },\r\n                            {\r\n                                \"Day\": 17,\r\n                                \"Amt\": 9667.9\r\n                            }\r\n                        ],\r\n                        \"ScheduleBMonth3Amt\": [\r\n                            {\r\n                                \"Day\": 2,\r\n                                \"Amt\": 15.27\r\n                            },\r\n                            {\r\n                                \"Day\": 3,\r\n                                \"Amt\": 10488.84\r\n                            },\r\n                            {\r\n                                \"Day\": 9,\r\n                                \"Amt\": 8.64\r\n                            },\r\n                            {\r\n                                \"Day\": 15,\r\n                                \"Amt\": 7344.8\r\n                            },\r\n                            {\r\n                                \"Day\": 17,\r\n                                \"Amt\": 10684.86\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"TotalQuarterTaxLiabilityAmt\": 112961.49\r\n                }\r\n            },\r\n            \"ReturnNumber\": null\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-1.7.3}}/Form941/Create",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"Form941",
								"Create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{accesstoken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host-1.7.3}}/form941/delete?SubmissionId={{SUB941}}&RecordId={{REC941}}",
							"host": [
								"{{host-1.7.3}}"
							],
							"path": [
								"form941",
								"delete"
							],
							"query": [
								{
									"key": "SubmissionId",
									"value": "{{SUB941}}"
								},
								{
									"key": "RecordId",
									"value": "{{REC941}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}